.TH "doc_decisions_cmake_plugins_md" 3elektra "Fri Apr 29 2016" "Version 0.8.16" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_cmake_plugins_md \- CMake Plugins 

.SS "Issue"
.PP
.IP "\(bu" 2
Plugin names and plugin folders must exactly match (resolver_*, crypto_*)
.IP "\(bu" 2
Non-existing plugin variants are not checked
.IP "\(bu" 2
Default plugin collection is too small
.IP "\(bu" 2
Duplicate of all plugin names in different folder
.IP "\(bu" 2
Only one category per plugin
.IP "\(bu" 2
On some OS some plugins won't work (simpleini)
.PP
.PP
.SS "Constraints"
.PP
.SS "Assumptions"
.PP
.IP "\(bu" 2
Many plugins work without dependencies and variants, this should be simple
.PP
.PP
.SS "Considered Alternatives"
.PP
.IP "\(bu" 2
have one more mapping that describes folder <-> plugins (bad coherence)
.IP "\(bu" 2
directly use README\&.md to also describe cmake deps (too limited in expression)
.IP "\(bu" 2
split up AddPlugin\&.cmake and CMakeLists\&.txt (does not work well with variants)
.IP "\(bu" 2
simply adding all directories in src/plugins and decide within the \fCadd_plugin\fP if we should drop the plugin (see below in Argument)
.PP
.PP
Names for flag:
.PP
.IP "\(bu" 2
\fCDEPENDENCIES\fP -> might be used for \fCadd_plugin\fP
.IP "\(bu" 2
\fCASSEMBLE_DEPS\fP
.IP "\(bu" 2
\fCFIND_DEPS\fP -> not only finding happens
.IP "\(bu" 2
\fCPROCESS_DEPS\fP
.IP "\(bu" 2
\fCHANDLE_DEPS\fP
.IP "\(bu" 2
\fCDEPS_MODE\fP -> too generic, new terminology
.IP "\(bu" 2
\fCCHECK_DEPS\fP -> not only checking happens
.IP "\(bu" 2
\fCDO_DEPS\fP -> sounds funny
.IP "\(bu" 2
\fCFIND_PACKAGES\fP -> not only packages are subject to this phase
.IP "\(bu" 2
\fCCOLLECT\fP -> needs NOT
.IP "\(bu" 2
\fCFIND_PHASE\fP -> needs NOT
.IP "\(bu" 2
\fCDEPENDENCY\fP -> ambiguous
.PP
.PP
.SS "Decision"
.PP
Introduce a cmake process where all plugins are processed two times:
.PP
1\&.) collection phase (\fCDEPENDENCY_PHASE\fP is \fCOFF\fP), with:
.IP "\(bu" 2
\fCADDED_PLUGINS\fP
.IP "\(bu" 2
\fCREMOVED_PLUGINS\fP
.IP "\(bu" 2
\fCADDED_DIRECTORIES\fP
.IP "\(bu" 2
add_plugin, but without actually adding internally 2\&.) assemble dependency phase (\fCDEPENDENCY_PHASE\fP is \fCON\fP, only considering \fCADDED_DIRECTORIES\fP), with:
.IP "\(bu" 2
add_libraries, actually search for libraries on the system
.IP "\(bu" 2
add_plugin, with \fIactually adding\fP the plugins
.PP
.PP
Use following cmake variables for the phases:
.PP
.IP "\(bu" 2
\fCCOLLECTION_PHASE\fP \&.\&. collect all \fCadd_plugins\fP
.IP "\(bu" 2
\fCDEPENDENCY_PHASE\fP \&.\&. resolve all dependencies, do \fCadd_plugins\fP again
.IP "\(bu" 2
\fCADDTESTING_PHASE\fP \&.\&. (reserve for potential 3rd phase)
.PP
.PP
.SS "Argument"
.PP
Solves all the issues without adding too much complexity\&. Can be extended to three phases if we need that for tests (they need knowledge about which plugins actually were added)
.PP
Maintaining additional mappings is very time-consuming\&. Simply adding all plugins directories is problematic\&. It would:
.PP
.IP "\(bu" 2
clutter the cmake output (especially in the case of errors)
.IP "\(bu" 2
introduce more variables into the CMakeCache which are irrelevant for the user
.IP "\(bu" 2
maybe even find libraries in wrong versions which are incompatible to what other plugins need
.PP
.PP
.SS "Implications"
.PP
.IP "\(bu" 2
need to adopt all CMakeLists\&.txt to use \fCfind_package\fP only in the second phase
.PP
.PP
.SS "Related decisions"
.PP
.SS "Notes"

