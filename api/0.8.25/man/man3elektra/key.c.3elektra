.TH "key.c" 3elektra "Sun Nov 18 2018" "Version 0.8.25" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
key.c \- Methods for Key manipulation\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'kdb\&.h'\fP
.br
\fC#include 'kdbprivate\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "Key * \fBkeyNew\fP (const char *name,\&.\&.\&.)"
.br
.RI "A practical way to fully create a Key object in one step\&. "
.ti -1c
.RI "Key * \fBkeyVNew\fP (const char *name, va_list va)"
.br
.RI "A practical way to fully create a Key object in one step\&. "
.ti -1c
.RI "Key * \fBkeyDup\fP (const Key *source)"
.br
.RI "Return a duplicate of a key\&. "
.ti -1c
.RI "int \fBkeyCopy\fP (Key *dest, const Key *source)"
.br
.RI "Copy or Clear a key\&. "
.ti -1c
.RI "int \fBkeyDel\fP (Key *key)"
.br
.RI "A destructor for Key objects\&. "
.ti -1c
.RI "int \fBkeyClear\fP (Key *key)"
.br
.RI "Key Object Cleaner\&. "
.ti -1c
.RI "ssize_t \fBkeyIncRef\fP (Key *key)"
.br
.RI "Increment the viability of a key object\&. "
.ti -1c
.RI "ssize_t \fBkeyDecRef\fP (Key *key)"
.br
.RI "Decrement the viability of a key object\&. "
.ti -1c
.RI "ssize_t \fBkeyGetRef\fP (const Key *key)"
.br
.RI "Return how many references the key has\&. "
.in -1c
.SH "Detailed Description"
.PP 
Methods for Key manipulation\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see LICENSE\&.md or https://www.libelektra.org) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "Key* keyVNew (const char * name, va_list va)"

.PP
A practical way to fully create a Key object in one step\&. To just get a key object, simple do:
.PP
.PP
.nf
Key *k = keyNew(0);
// work with it
keyDel (k);
.fi
.PP
 If you want the key object to contain a name, value, comment and other meta info read on\&.
.PP
\fBNote:\fP
.RS 4
When you already have a key with similar properties its easier to \fBkeyDup()\fP the key\&.
.RE
.PP
You can call it in many different ways depending on the attribute tags you pass as parameters\&. Tags are represented as \fBkeyswitch_t\fP values, and tell \fBkeyNew()\fP which Key attribute comes next\&.
.PP
We can also give an empty key name and a KEY_END tag with the same effect as before:
.PP
.PP
.nf
Key *k =keyNew("", KEY_END); // Has the same effect as above
// work with it
keyDel (k);
.fi
.PP
 But we can also give the key a proper name right from the start:
.PP
.PP
.nf
// Create and initialize a key with a name and nothing else
Key *k=keyNew("user/some/example", KEY_END);
// work with it
keyDel (k);
.fi
.PP
 So, \fBkeyNew()\fP allocates memory for a key object and \fBkeyDel()\fP cleans everything up\&.
.PP
\fBkeyNew()\fP processes the given argument list even further\&. The Key attribute tags are the following:
.IP "\(bu" 2
\fBKEY_VALUE\fP 
.br
 Next parameter is a pointer to the value that will be used\&. If no \fBKEY_BINARY\fP was used before, a string is assumed\&. 
.PP
.nf
// Create and initialize a key with a name and nothing else
Key *k=keyNew("user/tmp/ex0",
        KEY_VALUE, "some data",    // set a string value
        KEY_END);                  // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_SIZE\fP 
.br
 Define a maximum length of the value\&. This is only used when setting a binary key\&. 
.PP
.nf
// Create and initialize a key with a name and nothing else
Key *k=keyNew("user/tmp/ex1",
        KEY_SIZE, 4,               // has no effect on strings
        KEY_VALUE, "some data",    // set a string value
        KEY_END);                  // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_META\fP 
.br
 Next two parameter is a metaname and a metavalue\&. See \fBkeySetMeta()\fP\&. 
.PP
.nf
Key *k=keyNew("user/tmp/ex3",
        KEY_META, "comment", "a comment",  // with a comment
        KEY_META, "owner", "root",         // and an owner
        KEY_META, "special", "yes",        // and any other metadata
        KEY_END);                  // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_END\fP 
.br
 Must be the last parameter passed to \fBkeyNew()\fP\&. It is always required, unless the \fCkeyName\fP is 0\&.
.IP "\(bu" 2
\fBKEY_FLAGS\fP 
.br
 Bitwise disjunction of flags, which don't require one or more values\&. recommended way to set multiple flags\&. overrides previously defined flags\&. 
.PP
.nf
Key *k=keyNew("user/tmp/ex3",
        KEY_FLAGS, KEY_BINARY | KEY_CASCADING_NAME, // flags
        KEY_SIZE, 7,                    // assume binary length 7
        KEY_VALUE, "some data",         // value that will be truncated in 7 bytes
        KEY_END);                       // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_BINARY\fP 
.br
 Allows one to change the key to a binary key\&. Make sure that you also pass \fBKEY_SIZE\fP before you set the value\&. Otherwise it will be cut off with first \\0 in the string\&. So this flag toggle from \fBkeySetString()\fP to \fBkeySetBinary()\fP\&. If no value (nor size) is given, it will be a NULL key\&. 
.PP
.nf
// Create and initialize a key with a name and nothing else
Key *k=keyNew("user/tmp/ex2",
        KEY_BINARY,
        KEY_SIZE, 4,               // now the size is important
        KEY_VALUE, "some data",    // sets the binary value ("some")
        KEY_END);                  // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_CASCADING_NAME\fP allow the name to start with / useful for \fBksLookup()\fP and \fBkdbGet()\fP parent/lookup keys
.IP "\(bu" 2
\fBKEY_META_NAME\fP allow the name to start with arbitrary namespaces useful to compare with metakeys
.PP
.PP
\fBDeprecated\fP
.RS 4
The flags below are deprecated and \fBKEY_META\fP should be preferred\&. They remain some time, however, for compatibility:
.IP "\(bu" 2
\fBKEY_DIR\fP 
.br
 Define that the key is a directory rather than a ordinary key\&. This means its executable bits in its mode are set\&. But even without this option the key can have subkeys\&. See \fBkeySetDir()\fP\&.
.IP "\(bu" 2
\fBKEY_OWNER\fP 
.br
 Next parameter is the owner\&. See \fBkeySetOwner()\fP\&.
.IP "\(bu" 2
\fBKEY_UID\fP, \fBKEY_GID\fP 
.br
 Next parameter is taken as the UID (uid_t) or GID (gid_t) that will be defined on the key\&. See \fBkeySetUID()\fP and \fBkeySetGID()\fP\&.
.IP "\(bu" 2
\fBKEY_MODE\fP 
.br
 Next parameter is taken as mode permissions (int) to the key\&. See \fBkeySetMode()\fP\&. 
.PP
.nf
Key *k=keyNew("user/tmp/ex3",
        KEY_VALUE, "some data",    // with a simple value
        KEY_MODE, 0777,            // permissions
        KEY_END);                  // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_COMMENT\fP 
.br
 Next parameter is a comment\&. See \fBkeySetComment()\fP\&. 
.PP
.nf
Key *k=keyNew("user/tmp/ex4",
        KEY_BINARY,                     // key type
        KEY_SIZE, 7,                    // assume binary length 7
        KEY_VALUE, "some data",         // value that will be truncated in 7 bytes
        KEY_COMMENT, "value is truncated",
        KEY_OWNER, "root",              // owner (not uid) is root
        KEY_UID, 0,                     // root uid
        KEY_END);                       // end of args

.fi
.PP

.PP
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIname\fP a valid name to the key, or NULL to get a simple initialized, but really empty, object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBkeyDel()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a new allocated and initialized Key object\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINULL\fP on allocation error or if an invalid \fCname\fP was passed (see \fBkeySetName()\fP)\&.
.RE
.PP
\fBPrecondition:\fP
.RS 4
caller must use va_start and va_end on va 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIva\fP the variadic argument list 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
