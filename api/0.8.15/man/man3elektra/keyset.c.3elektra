.TH "keyset.c" 3elektra "Tue Feb 16 2016" "Version 0.8.15" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
keyset.c \- 
.PP
Methods for key sets\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <kdbtypes\&.h>\fP
.br
\fC#include 'kdbinternal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "KeySet * \fBksNew\fP (size_t alloc,\&.\&.\&.)"
.br
.RI "\fIAllocate, initialize and return a new KeySet object\&. \fP"
.ti -1c
.RI "KeySet * \fBksVNew\fP (size_t alloc, va_list va)"
.br
.RI "\fIAllocate, initialize and return a new KeySet object\&. \fP"
.ti -1c
.RI "KeySet * \fBksDup\fP (const KeySet *source)"
.br
.RI "\fIReturn a duplicate of a keyset\&. \fP"
.ti -1c
.RI "int \fBksCopy\fP (KeySet *dest, const KeySet *source)"
.br
.RI "\fICopy a keyset\&. \fP"
.ti -1c
.RI "int \fBksDel\fP (KeySet *ks)"
.br
.RI "\fIA destructor for KeySet objects\&. \fP"
.ti -1c
.RI "int \fBkeyCmp\fP (const Key *k1, const Key *k2)"
.br
.RI "\fICompare the name of two keys\&. \fP"
.ti -1c
.RI "int \fBksNeedSync\fP (const KeySet *ks)"
.br
.RI "\fIChecks if KeySet needs sync\&. \fP"
.ti -1c
.RI "ssize_t \fBksGetSize\fP (const KeySet *ks)"
.br
.RI "\fIReturn the number of keys that \fCks\fP contains\&. \fP"
.ti -1c
.RI "ssize_t \fBksAppendKey\fP (KeySet *ks, Key *toAppend)"
.br
.RI "\fIAppends a Key to the end of \fCks\fP\&. \fP"
.ti -1c
.RI "ssize_t \fBksAppend\fP (KeySet *ks, const KeySet *toAppend)"
.br
.RI "\fIAppend all \fCtoAppend\fP contained keys to the end of the \fCks\fP\&. \fP"
.ti -1c
.RI "KeySet * \fBksCut\fP (KeySet *ks, const Key *cutpoint)"
.br
.RI "\fICuts out a keyset at the cutpoint\&. \fP"
.ti -1c
.RI "Key * \fBksPop\fP (KeySet *ks)"
.br
.RI "\fIRemove and return the last key of \fCks\fP\&. \fP"
.ti -1c
.RI "int \fBksRewind\fP (KeySet *ks)"
.br
.RI "\fIRewinds the KeySet internal cursor\&. \fP"
.ti -1c
.RI "Key * \fBksNext\fP (KeySet *ks)"
.br
.RI "\fIReturns the next Key in a KeySet\&. \fP"
.ti -1c
.RI "Key * \fBksCurrent\fP (const KeySet *ks)"
.br
.RI "\fIReturn the current Key\&. \fP"
.ti -1c
.RI "Key * \fBksHead\fP (const KeySet *ks)"
.br
.RI "\fIReturn the first key in the KeySet\&. \fP"
.ti -1c
.RI "Key * \fBksTail\fP (const KeySet *ks)"
.br
.RI "\fIReturn the last key in the KeySet\&. \fP"
.ti -1c
.RI "cursor_t \fBksGetCursor\fP (const KeySet *ks)"
.br
.RI "\fIGet the KeySet internal cursor\&. \fP"
.ti -1c
.RI "Key * \fBksAtCursor\fP (KeySet *ks, cursor_t pos)"
.br
.RI "\fIreturn key at given cursor position \fP"
.ti -1c
.RI "int \fBksSetCursor\fP (KeySet *ks, cursor_t cursor)"
.br
.RI "\fISet the KeySet internal cursor\&. \fP"
.ti -1c
.RI "Key * \fBksLookup\fP (KeySet *ks, Key *key, \fBoption_t\fP options)"
.br
.RI "\fILook for a Key contained in \fCks\fP that matches the name of the \fCkey\fP\&. \fP"
.ti -1c
.RI "Key * \fBksLookupByName\fP (KeySet *ks, const char *name, \fBoption_t\fP options)"
.br
.RI "\fIConvenience method to look for a Key contained in \fCks\fP that matches \fCname\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Methods for key sets\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/COPYING or http://www.libelektra.org) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
