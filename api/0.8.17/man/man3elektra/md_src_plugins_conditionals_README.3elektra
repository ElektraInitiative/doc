.TH "md_src_plugins_conditionals_README" 3elektra "Tue Jun 14 2016" "Version 0.8.17" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_conditionals_README \- Plugin: conditionals 

.IP "\(bu" 2
infos = Information about the conditionals plugin is in keys below
.IP "\(bu" 2
infos/author = Thomas Waser thomas.waser@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides =
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = postgetstorage presetstorage
.IP "\(bu" 2
infos/status = maintained unittest nodep libc preview
.IP "\(bu" 2
infos/metadata = check/condition assign/condition condition/validsuffix
.IP "\(bu" 2
infos/description =
.PP
.PP
This plugin uses if-then-else like conditions\&.
.PP
.SS "Check Syntax"
.PP
Stored in the metakey \fCcheck/condition\fP to validate data is:
.PP
\fC(IF-condition) ? (THEN-condition) : (ELSE-condition)\fP where the ELSE-condition is optional
.PP
Condition: \fCKey\fP \fIOperation\fP `('String' | '1234\&.56' | Key | '')`
.PP
Operations: \fC!=, ==, <, <=, =>, >, :=\fP, where:
.PP
.IP "\(bu" 2
\fC:=\fP is used to set a key value
.IP "\(bu" 2
others are for comparison as in C
.PP
.PP
.SS "Testing if Key exists"
.PP
\fC(! a/key)\fP evaluates to true if the key \fCa/key\fP doesn't exist, to false if it exists\&.
.PP
.SS "Assign Syntax"
.PP
`(IF-condition) ? ('ThenValue') : ('ElseValue')`
.PP
Depending on if the condition is met, either 'ThenValue' or 'ElseValue' will be assigned as key value if the metakey \fCassign/condition\fP is used\&.
.PP
.SS "EXPERIMENTAL: Nested Conditions"
.PP
Multiple conditions can be nested and combined using parentheses and \fC&&\fP (logical AND) or \fC||\fP (logical OR)\&. Additional parentheses must be used to form valid conditions again\&. \fC(\fP \fC(condition 1) && (condition 2)\fP \fC)\fP
.PP
.SS "valid suffix"
.PP
The \fCcondition/validsuffix\fP can be used to define a list of valid suffixes to numeric values\&. If two operants have the same valid suffix or one of them no suffix they will be treated by their numeric value ignoring their suffix\&. `condition/validsuffix = 'm', 'cm', 'km'\fCwould treat\fP2\&.3m\fCjust as the numeric value\fP2\&.3` when comparing to another value having the same or no suffix\&.
.PP
.SS "Example"
.PP
`(this/key != 'value') ? (then/key == some/other/key) : (or/key <= '125')`
.PP
Meaning: IF \fCthis/key\fP NOT EQUAL TO \fC'value'\fP THEN \fCthen/key\fP MUST EQUAL \fCsome/other/key\fP ELSE \fCor/key\fP MUST BE LESS THAN \fC125\fP
.PP
Another full example: 
.PP
.nf
    kdb mount conditionals.dump /tmount/conditionals conditionals dump
    kdb set user/tmount/conditionals/fkey 3.0
    kdb set user/tmount/conditionals/hkey hello
    kdb setmeta user/tmount/conditionals/key check/condition "(hkey == 'hello') ? (fkey == '3.0')" # success
    kdb setmeta user/tmount/conditionals/key check/condition "(hkey == 'hello') ? (fkey == '5.0')" # fail

.fi
.PP
.PP
Assignment example: 
.PP
.nf
    kdb mount conditionals.dump /tmount/conditionals conditionals dump
    kdb set user/tmount/conditionals/hkey Hello
    kdb setmeta user/tmount/conditionals/hkey assign/condition "(hkey == 'Hello') ? ('World')"
    kdb get user/tmount/conditionals/hkey # output: World
.fi
.PP
 
