.TH "org.libelektra.Elektra" 3elektra "Mon Apr 12 2021" "Version 0.9.5" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.Elektra \- The JNA dynamic proxy interface to libelektra\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits Library\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBKeyNewArgumentFlags\fP"
.br
.RI "Enumeration of argument flags for \fBElektra#keyNew(String, Object\&.\&.\&.)\fP\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "Pointer \fBkdbOpen\fP (@Nullable Pointer contractKeySet, Pointer errorKey)"
.br
.RI "Opens the session with the \fBKey\fP database\&. "
.ti -1c
.RI "int \fBkdbClose\fP (Pointer handle, Pointer errorKey)"
.br
.RI "Closes the session with the \fBKey\fP database\&. "
.ti -1c
.RI "int \fBkdbGet\fP (Pointer handle, Pointer returnKeySet, Pointer parentKey)"
.br
.RI "Retrieve keys in an atomic and universal way\&. "
.ti -1c
.RI "int \fBkdbSet\fP (Pointer handle, Pointer keySet, Pointer parentKey)"
.br
.RI "Set keys in an atomic and universal way\&. "
.ti -1c
.RI "int \fBelektraGOptsContractFromStrings\fP (Pointer contractKeySet, long argsSize, String args, long envSize, String env, Pointer parentKey, @Nullable Pointer goptsConfigKeySet)"
.br
.RI "Sets up a contract for use with \fBkdbOpen()\fP that configures the\&. "
.ti -1c
.RI "Pointer \fBkeyNew\fP (@Nullable String name, @Nullable Object\&.\&.\&. args)"
.br
.RI "A practical way to fully create a \fBKey\fP object in one step\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBElektra\fP \fBINSTANCE\fP = Native\&.loadLibrary ('elektra\-kdb', Elektra\&.class)"
.br
.RI "Singleton instance of the native library proxy\&. "
.in -1c
.SH "Detailed Description"
.PP 
The JNA dynamic proxy interface to libelektra\&. 

This proxy is not intended to be used directly by libelektra API consumers\&. Please see \fBKDB\fP and its accompanying classes\&. 
.SH "Member Function Documentation"
.PP 
.SS "int org\&.libelektra\&.Elektra\&.elektraGOptsContractFromStrings (Pointer contractKeySet, long argsSize, String args, long envSize, String env, Pointer parentKey, @Nullable Pointer goptsConfigKeySet)"

.PP
Sets up a contract for use with \fBkdbOpen()\fP that configures the\&. 
.PP
.nf
gopts 

.fi
.PP
 plugin\&.
.PP
\fBParameters:\fP
.RS 4
\fIcontractKeySet\fP \fBPointer\fP to a valid
.PP
.nf
KeySet 

.fi
.PP
 into which the contract will be written\&. 
.br
\fIargsSize\fP Size of the
.PP
.nf
args 

.fi
.PP
 data\&. 
.br
\fIargs\fP Continuous buffer containing all
.PP
.nf
argv 

.fi
.PP
 arguments separated (and terminated) by zero bytes\&. The whole buffer is copied, so the pointer only has to be valid for this function call\&. 
.br
\fIenvSize\fP Size of the
.PP
.nf
env 

.fi
.PP
 data\&. 
.br
\fIenv\fP Continuous buffer containing all environment variables separated (and terminated) by zero bytes The whole buffer is copied, so the pointer only has to be valid for this function call\&. 
.br
\fIparentKey\fP The parent key that should be used by
.PP
.nf
gopts 

.fi
.PP
 \&. Only the key name is copied\&. The key can be deleted immediately after calling this function\&. 
.br
\fIgoptsConfigKeySet\fP Configuration that is used to mount the
.PP
.nf
gopts 

.fi
.PP
 plugin\&. Only keys in the
.PP
.nf
user:/ 

.fi
.PP
 namespace will be used\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.PD 0
.IP "\(bu" 2
.PP
.nf
0 
.fi
.PP
 on success 
.IP "\(bu" 2
.PP
.nf
-1 
.fi
.PP
 on
.PP
.nf
null 

.fi
.PP
 pointer passed 
.PP
.RE
.PP

.SS "int org\&.libelektra\&.Elektra\&.kdbClose (Pointer handle, Pointer errorKey)"

.PP
Closes the session with the \fBKey\fP database\&. 
.br
 
.br
 You must call this method when you finished your affairs with the key database\&. You can still manipulate 
.PP
.nf
Key 

.fi
.PP
 and
.PP
.nf
KeySet 

.fi
.PP
 objects after calling
.PP
.nf
#kdbClose(Pointer, Pointer) 

.fi
.PP
 , but you must not use any
.PP
.nf
kdb*() 

.fi
.PP
 call afterwards\&.
.br
.PP
\fBSee also:\fP
.RS 4
#kdbOpen(Pointer, Pointer) \fBkdbOpen()\fP 
.PP
\fBkeyNew\fP(String, Object\&.\&.\&.) \fBkeyNew()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP \fBPointer\fP to a valid
.PP
.nf
KDB handle 

.fi
.PP
 as returned by \fBkdbOpen()\fP\&. 
.br
\fIerrorKey\fP \fBPointer\fP to a valid
.PP
.nf
Key 

.fi
.PP
 , where issued errors and warnings will be made available\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.PD 0
.IP "\(bu" 2
.PP
.nf
0 
.fi
.PP
 on success 
.IP "\(bu" 2
.PP
.nf
-1 
.fi
.PP
 on
.PP
.nf
null 

.fi
.PP
 pointer passed 
.PP
.RE
.PP

.SS "int org\&.libelektra\&.Elektra\&.kdbGet (Pointer handle, Pointer returnKeySet, Pointer parentKey)"

.PP
Retrieve keys in an atomic and universal way\&. 
.br
 
.br
 The
.PP
.nf
returnKeySet 

.fi
.PP
 may already contain some keys, e\&.g\&. from previous \fBkdbGet()\fP calls\&. The new retrieved keys will be appended using the native function underlying \fBksAppendKey()\fP\&.
.PP
\fBkdbGet()\fP might retrieve more keys than requested (that are not below parentKey)\&. These keys must be passed to when saving modifications via \fBkdbSet()\fP, otherwise they will be lost\&. This stems from the fact that the user has the only copy of the whole configuration and backends only write configuration that was passed to them\&. For example, if you get
.PP
.nf
system:/mountpoint/interest 

.fi
.PP
 you will not only get all keys below
.PP
.nf
system:/mountpoint/interest 

.fi
.PP
 , but also all keys below 
.PP
.nf
system:/mountpoint 

.fi
.PP
 (if
.PP
.nf
system:/mountpoint 

.fi
.PP
 is a mountpoint as the name suggests, but 
.PP
.nf
system:/mountpoint/interest 

.fi
.PP
 is not a mountpoint)\&. Make sure to not touch or remove keys outside the keys of interest, because others may need them!
.PP
Optimization: In the first run of \fBkdbGet()\fP all requested (or more) keys are retrieved\&. On subsequent calls only the keys are retrieved where something was changed inside the key database\&. The other keys stay in the
.PP
.nf
KeySet 

.fi
.PP
 returned as passed\&.
.PP
\fBSee also:\fP
.RS 4
#kdbOpen(Pointer, Pointer) \fBkdbOpen()\fP which needs to be called before 
.PP
#ksLookup(Pointer, Pointer, int) \fBksLookup()\fP and 
.PP
#ksLookupByName(Pointer, String, int) \fBksLookupByName()\fP for powerful lookups after the
.PP
.nf
KeySet 

.fi
.PP
 was retrieved 
.PP
\fBkdbSet(Pointer, Pointer, Pointer)\fP \fBkdbSet()\fP to save the configuration afterwards 
.PP
\fBkdbClose(Pointer, Pointer)\fP \fBkdbClose()\fP to finish affairs with the \fBKey\fP database
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP \fBPointer\fP to a valid
.PP
.nf
KDB handle 

.fi
.PP
 as returned by \fBkdbOpen()\fP\&. 
.br
\fIreturnKeySet\fP \fBPointer\fP to a valid
.PP
.nf
KeySet 

.fi
.PP
 to be populated with all keys found\&. It will not be changed on error or if no update is required\&. 
.br
\fIparentKey\fP \fBPointer\fP to a valid
.PP
.nf
Key 

.fi
.PP
 \&. It is used to add warnings and set an error information\&. Additionally, its name is a hint which keys should be retrieved (it is possible that more are retrieved, see API Note)\&. 
.PD 0

.IP "\(bu" 2
cascading keys (starting with '/') will retrieve the same path in all namespaces 
.IP "\(bu" 2
'/' will retrieve all keys\&. 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
.PD 0
.IP "\(bu" 2
.PP
.nf
1 
.fi
.PP
 if the keys were retrieved successfully 
.IP "\(bu" 2
.PP
.nf
0 
.fi
.PP
 if there was no update 
.IP "\(bu" 2
.PP
.nf
-1 
.fi
.PP
 on failure or
.PP
.nf
null 

.fi
.PP
 pointer passed 
.PP
When a backend fails, \fBkdbGet()\fP will return
.PP
.nf
-1 

.fi
.PP
 with all error and warning information in the
.PP
.nf
parentKey 

.fi
.PP
 and
.PP
.nf
returnKeySet 

.fi
.PP
 left unchanged\&. 
.RE
.PP

.SS "Pointer org\&.libelektra\&.Elektra\&.kdbOpen (@Nullable Pointer contractKeySet, Pointer errorKey)"

.PP
Opens the session with the \fBKey\fP database\&. 
.br
 
.br
 You must always call this method before retrieving or committing any keys to the database\&. In the end of the program, after using the key database, you must not forget to \fBkdbClose()\fP\&.
.br
 
.br
 Get a
.PP
.nf
KDB handle 

.fi
.PP
 for every thread using \fBElektra\fP\&. Don't share the handle across threads, and also not the pointer accessing it\&.
.br
 
.br
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory 
.PP
.nf
Key 

.fi
.PP
 or
.PP
.nf
KeySet 

.fi
.PP
 objects\&.
.PP
\fBSee also:\fP
.RS 4
\fBkdbGet(Pointer, Pointer, Pointer)\fP \fBkdbGet()\fP 
.PP
\fBkdbClose(Pointer, Pointer)\fP \fBkdbClose()\fP 
.PP
\fBkeyNew\fP(String, Object\&.\&.\&.) \fBkeyNew()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcontractKeySet\fP TODO #3754 - documentation unclear - the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP \fBPointer\fP to a valid
.PP
.nf
Key 

.fi
.PP
 , where issued errors and warnings will be made available\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.PD 0
.IP "\(bu" 2
\fBPointer\fP to
.PP
.nf
KDB handle 

.fi
.PP
 on success 
.IP "\(bu" 2
.PP
.nf
null 
.fi
.PP
 on failure 
.PP
.RE
.PP

.SS "int org\&.libelektra\&.Elektra\&.kdbSet (Pointer handle, Pointer keySet, Pointer parentKey)"

.PP
Set keys in an atomic and universal way\&. 
.br
 
.br
 For the particularities of error handling, please see the documentation of the native library: TODO #3754 link to C API documentation
.PP
\fBkdbGet()\fP must be called before \fBkdbSet()\fP: initially (after \fBkdbOpen()\fP) and also after conflict errors in \fBkdbSet()\fP\&.
.PP
Optimization: Each key is checked using the native function underlying \fBkeyNeedSync()\fP before being actually committed\&. If no key of a backend needs to be synced any affairs to backends are omitted and
.PP
.nf
0 

.fi
.PP
 is returned\&.
.br
 It is your responsibility to save the original keyset if you need it afterwards\&.
.br
 If you want to be sure to get a fresh keyset again, you need to open a second handle to the key database using \fBkdbOpen()\fP\&.
.PP
\fBSee also:\fP
.RS 4
#keyNeedSync(Pointer) \fBkeyNeedSync()\fP 
.PP
#kdbOpen(Pointer, Pointer) kdbopen() and 
.PP
\fBkdbGet(Pointer, Pointer, Pointer)\fP \fBkdbGet()\fP must be called first 
.PP
\fBkdbClose(Pointer, Pointer)\fP \fBkdbClose()\fP must be called afterwards
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP \fBPointer\fP to a valid
.PP
.nf
KDB handle 

.fi
.PP
 as returned by \fBkdbOpen()\fP\&. 
.br
\fIkeySet\fP \fBPointer\fP to a valid
.PP
.nf
KeySet 

.fi
.PP
 containing modified keys, otherwise no update is done\&. 
.br
\fIparentKey\fP \fBPointer\fP to a valid
.PP
.nf
Key 

.fi
.PP
 \&. It is used to add warnings and set an error information\&. Additionally, its name is an hint which keys should be committed (it is possible that more are changed)\&.
.br
 With
.PP
.nf
parentKey 

.fi
.PP
 you can give an hint which part of the given
.PP
.nf
KeySet 

.fi
.PP
 is of interest to you\&. Then you promise to only modify or remove keys below this key\&. All others would be passed back as they were retrieved by \fBkdbGet()\fP\&. 
.PD 0

.IP "\(bu" 2
cascading keys (starting with '/') will set the path in all namespaces 
.IP "\(bu" 2
'/' will commit all keys 
.IP "\(bu" 2
metanames will be rejected (error C01320) 
.IP "\(bu" 2
empty/invalid (error C01320) 
.PP
.RE
.PP
\fBReturns:\fP
.RS 4
.PD 0
.IP "\(bu" 2
.PP
.nf
1 
.fi
.PP
 on success 
.IP "\(bu" 2
.PP
.nf
0 
.fi
.PP
 if nothing had to be done, no changes in \fBKDB\fP 
.IP "\(bu" 2
.PP
.nf
-1 
.fi
.PP
 on failure or
.PP
.nf
null 

.fi
.PP
 pointer passed\&. No changes in \fBKDB\fP, an error will be set on 
.PP
.nf
parentKey 

.fi
.PP
 if possible 
.PP
.RE
.PP

.SS "Pointer org\&.libelektra\&.Elektra\&.keyNew (@Nullable String name, @Nullable Object\&.\&.\&. args)"

.PP
A practical way to fully create a \fBKey\fP object in one step\&. 
.br
 
.br
 For examples and further particularities, please see the documentation of the native library: TODO #3754 link to C API documentation
.PP
\fBSee also:\fP
.RS 4
#keyDel(Pointer) \fBkeyDel()\fP 
.PP
\fBKeyNewArgumentFlags\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIname\fP A valid name to the key, or
.PP
.nf
null 

.fi
.PP
 to get a simple initialized, but really empty, object\&. 
.br
\fIargs\fP Argument flags, each followed by a corresponding value, if appropriate\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.PD 0
.IP "\(bu" 2
A \fBPointer\fP to a newly allocated and initialized
.PP
.nf
Key 

.fi
.PP
 object on success 
.IP "\(bu" 2
.PP
.nf
null 
.fi
.PP
 on allocation error or if an invalid
.PP
.nf
name 

.fi
.PP
 was passed (see \fBkeySetName()\fP 
.PP
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
