.TH "kdbnotification" 3elektra "Sun Nov 18 2018" "Version 0.8.25" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdbnotification \- Notification feature\&.  

.SH SYNOPSIS
.br
.PP
.SS "Files"

.in +1c
.ti -1c
.RI "file \fBkdbnotification\&.h\fP"
.br
.RI "Elektra-Notification structures and declarations for application developers\&. "
.ti -1c
.RI "file \fBkdbnotificationinternal\&.h\fP"
.br
.RI "Elektra-Notification structures and declarations for developing notification and transport plugins\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBElektraNotificationConversionErrorCallback\fP) (Key *key, void *context)"
.br
.RI "Callback function called when string to number conversion failed\&. "
.ti -1c
.RI "typedef void(* \fBElektraNotificationChangeCallback\fP) (Key *key, void *context)"
.br
.RI "Callback function for key changes\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBelektraNotificationOpen\fP (KDB *kdb)"
.br
.RI "Initialize the notification system for the given KDB instance\&. "
.ti -1c
.RI "int \fBelektraNotificationClose\fP (KDB *kdb)"
.br
.RI "Stop the notification system for the given KDB instance\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterCallback\fP (KDB *kdb, Key *key, \fBElektraNotificationChangeCallback\fP callback, void *context)"
.br
.RI "Subscribe for updates via callback when a given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterCallbackSameOrBelow\fP (KDB *kdb, Key *key, \fBElektraNotificationChangeCallback\fP callback, void *context)"
.br
.RI "Subscribe for updates via callback when a given key or a key below changed\&. "
.in -1c
.in +1c
.ti -1c
.RI "int \fBelektraNotificationRegisterInt\fP (KDB *kdb, Key *key, int *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterUnsignedInt\fP (KDB *kdb, Key *key, unsigned int *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterLong\fP (KDB *kdb, Key *key, long *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterUnsignedLong\fP (KDB *kdb, Key *key, unsigned long *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterLongLong\fP (KDB *kdb, Key *key, long long *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterUnsignedLongLong\fP (KDB *kdb, Key *key, unsigned long long *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterFloat\fP (KDB *kdb, Key *key, float *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterDouble\fP (KDB *kdb, Key *key, double *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbBoolean\fP (KDB *kdb, Key *key, kdb_boolean_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbChar\fP (KDB *kdb, Key *key, kdb_char_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbOctet\fP (KDB *kdb, Key *key, kdb_octet_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbShort\fP (KDB *kdb, Key *key, kdb_short_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbUnsignedShort\fP (KDB *kdb, Key *key, kdb_unsigned_short_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbLong\fP (KDB *kdb, Key *key, kdb_long_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbUnsignedLong\fP (KDB *kdb, Key *key, kdb_unsigned_long_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbLongLong\fP (KDB *kdb, Key *key, kdb_long_long_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbUnsignedLongLong\fP (KDB *kdb, Key *key, kdb_unsigned_long_long_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbFloat\fP (KDB *kdb, Key *key, kdb_float_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbDouble\fP (KDB *kdb, Key *key, kdb_double_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterKdbLongDouble\fP (KDB *kdb, Key *key, kdb_long_double_t *variable)"
.br
.RI "Subscribe for automatic updates to a given variable when the given key value is changed\&. "
.in -1c
.SH "Detailed Description"
.PP 
Notification feature\&. 

For an introduction to notifications please see the \fCNotification Tutorial\fP\&.
.PP
Examples:
.PP
.IP "\(bu" 2
\fCBasic notifications using polling\fP
.IP "\(bu" 2
\fCUsing asynchronous I/O bindings\fP
.IP "\(bu" 2
\fCReload KDB when Elektra's configuration has changed\fP
.PP
.PP
\fBGlobal Mounting\fP
.RS 4

.RE
.PP
\fBelektraNotificationOpen()\fP loads and mounts the \fCinternalnotification plugin\fP globally at run-time\&. The key database is not altered permanently\&. \fBelektraNotificationClose()\fP reverts the mounting\&.
.PP
The internalnotification plugin is mounted at its defined positions (see \fCits plugin docs\fP)\&.
.PP
.IP "\(bu" 2
If there is no plugin mounted at a required position the internalnotification plugin is mounted at this position\&.
.IP "\(bu" 2
In the default configuration or when mounting a plugin globally using \fCkdb global-mount\fP the \fClist plugin\fP is mounted at all positions\&. This plugin allows to mount multiple plugins at a position\&. If this plugin is present at a position the internalnotification plugin is added to the list plugin's configuration at run-time\&.
.IP "\(bu" 2
If another plugin is mounted at a desired position the configuration is considered broken and mounting is aborted\&. The list plugin requires to be mounted at all positions in order to keep track of the current position and call plugins accordingly\&.
.PP
.PP
\fBTransport Plugins\fP
.RS 4

.RE
.PP
Notification transport plugins (or simply transport plugins) export 'openNotification' (\fBElektraNotificationOpenNotification()\fP) and optionally 'closeNotification' (\fBElektraNotificationCloseNotification()\fP) functions as part of their contract\&.
.PP
The function 'openNotification' is called during \fBelektraNotificationOpen()\fP\&. At this point an I/O binding is set and it is save to use it\&. If no binding is set despite the plugin requires it, it should log a message and perform no additional operations\&. This ensures that the plugin can be used in applications that do not use I/O bindings or notification features\&.
.PP
\fBElektraNotificationOpenNotification()\fP receives a callback and additional data\&. When a key change notification is received (or a change is detected by other means) this callback shall be called with the changed Key and the additional data\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* ElektraNotificationChangeCallback) (Key *key, void *context)"

.PP
Callback function for key changes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP changed key 
.br
\fIcontext\fP user supplied callback context 
.RE
.PP

.SS "typedef void(* ElektraNotificationConversionErrorCallback) (Key *key, void *context)"

.PP
Callback function called when string to number conversion failed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP key with invalid value 
.br
\fIcontext\fP user supplied callback context 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int elektraNotificationClose (KDB * kdb)"

.PP
Stop the notification system for the given KDB instance\&. May only be called after \fBelektraNotificationOpen()\fP was called for given KDB instance\&.
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP KDB instance 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on error 
.RE
.PP

.SS "int elektraNotificationOpen (KDB * kdb)"

.PP
Initialize the notification system for the given KDB instance\&. Asynchronous receiving of notifications requires an I/O binding\&. Use \fBelektraIoSetBinding()\fP before calling this function\&.
.PP
May only be called once for a KDB instance\&. Subsequent calls return 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP KDB instance 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on error 
.RE
.PP

.SS "int elektraNotificationRegisterCallback (KDB * kdb, Key * key, \fBElektraNotificationChangeCallback\fP callback, void * context)"

.PP
Subscribe for updates via callback when a given key value is changed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIcallback\fP callback function 
.br
\fIcontext\fP user supplied context passed to callback function
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure 
.RE
.PP

.SS "int elektraNotificationRegisterCallbackSameOrBelow (KDB * kdb, Key * key, \fBElektraNotificationChangeCallback\fP callback, void * context)"

.PP
Subscribe for updates via callback when a given key or a key below changed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIcallback\fP callback function 
.br
\fIcontext\fP user supplied context passed to callback function
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure 
.RE
.PP

.SS "int elektraNotificationRegisterDouble (KDB * kdb, Key * key, double * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterFloat (KDB * kdb, Key * key, float * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterInt (KDB * kdb, Key * key, int * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failureSubscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbBoolean (KDB * kdb, Key * key, kdb_boolean_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbChar (KDB * kdb, Key * key, kdb_char_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbDouble (KDB * kdb, Key * key, kdb_double_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbFloat (KDB * kdb, Key * key, kdb_float_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbLong (KDB * kdb, Key * key, kdb_long_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbLongDouble (KDB * kdb, Key * key, kdb_long_double_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbLongLong (KDB * kdb, Key * key, kdb_long_long_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbOctet (KDB * kdb, Key * key, kdb_octet_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbShort (KDB * kdb, Key * key, kdb_short_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbUnsignedLong (KDB * kdb, Key * key, kdb_unsigned_long_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbUnsignedLongLong (KDB * kdb, Key * key, kdb_unsigned_long_long_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterKdbUnsignedShort (KDB * kdb, Key * key, kdb_unsigned_short_t * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterLong (KDB * kdb, Key * key, long * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterLongLong (KDB * kdb, Key * key, long long * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterUnsignedInt (KDB * kdb, Key * key, unsigned int * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterUnsignedLong (KDB * kdb, Key * key, unsigned long * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SS "int elektraNotificationRegisterUnsignedLongLong (KDB * kdb, Key * key, unsigned long long * variable)"

.PP
Subscribe for automatic updates to a given variable when the given key value is changed\&. On kdbGet iff the key is present and its content is valid, the registered variable is updated\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
