.TH "md_src_plugins_resolver_README" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_resolver_README \- Plugin: resolver 

.IP "\(bu" 2
infos = All information you want to know is in keys below
.IP "\(bu" 2
infos/author = Markus Raab elektra@markus-raab.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = resolver
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/placements = rollback getresolver setresolver commit
.IP "\(bu" 2
infos/status = productive maintained specific unittest tested libc nodep configurable
.IP "\(bu" 2
infos/description = system independent resolver
.PP
.PP
The @ handles operating system dependent tasks\&. One task is the resolving of the filenames for user and system (hence its name)\&.
.PP
Use following command to see to which file is resolved to: 
.PP
.nf
kdb file <Elektra path you are interested in>

.fi
.PP
.PP
See the constants of this plugin for further information, they are: 
.PP
.nf
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/ELEKTRA_VARIANT_SYSTEM
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/ELEKTRA_VARIANT_USER
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/KDB_DB_HOME
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/KDB_DB_SYSTEM
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/KDB_DB_USER
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/KDB_DB_SPEC
system/elektra/modules/@PLUGIN_SHORT_NAME@/constants/KDB_DB_DIR

.fi
.PP
.PP
The build-in resolving considers following cases:
.PP
.IP "\(bu" 2
for spec with absolute path: path
.IP "\(bu" 2
for spec with relative path: KDB_DB_SPEC + path
.IP "\(bu" 2
for dir with absolute path: \fCpwd\fP + path (or above when path is found)
.IP "\(bu" 2
for dir with relative path: \fCpwd\fP + KDB_DB_DIR + path (or above when path is found)
.IP "\(bu" 2
for user with absolute path: ~ + path
.IP "\(bu" 2
for user with relative path: ~ + KDB_DB_USER + path
.IP "\(bu" 2
for system with absolute path: path
.IP "\(bu" 2
for system with relative path: KDB_DB_SYSTEM + path
.PP
.PP
(~ and \fCpwd\fP are resolved from system)
.PP
.SS "Example"
.PP
For an absolute path /example\&.ini, you might get following values:
.PP
.IP "\(bu" 2
for spec: /example\&.ini
.IP "\(bu" 2
for dir: \fCpwd\fP/example\&.ini
.IP "\(bu" 2
for user: ~/example\&.ini
.IP "\(bu" 2
for system: /example\&.ini
.PP
.PP
For an relative path example\&.ini, you might get following values:
.PP
.IP "\(bu" 2
for spec: /usr/share/elektra/specification/example\&.ini
.IP "\(bu" 2
for dir: \fCpwd\fP/\&.dir/example\&.ini
.IP "\(bu" 2
for user: ~/\&.config/example\&.ini
.IP "\(bu" 2
for system: /etc/kdb/example\&.ini
.PP
.PP
See \fBthe mount tutorial\fP for more examples\&.
.PP
.SS "Variants"
.PP
Many variants exist that additionally influence the resolving process, typically by using environment variables\&.
.PP
Environment variables are very simple for one-time usage but their maintenance in start-up scripts is problematic\&. Additionally, they are controlled by the user, so they cannot be trusted\&. So it is not recommended to use environment variables\&.
.PP
Note that the file permissions apply, so it might be possible for non-root to modify keys in \fCsystem\fP\&.
.PP
See \fBCOMPILE\&.md\fP for a documentation of possible variants\&.
.PP
.SS "XDG Compatibility"
.PP
The resolver is fully \fCXDG compatible\fP if configured with the variant:
.PP
.IP "\(bu" 2
xp, xh or xu for user (either using passwd, HOME or USER as fallback or any combination of these fallbacks)
.IP "\(bu" 2
x for system, no fallback necessary
.PP
.PP
Additionally \fCKDB_DB_USER\fP needs to be left unchanged as \fC\&.config\fP\&.
.PP
\fCXDG_CONFIG_DIRS\fP will be used to resolve system paths the following way:
.PP
.IP "\(bu" 2
if unset or empty \fC/etc/xdg\fP will be used instead
.IP "\(bu" 2
all elements are searched in order of importance
.IP "  \(bu" 4
if a file was found, the search process is stopped
.IP "  \(bu" 4
if no file was found, the least important element will be used for potential write attempts\&.
.PP

.PP
.PP
.SS "Reading Configuration"
.PP
.IP "1." 4
If no update needed (unchanged modification time): quit successfully
.IP "2." 4
Otherwise call (storage) plugin(s) to read configuration
.IP "3." 4
remember the last stat time (last update)
.PP
.PP
.SS "Writing Configuration"
.PP
0\&. On unchanged configuration: quit successfully
.IP "1." 4
On empty configuration: remove the configuration file and quit successfully
.IP "2." 4
Otherwise, open the configuration file If not available recursively create directories and retry\&. #ifdef ELEKTRA_LOCK_MUTEX
.IP "3." 4
Try to lock a global mutex, if not possible -> conflict #endif #ifdef ELEKTRA_LOCK_FILE
.IP "4." 4
Try to lock the configuration file, if not possible -> conflict #endif
.IP "5." 4
Check the update time -> might lead to conflict
.IP "6." 4
Update the update time (in order to not self-conflict)
.PP
.PP
We have an optimistic approach\&. Locking is only used to detect concurrent cooperative processes in the short moment between prepare and commit\&. A conflict will be raised in that situation\&. When processes do not lock the file it might be overwritten\&. This is, however, very unlikely on file systems with nanosecond precision\&. 
