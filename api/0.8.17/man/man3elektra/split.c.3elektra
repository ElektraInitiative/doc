.TH "split.c" 3elektra "Tue Jun 14 2016" "Version 0.8.17" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
split.c \- 
.PP
Interna of splitting functionality\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <kdberrors\&.h>\fP
.br
\fC#include <kdbinternal\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "Split * \fBelektraSplitNew\fP (void)"
.br
.RI "\fIAllocates a new split object\&. \fP"
.ti -1c
.RI "void \fBelektraSplitDel\fP (Split *keysets)"
.br
.RI "\fIDelete a split object\&. \fP"
.ti -1c
.RI "void \fBelektraSplitRemove\fP (Split *split, size_t where)"
.br
.RI "\fIRemove one part of split\&. \fP"
.ti -1c
.RI "void \fBelektraSplitResize\fP (Split *split)"
.br
.RI "\fIDoubles the size of how many parts of keysets can be appended\&. \fP"
.ti -1c
.RI "ssize_t \fBelektraSplitAppend\fP (Split *split, Backend *backend, Key *parentKey, int syncbits)"
.br
.RI "\fIIncreases the size of split and appends a new empty keyset\&. \fP"
.ti -1c
.RI "ssize_t \fBelektraSplitSearchBackend\fP (Split *split, Backend *backend, Key *parent)"
.br
.RI "\fIDetermines if the backend is already inserted or not\&. \fP"
.ti -1c
.RI "int \fBelektraSplitSearchRoot\fP (Split *split, Key *parentKey)"
.br
.ti -1c
.RI "int \fBelektraSplitBuildup\fP (Split *split, KDB *kdb, Key *parentKey)"
.br
.RI "\fIWalks through kdb->split and adds all backends below parentKey to split\&. \fP"
.ti -1c
.RI "int \fBelektraSplitDivide\fP (Split *split, KDB *handle, KeySet *ks)"
.br
.RI "\fISplits up the keysets and search for a sync bit in every key\&. \fP"
.ti -1c
.RI "void \fBelektraSplitUpdateFileName\fP (Split *split, KDB *handle, Key *key)"
.br
.RI "\fIUpdate the (configuration) file name for the parent key\&. \fP"
.ti -1c
.RI "int \fBelektraSplitAppoint\fP (Split *split, KDB *handle, KeySet *ks)"
.br
.RI "\fIAppoints all keys from ks to yet unsynced splits\&. \fP"
.ti -1c
.RI "int \fBelektraSplitGet\fP (Split *split, Key *warningKey, KDB *handle)"
.br
.RI "\fIDoes some work after getting of backends is finished\&. \fP"
.ti -1c
.RI "int \fBelektraSplitCheckSize\fP (Split *split)"
.br
.RI "\fICheck if any of the split is uninitialized\&. \fP"
.ti -1c
.RI "int \fBelektraSplitUpdateSize\fP (Split *split)"
.br
.RI "\fIAlso update sizes after \fBkdbSet()\fP to recognize multiple \fBkdbSet()\fP attempts\&. \fP"
.ti -1c
.RI "int \fBelektraSplitMerge\fP (Split *split, KeySet *dest)"
.br
.RI "\fIMerges together all parts of split into dest\&. \fP"
.ti -1c
.RI "int \fBelektraSplitSync\fP (Split *split)"
.br
.RI "\fIAdd sync bits everywhere keys were removed/added\&. \fP"
.ti -1c
.RI "void \fBelektraSplitPrepare\fP (Split *split)"
.br
.RI "\fIPrepares for \fBkdbSet()\fP mainloop afterwards\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interna of splitting functionality\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/COPYING or http://www.libelektra.org) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "ssize_t elektraSplitAppend (Split *split, Backend *backend, Key *parentKey, intsyncbits)"

.PP
Increases the size of split and appends a new empty keyset\&. Initializes the element with the given parameters at size-1 to be used\&.
.PP
Will automatically resize split if needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIbackend\fP the backend which should be appended 
.br
\fIparentKey\fP the parentKey which should be appended 
.br
\fIsyncbits\fP the initial syncstate which should be appended
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if no split is found 
.RE
.PP
\fBReturns:\fP
.RS 4
the position of the new element: size-1 
.RE
.PP

.SS "int elektraSplitAppoint (Split *split, KDB *handle, KeySet *ks)"

.PP
Appoints all keys from ks to yet unsynced splits\&. 
.PP
\fBPrecondition:\fP
.RS 4
\fBelektraSplitBuildup()\fP need to be executed before\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIhandle\fP to determine to which backend a key belongs 
.br
\fIks\fP the keyset to appoint to split
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI-1\fP if no backend was found for a key 
.RE
.PP

.SS "int elektraSplitBuildup (Split *split, KDB *kdb, Key *parentKey)"

.PP
Walks through kdb->split and adds all backends below parentKey to split\&. Sets syncbits to 2 if it is a default or root backend (which needs splitting)\&. The information is copied from kdb->split\&.
.PP
\fBPrecondition:\fP
.RS 4
split needs to be empty, directly after creation with \fBelektraSplitNew()\fP\&.
.PP
there needs to be a valid defaultBackend but its ok not to have a trie inside KDB\&.
.PP
parentKey must be a valid key! (could be implemented more generally, but that would require splitting up of keysets of the same backend)
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP will get all backends appended 
.br
\fIkdb\fP the handle to get information about backends 
.br
\fIparentKey\fP the information below which key the backends are from interest
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP always 
.RE
.PP

.SS "int elektraSplitCheckSize (Split *split)"

.PP
Check if any of the split is uninitialized\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if size is wrong 
.br
\fI1\fP if everything is ok 
.RE
.PP

.SS "void elektraSplitDel (Split *keysets)"

.PP
Delete a split object\&. Will free all allocated resources of a split keyset\&.
.PP
\fBParameters:\fP
.RS 4
\fIkeysets\fP the split object to work with 
.RE
.PP

.SS "int elektraSplitDivide (Split *split, KDB *handle, KeySet *ks)"

.PP
Splits up the keysets and search for a sync bit in every key\&. It does not check if there were removed keys, see \fBelektraSplitSync()\fP for the next step\&.
.PP
It does not create new backends, this has to be done by buildup before\&.
.PP
\fBPrecondition:\fP
.RS 4
\fBelektraSplitBuildup()\fP need to be executed before\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIhandle\fP to get information where the individual keys belong 
.br
\fIks\fP the keyset to divide
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if there were no sync bits 
.br
\fI1\fP if there were sync bits 
.br
\fI-1\fP if no backend was found for any key 
.RE
.PP

.SS "int elektraSplitGet (Split *split, Key *warningKey, KDB *handle)"

.PP
Does some work after getting of backends is finished\&. 
.IP "\(bu" 2
Update sizes
.IP "\(bu" 2
Removal of wrong keys
.PP
.PP
\fBPrecondition:\fP
.RS 4
\fBelektraSplitAppoint()\fP needs to be executed before\&.
.RE
.PP
.IP "\(bu" 2
check if keys are in correct backend
.IP "\(bu" 2
remove syncbits
.IP "\(bu" 2
update sizes in the backends
.PP
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIwarningKey\fP postcondition violations are reported here 
.br
\fIhandle\fP the handle to preprocess the keys 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI-1\fP if no backend was found for a key or split->parents has invalid namespace 
.RE
.PP

.SS "int elektraSplitMerge (Split *split, KeySet *dest)"

.PP
Merges together all parts of split into dest\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIdest\fP the destination keyset where all keysets are appended\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.RE
.PP

.SS "Split* elektraSplitNew (void)"

.PP
Allocates a new split object\&. Splits up a keyset into multiple keysets where each of them will passed to the correct \fBkdbSet()\fP\&.
.PP
Initially the size is 0 and alloc is APPROXIMATE_NR_OF_BACKENDS\&.
.PP
\fBReturns:\fP
.RS 4
a fresh allocated split object
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraSplitDel()\fP 
.RE
.PP

.SS "void elektraSplitPrepare (Split *split)"

.PP
Prepares for \fBkdbSet()\fP mainloop afterwards\&. All splits which do not need sync are removed and a deep copy of the remaining keysets is done\&.
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.RE
.PP

.SS "void elektraSplitRemove (Split *split, size_twhere)"

.PP
Remove one part of split\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIwhere\fP the position to cut away
.RE
.PP
\fBPrecondition:\fP
.RS 4
where must be within the size of the split 
.RE
.PP
\fBPostcondition:\fP
.RS 4
split will be removed 
.RE
.PP

.SS "void elektraSplitResize (Split *split)"

.PP
Doubles the size of how many parts of keysets can be appended\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.RE
.PP

.SS "ssize_t elektraSplitSearchBackend (Split *split, Backend *backend, Key *parent)"

.PP
Determines if the backend is already inserted or not\&. 
.PP
\fBWarning:\fP
.RS 4
If no parent Key is given, the default/root backends won't be searched\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIbackend\fP the backend to search for 
.br
\fIparent\fP the key to check for domains in default/root backends\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
pos of backend if it already exist 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if it does not exist 
.RE
.PP

.SS "int elektraSplitSearchRoot (Split *split, Key *parentKey)"

.PP
\fBReturn values:\fP
.RS 4
\fI1\fP if one of the backends in split has all keys below parentKey 
.br
\fI0\fP if parentKey == 0 or there are keys below or same than parentKey which do not fit in any of split keysets 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIparentKey\fP the key which relation is searched for 
.RE
.PP

.SS "int elektraSplitSync (Split *split)"

.PP
Add sync bits everywhere keys were removed/added\&. 
.IP "\(bu" 2
checks if the size of a previous \fBkdbGet()\fP is unchanged\&.
.IP "\(bu" 2
checks if in correct state (\fBkdbGet()\fP needs to be executed before)
.PP
.PP
Only \fBelektraSplitDivide()\fP together with this function can really decide if sync is needed or not\&.
.PP
\fBPrecondition:\fP
.RS 4
split needs to be processed with \fBelektraSplitDivide()\fP before\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if \fBkdbSet()\fP is not needed 
.br
\fI1\fP if \fBkdbSet()\fP is needed 
.br
\fI-1\fP on wrong keys (also has assert, should not happen) 
.br
\fI-2\fP wrong spec state: \fBkdbGet()\fP was not executed before 
.br
\fI-3\fP wrong dir state: \fBkdbGet()\fP was not executed before 
.br
\fI-4\fP wrong user state: \fBkdbGet()\fP was not executed before 
.br
\fI-5\fP wrong system state: \fBkdbGet()\fP was not executed before 
.RE
.PP
\fBPrecondition:\fP
.RS 4
user/system was split before\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.RE
.PP

.SS "void elektraSplitUpdateFileName (Split *split, KDB *handle, Key *key)"

.PP
Update the (configuration) file name for the parent key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split to work with 
.br
\fIhandle\fP the handle to work with 
.br
\fIkey\fP the parentKey that should be updated (name must be correct) 
.RE
.PP

.SS "int elektraSplitUpdateSize (Split *split)"

.PP
Also update sizes after \fBkdbSet()\fP to recognize multiple \fBkdbSet()\fP attempts\&. 
.PP
\fBWarning:\fP
.RS 4
cant use the same code with elektraSplitGet because there is no default split part for \fBkdbSet()\fP\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
