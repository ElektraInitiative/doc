.TH "meta.c" 3elektra "Tue Nov 26 2019" "Version 0.9.1" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
meta.c \- Methods for metadata manipulation\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <kdb\&.h>\fP
.br
\fC#include <kdbconfig\&.h>\fP
.br
\fC#include <kdbease\&.h>\fP
.br
\fC#include <kdbmeta\&.h>\fP
.br
\fC#include <kdbprivate\&.h>\fP
.br
\fC#include <kdbproposal\&.h>\fP
.br
\fC#include <kdbtypes\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBkeyComment\fP (const Key *key)"
.br
.RI "Return a pointer to the real internal \fCkey\fP comment\&. "
.ti -1c
.RI "ssize_t \fBkeyGetCommentSize\fP (const Key *key)"
.br
.RI "Calculates number of bytes needed to store a key comment, including final NULL\&. "
.ti -1c
.RI "ssize_t \fBkeyGetComment\fP (const Key *key, char *returnedComment, size_t maxSize)"
.br
.RI "Get the key comment\&. "
.ti -1c
.RI "ssize_t \fBkeySetComment\fP (Key *key, const char *newComment)"
.br
.RI "Set a comment for a key\&. "
.ti -1c
.RI "uid_t \fBkeyGetUID\fP (const Key *key)"
.br
.RI "Get the user ID of a key\&. "
.ti -1c
.RI "int \fBkeySetUID\fP (Key *key, uid_t uid)"
.br
.RI "Set the user ID of a key\&. "
.ti -1c
.RI "gid_t \fBkeyGetGID\fP (const Key *key)"
.br
.RI "Get the group ID of a key\&. "
.ti -1c
.RI "int \fBkeySetGID\fP (Key *key, gid_t gid)"
.br
.RI "Set the group ID of a key\&. "
.ti -1c
.RI "int \fBkeySetDir\fP (Key *key)"
.br
.RI "Set mode so that key will be recognized as directory\&. "
.ti -1c
.RI "mode_t \fBkeyGetMode\fP (const Key *key)"
.br
.RI "Return the key mode permissions\&. "
.ti -1c
.RI "int \fBkeySetMode\fP (Key *key, mode_t mode)"
.br
.RI "Set the key mode permissions\&. "
.ti -1c
.RI "time_t \fBkeyGetATime\fP (const Key *key)"
.br
.RI "Get last time the key data was read from disk\&. "
.ti -1c
.RI "int \fBkeySetATime\fP (Key *key, time_t atime)"
.br
.RI "Update the atime information for a key\&. "
.ti -1c
.RI "time_t \fBkeyGetMTime\fP (const Key *key)"
.br
.RI "Get last modification time of the key on disk\&. "
.ti -1c
.RI "int \fBkeySetMTime\fP (Key *key, time_t mtime)"
.br
.RI "Update the mtime information for a key\&. "
.ti -1c
.RI "time_t \fBkeyGetCTime\fP (const Key *key)"
.br
.RI "Get last time the key metadata was changed from disk\&. "
.ti -1c
.RI "int \fBkeySetCTime\fP (Key *key, time_t ctime)"
.br
.RI "Update the ctime information for a key\&. "
.ti -1c
.RI "int \fBelektraKeyCmpOrder\fP (const Key *ka, const Key *kb)"
.br
.RI "Compare the order metadata of two keys\&. "
.ti -1c
.RI "void \fBelektraMetaArrayAdd\fP (Key *key, const char *metaName, const char *value)"
.br
.RI "creates an metadata array or appends another element to an existing metadata array e\&.g\&. "
.ti -1c
.RI "KeySet * \fBelektraMetaArrayToKS\fP (const Key *key, const char *metaName)"
.br
.RI "Create a \fCKeySet\fP from a metakey array\&. "
.ti -1c
.RI "int \fBelektraSortTopology\fP (KeySet *ks, Key **array)"
.br
.RI "topological sorting "
.ti -1c
.RI "char * \fBelektraMetaArrayToString\fP (const Key *key, const char *metaName, const char *delim)"
.br
.RI "returns the metakey array as a string separated by delim "
.in -1c
.SH "Detailed Description"
.PP 
Methods for metadata manipulation\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see LICENSE\&.md or https://www.libelektra.org) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
