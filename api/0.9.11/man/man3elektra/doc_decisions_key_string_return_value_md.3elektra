.TH "doc_decisions_key_string_return_value_md" 3elektra "Wed Oct 5 2022" "Version 0.9.11" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_key_string_return_value_md \- \fBkeyString()\fP return value 
 
.SH "Problem"
.PP
When using \fBkeyString()\fP on empty / binary values the return values are the literal strings (null) / (binary)\&. This seems very awkward and unintuitive from a user's perspective\&.
.SH "Constraints"
.PP
Because the return value of the function is const char*, there are not so many possibilities for a change to this behavior, as every possible return value - except for a NULL pointer - could just be the value of the string of the Key\&. Possible changes to this behavior would be:
.SH "Assumptions"
.PP
On one hand always returning a string allows things like \fCstrlen(keyString(k)) == 0\fP to check for an empty string\&. But at the same time people might expect that \fCstrlen(keyString(k)) < MAX_LEN\fP also works, but this might silently break code down the line, if \fCk\fP is binary and \fCstrlen('(binary)') < MAX_LEN\fP\&.
.SH "Considered Alternatives"
.PP
An alternative would be to always store a zero byte after all key values, even if they are binary (might be done already)\&. Then we can safely return \fCk->data\&.c == NULL ? '' : k->data\&.c\fP\&. It may contain incomplete data and the \fCMAX_LEN\fP problem from above still applies, but there are no segfaults and you don't get return values that have nothing to do with the actual data\&.
.SH "Decision"
.PP
.IP "\(bu" 2
\fCkey == NULL\fP return 0, error code via second channel
.IP "\(bu" 2
\fCkey->value == NULL\fP return 0, error code via second channel
.IP "\(bu" 2
\fCkey == <binary>\fP return 0, error code via second channel
.IP "\(bu" 2
everything else as is
.PP
.SH "Rationale"
.PP
.IP "\(bu" 2
0 seems like the most intuitive value to return in case of an error, although this introduces the possibility of segfaults for users of the library\&. printf doesn't cause segfaults anymore, which improves this problem a lot\&.
.IP "\(bu" 2
With the introduction of a second channel for reporting errors, users can check the error messages in case of segfaults - which alleviates this issue\&. The first thing in case of an error should be checking the error message\&.
.PP
.SH "Implications"
.PP
.SH "Related Decisions"
.PP
.SH "Notes"
.PP

