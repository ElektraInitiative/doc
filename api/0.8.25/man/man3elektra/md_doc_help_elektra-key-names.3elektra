.TH "md_doc_help_elektra-key-names" 3elektra "Sun Nov 18 2018" "Version 0.8.25" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_doc_help_elektra-key-nameselektra-key-names(7) -- the names of keys 
 \- Every \fCKey\fP object with the same name will receive the very same information from the global key database\&. The name locates a \fBunique key\fP in the key database\&. Key names are always absolute; so no parent or other information is needed\&. That makes a \fCKey\fP self-contained and independent both in memory and storage\&.
.PP
Every key name starts with a \fBnamespace\fP, for example \fCuser\fP or \fCsystem\fP\&. These prefixes spawn key hierarchies each\&.
.PP
The shared \fIsystem configuration\fP is identical for every user\&. It contains, for example, information about system daemons, network related preferences and default settings for software\&. These keys are created when software is installed, and removed when software is purged\&. Only the administrator can change system configuration\&.
.PP
Examples of valid system key names: 
.PP
.nf
    system
    system/hosts/hostname
    system/sw/apache/httpd/#0/current/num_processes
    system/sw/apps/abc/#0/current/default-setting

.fi
.PP
.PP
user configuration is empty until the user changes some preferences\&. User configuration affects only a single user\&. The user's settings can contain information about the user's environment, preferred applications and anything not useful for the rest of the system\&.
.PP
Examples of valid user key names: 
.PP
.nf
    user
    user/env/#1/LD_LIBRARY_PATH
    user/sw/apps/abc/#0/current/default-setting
    user/sw/kde/kicker/#0/current/preferred_applications/#0

.fi
.PP
.PP
The slash (\fC/\fP) separates key names and structures them hierarchically\&. If two keys start with the same key names, but one key name continues after a slash, this key is \fBbelow\fP the other and is called a \fIsubkey\fP\&. For example \fCuser/sw/apps/abc/current\fP is a subkey of the key \fCuser/sw/apps\fP\&. The key is not directly below but, for example, \fCuser/sw/apps/abc\fP is\&. \fC\fBkeyRel()\fP\fP implements a way to decide the relation between two keys\&.
.PP
For computers Elektra would work without any conventions, because it is possible to rename keys with plugins and link and transform any key-value to any other key-value\&. Obviously, for humans such chaos would be confusing and harder to use, thus we encourage everyone to use the following conventions:
.PP
.SS "Arrays"
.PP
If you want to denote an array, i\&.e\&. many unnamed subkeys, use the syntax \fC#0\fP, \&.\&.\&., \fC#_10\fP\&. Then simple string comparisons will yield correct results and the names are still very compact\&.
.PP
.SS "Application Base Name"
.PP
As decided \fChere\fP, the key names of software-applications should always start with: 
.PP
.nf
    /sw/org/myapp/#0/current/name/full

.fi
.PP
.PP
.IP "\(bu" 2
\fCsw\fP is for software, \fChw\fP for hardware, \fCelektra\fP for internals
.IP "\(bu" 2
\fCorg\fP is a URL/organization name to avoid name clashes with other application names\&. Use only one part of the URL/organization, so e\&.g\&. \fCkde\fP is enough\&.
.IP "\(bu" 2
\fCmyapp\fP is the name of the most specific component that has its own configuration
.IP "\(bu" 2
\fC#0\fP is the major version number of the configuration (to be incremented if you need to introduce incompatible changes)\&. (Rationale: it is possible to start the old version of the app, using \fC/sw/org/myapp/#X\fP, where \fCX\fP refers to the previous version number\&.)
.IP "\(bu" 2
\fCcurrent\fP is the profile to be used\&. This is needed by administrators if they want to start up multiple applications with different configurations\&.
.PP
.PP
.SS "Further Recommendations"
.PP
.IP "\(bu" 2
Avoid to have your applications root right under \fCsystem\fP or \fCuser\fP\&. (rationale: it would make the hierarchy too flat\&.) See \fBApplication Base Name\fP above\&.
.IP "\(bu" 2
Avoid the usage of characters other than \fC/\fP, a-z and 0-9\&. (rationale: it would allow too many similar, confusing names\&.) (exceptions: if the user or a technology, decide about parts of the key name, this restriction does not apply, e\&.g\&. if the wlan essid is used as part of the key name)
.IP "\(bu" 2
The only way to separate names is using \fC/\fP (no A-Z, no \fC_\fP, no whitespaces) (rationale: there are many different opinions about this topic and having a choice which separator to choose will certainly lead to inconsistencies)
.IP "\(bu" 2
It is suggested to make your application look for default keys under \fC/sw/org/myapp/#/%/\fP where \fC#\fP is a major version number, e\&.g\&. \fC#3\fP for the 4th version and \fC%\fP is a profile (\fC%\fP for default profile)\&. This way, from a sysadmin perspective, it will be possible to copy the \fCsystem/sw/myapp/#3/%/\fP tree to something like \fCsystem/sw/myapp/#3/old/\fP and keep system clean and organized\&.
.PP
.PP
.SS "SEE ALSO"
.PP
.IP "\(bu" 2
\fBsee application integration tutorial\fP
.IP "\(bu" 2
\fBsee namespaces tutorial\fP
.IP "\(bu" 2
\fCkey name source file\fP or \fCits rendered API documentation\fP
.IP "\(bu" 2
\fBelektra-namespaces(7)\fP
.IP "\(bu" 2
\fBelektra-cascading(7)\fP 
.PP

