.TH "md_src_libs_README" 3elektra "Sun Nov 18 2018" "Version 0.8.25" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_libs_READMEelektra-libs(7) -- libs overview 
 \- Since version \fB\fB0\&.8\&.15\fP\fP \fB\fBlibelektra\fP\fP is split into following libraries:
.PP
Overview of Libraries 
.SS "Loader"
.PP
\fB\fBloader\fP\fP contains source files that implement the plugin loader functionality\&. The files are linked to \fB\fBlibelektra\fP\fP\&.
.PP
.SS "Libease"
.PP
.PP
.nf
libelektra-ease.so
.fi
.PP
.PP
\fB\fBlibease\fP\fP contains data-structure operations on top of libcore which do not depend on internals\&. Applications and plugins can choose to not link against it if they want to stay minimal\&. Its main goal is to make programming with Elektra easier if some extra kB are not an issue\&.
.PP
.SS "Libplugin"
.PP
.PP
.nf
libelektra-plugin.so
.fi
.PP
.PP
\fB\fBlibplugin\fP\fP contains \fCelektraPlugin*\fP symbols and plugins should link against it\&.
.PP
.SS "Libpluginprocess"
.PP
.PP
.nf
libelektra-pluginprocess.so
.fi
.PP
.PP
\fB\fBlibpluginprocess\fP\fP contains functions aiding in executing plugins in a separate process and communicating with those child processes\&. This child process is forked from Elektra's main process each time such plugin is used and gets closed again afterwards\&. It uses a simple communication protocol based on a KeySet that gets serialized through a pipe via the dump plugin to orchestrate the processes\&.
.PP
This is useful for plugins which cause memory leaks to be isolated in an own process\&. Furthermore this is useful for runtimes or libraries that cannot be reinitialized in the same process after they have been used\&.
.PP
.SS "Libproposal"
.PP
.PP
.nf
libelektra-proposal.so
.fi
.PP
.PP
\fB\fBlibproposal\fP\fP contains functions that are proposed for libcore\&. Depends on internas of libcore and as such must always fit to the exact same version\&.
.PP
.SS "Libmeta"
.PP
.PP
.nf
libelektra-meta.so
.fi
.PP
.PP
\fB\fClibmeta\fP\fP contains metadata operations as described in \fB\fCMETADATA\&.ini\fP\fP\&. Will be code-generated in the future, so methods should be mechanical reflections of the contents in \fB\fCMETADATA\&.ini\fP\fP\&.
.PP
.SS "Libcore"
.PP
.PP
.nf
libelektra-core.so
<kdbhelper.h>
<kdb.h> (key* and ks*)
.fi
.PP
.PP
Contains the fundamental data-structures every participant of Elektra needs to link against\&. It should be the only part that access the internal data structures\&.
.PP
.SS "Libtools"
.PP
\fB\fBlibtools\fP\fP is a high-level C++ shared-code for tools\&. It includes:
.PP
.IP "\(bu" 2
plugin interface
.IP "\(bu" 2
backend interface
.IP "\(bu" 2
3-way merge
.PP
.PP
.SS "Utility"
.PP
\fB\fBlibutility\fP\fP provides utility functions to be used in plugins\&.
.PP
.SS "Libinvoke"
.PP
.PP
.nf
libelektra-invoke.so
.fi
.PP
.PP
\fB\fBlibinvoke\fP\fP provides a simple API allowing us to call functions exported by plugins\&.
.PP
.SS "IO"
.PP
.PP
.nf
libelektra-io.so
.fi
.PP
.PP
\fB\fBio\fP\fP provides the \fCcommon API\fP for using asynchronous I/O bindings\&.
.PP
.SS "Notification"
.PP
.PP
.nf
libelektra-notification.so
.fi
.PP
.PP
\fB\fBnotification\fP\fP provides the \fCnotification API\fP\&. Usage examples:
.PP
.IP "\(bu" 2
\fCBasic notifications using polling\fP
.IP "\(bu" 2
\fCUsing asynchronous I/O bindings\fP
.IP "\(bu" 2
\fCReload KDB when Elektra's configuration has changed\fP
.PP
.PP
.SS "Globbing"
.PP
.PP
.nf
libelektra-globbing.so
.fi
.PP
.PP
\fB\fBglobbing\fP\fP provides globbing functionality for Elektra\&.
.PP
The supported syntax is a superset of the syntax used by \fCglob(7)\fP\&. The following extensions are supported:
.PP
.IP "\(bu" 2
\fC#\fP, when used as \fC/#/\fP (or \fC/#"\fP at the end of the pattern), matches a valid array item
.IP "\(bu" 2
\fC_\fP is the exact opposite; it matches anything but a valid array item
.IP "\(bu" 2
if the pattern ends with \fC/__\fP, matching key names may contain arbitrary suffixes
.PP
.PP
For more info take a look a the documentation of \fC\fBelektraKeyGlob()\fP\fP and \fC\fBelektraKsGlob()\fP\fP\&. 
