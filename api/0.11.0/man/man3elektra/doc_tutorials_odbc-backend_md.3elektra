.TH "doc_tutorials_odbc-backend_md" 3elektra "Fri Aug 4 2023" "Version 0.11.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_odbc-backend_md \- The Elektra ODBC Backend 
 This tutorial describes how to set up unixODBC on Linux and use Elektra to retrieve configuration data from an \fISQLite\fP or \fIPostgreSQL\fP database\&.
.PP
.RS 4
Currently, the \fIbackend_odbc\fP plugin is marked as EXPERIMENTAL and only data sources that define a table for \fImetadata\fP are supported\&. In the future, we plan to also support data sources without metadata tables\&.
.PP
Please be aware that for using metadata, \fIouter joins\fP have to be supported by the ODBC driver\&. 
.RE
.PP
.RS 4
The ODBC backend plugin was tested with unixODBC, but should also work with iODBC and Microsoft ODBC (on Windows)\&. If you are using such an environment, feel free to share you experiences at https://issues.libelektra.org or extend this tutorial\&. 
.RE
.PP
.RS 4
This tutorial uses SQLite- and PostgreSQL databases as data sources, but ODBC drivers for other data sources are also supported\&. 
.RE
.PP
.SH "Overview"
.PP
The tutorial covers the following steps:
.PP
.IP "1." 4
Introduction
.IP "2." 4
Setting up the Databases for Configuration Data
.IP "3." 4
Installing unixODBC
.IP "4." 4
Installing the SQLite and PostgreSQL ODBC Drivers
.IP "5." 4
Creating the ODBC data sources for the Databases
.IP "6." 4
Compiling Elektra with support for the ODBC Backend
.IP "7." 4
Mounting the data sources into the global Key Database (KDB) of Elektra
.PP
.SH "1\&. Introduction"
.PP
.SS "Database scheme"
The basic database scheme is quite simple\&. You just need a table that contains two columns which can store a text value\&. Usually, the SQL data types \fCTEXT\fP, \fCCHAR\fP and \fCVARCHAR\fP are used for that purpose\&. They must contain valid UTF-8 sequences\&. One column is used for storing the \fBnames\fP of the keys, the other one for storing their \fBvalues\fP\&. The column where the key-names are stored should be defined as the \fIprimary key\fP (PK) for that table\&.
.PP
Next, we have to create a table for storing metadata\&. The table for the metadata needs at least three columns:
.PP
.IP "\(bu" 2
A column with the \fIkey-name\fP which should be defined as a \fIforeign key\fP (FK) to the PK of the table where the keys are stored\&.
.IP "\(bu" 2
A column for the \fIname\fP of the metakeys\&.
.IP "\(bu" 2
A column for the \fIvalue\fP of the metakeys\&.
.PP
.PP
.RS 4
The column for the \fBkey-name\fP and the column for the \fBmetakey-name\fP together should form the PK of that table\&. 
.RE
.PP
Again, all these columns must be defined to store an UTF-8 compatible text\&. It is allowed that the tables contain more columns, these additional columns are not processed by Elektra, \fImust not\fP be part of a PK and \fImust\fP support NULL- or DEFAULT-values (if you want to add new keys via Elektra)\&.
.PP
The following ER-diagram shows the described scheme:
.PP
ER-diagramER-diagramER-diagramER-diagram
.SH "2\&. Setting up the Databases for Configuration Data"
.PP
Before we are getting started with setting up unixODBC, we create the databases and store some configuration data in them\&.
.PP
.RS 4
This tutorial is neither an introduction to SQL nor to SQLite or PostgreSQL\&. If you need more information about these topics, there are plenty of resources available\&.
.PP
For downloads and documentation, please visit the respective websites:
.PP
.IP "\(bu" 2
https://www.sqlite.org
.IP "\(bu" 2
https://www.postgresql.org
.PP
.PP
Usually, both database management systems (DBMS) can be installed by the package manager of your operating system\&. 
.RE
.PP
.RS 4
A pre-configured example SQLite database and the SQL-script that was used to create the tables and fill them with some test data is available at \fB/src/plugins/backend_odbc/sampleDb\fP\&. 
.RE
.PP
.SS "Preparing the SQLite Database"
As SQLite as a file-based DBMS, we first create a file for the new database\&. Afterward, we execute the SQL statements to create the tables and insert some tuples\&. Please note that the command \fCsqlite3\fP may be named differently on your system, especially if you use another version of SQLite\&.
.PP
.PP
.nf
sqlite3 ~/elektraOdbc\&.db
.fi
.PP
.PP
Then, the SQLite command prompt is started, where you can enter your SQL statements\&. We use the statements as defined in \fB/src/plugins/backend_odbc/sampleDb/prepareDB\&.sql\fP\&.
.PP
.PP
.nf
CREATE TABLE elektraKeys (
    keyName TEXT PRIMARY KEY NOT NULL,
    keyValue TEXT DEFAULT NULL
);

CREATE TABLE metaKeys (
    keyName TEXT NOT NULL,
    metaKeyName TEXT NOT NULL,
    metaKeyValue TEXT DEFAULT NULL,
    CONSTRAINT fk_metakeys FOREIGN KEY (keyName) REFERENCES elektraKeys (keyName),
    CONSTRAINT pk_metaKeys PRIMARY KEY (keyName, metaKeyName)
);

INSERT INTO elektraKeys (keyName, keyValue) VALUES ('sqliteapp1/key1', 'sqlite val 1\&.1');
INSERT INTO elektraKeys (keyName, keyValue) VALUES ('sqliteapp1/key2', 'sqlite val 1\&.2');
INSERT INTO elektraKeys (keyName, keyValue) VALUES ('sqliteapp2/key1', 'sqlite val 2\&.1');
INSERT INTO elektraKeys (keyName, keyValue) VALUES ('sqliteapp2/key2', 'sqlite val 2\&.2');
INSERT INTO elektraKeys (keyName, keyValue) VALUES ('sqliteapp2/key3', 'sqlite val 2\&.3');
INSERT INTO elektraKeys (keyName, keyValue) VALUES ('sqliteapp3/key1', 'sqlite val 3\&.1');


INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp1/key1', 'metakey 1\&.1\&.1', 'metaval 1\&.1\&.1');
INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp1/key1', 'metakey 1\&.1\&.2', 'metaval 1\&.1\&.2');
INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp1/key1', 'metakey 1\&.1\&.3', 'metaval 1\&.1\&.3');
INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp1/key1', 'metakey 1\&.1\&.4', 'metaval 1\&.1\&.4');
INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp2/key2', 'metakey 2\&.2\&.1', 'metaval 2\&.2\&.1');
INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp2/key2', 'metakey 2\&.2\&.2', 'metaval 2\&.2\&.2');
INSERT INTO metaKeys (keyName, metaKeyName, metaKeyValue) VALUES ('sqliteapp2/key3', 'metakey 2\&.3\&.1', 'metaval 2\&.3\&.1');
.fi
.PP
.PP
With typing \fC\&.exit\fP, you can leave the SQLite command prompt and return to your shell\&.
.SS "Preparing the PostgreSQL Database"
If you want to use PostgreSQL, a bit more initial work is necessary\&. It is recommended to set up a user account, create a database and then create the tables using similar SQL statements as given above\&. You can run the PostgreSQL instance locally on the same computer where you use Elektra, but also on another node in the network\&. With this approach, it is possible to provide a centralized configuration storage for a whole network\&. As PostgreSQL natively supports transactions and multiple clients, it is also possible to share the same tables between multiple Elektra clients\&. Another option is to save the configurations for different users in separate tables\&. When a user logs in on any client PC in the network, the table with the matching configuration data can then, with some scripting, be mounted via Elektra\&.
.PP
If you need detailed information about how to set up and use a PostgreSQL DBMS instance, there is excellent documentation, including tutorials for beginners, available at the \fCPostgreSQL website\fP\&.
.PP
However, for this tutorial, we present a single-user scenario on a local PC\&.
.SH "3\&. Installing unixODBC"
.PP
The easiest way to install unixODBC, is to use the package manager of your operating system\&. For example, in Debian and Ubuntu you can install the package with the following command:
.PP
\fCsudo apt-get install unixodbc\fP
.PP
Alternatively, you can also compile the unixODBC package from source\&. The download is available at https://www.unixodbc.org\&. The website also offers some other useful information, like various manuals and a list of supported ODBC drivers\&. Using drivers not mentioned in that list is in many cases also possible\&.
.SH "4\&. Installing the SQLite and PostgreSQL ODBC Drivers"
.PP
The ODBC backend was tested with the following ODBC drivers for unixODBC:
.PP
.IP "\(bu" 2
SQLite: http://www.ch-werner.de/sqliteodbc
.IP "\(bu" 2
PostgreSQL: https://odbc.postgresql.org
.PP
.PP
The installation of the drivers should be straightforward\&. Please refer to the instructions on the websites and the downloaded drivers for how to install these ODBC drivers on your system\&. Maybe the drivers are also offered as packages by the package manager of your OS\&.
.SH "5\&. Creating the ODBC data sources for the Databases"
.PP
Now we have to create or edit two configuration files for unixODBC:
.PP
.IP "\(bu" 2
\fBodbcinst\&.ini:\fP for letting unixODBC know about the drivers and where it can find them
.IP "\(bu" 2
\fBodbc\&.ini:\fP for configuring the actual data sources, which can then be mounted into Elektra's KDB
.PP
.PP
On most systems, these files should be stored at \fC/etc/unixODBC/\fP\&. The content of the \fC/etc/unixODBC/odbcinst\&.ini\fP file should look like this:
.PP
.PP
.nf
[SQLite]
Description=SQLite ODBC Driver
Driver=/usr/local/lib/libsqlite3odbc\&.so
Setup=/usr/local/lib/libsqlite3odbc\&.so
FileUsage=1
Threading=2

[Postgresql]
Description=General ODBC for PostgreSQL
Driver=/usr/local/lib/psqlodbca\&.so
Setup=/usr/lib/libodbcpsqlS\&.so
Setup64=/usr/lib64/libodbcpsqlS\&.so
.fi
.PP
.PP
Please check these paths and adjust them so that they match the place where the drivers and setup libraries are stored on your system\&. At first, the name of the entry is defined, in our example \fCSQLite\fP and \fCPostgresql\fP, then the configuration for the driver is given\&.
.PP
The \fCThreading=2\fP option enables multithreading support for the SQLite driver\&. If you don't need to use multiple threads/instances accessing the SQLite ODBC data source in parallel, you can gain a bit of performance by activating the single-threaded mode\&. In this case you can set \fCThreading=0\fP\&.
.PP
.RS 4
You have to make sure for yourself that only single-threaded use is present\&. This setting just disables mutexes in the driver\&. So if you are not really sure what you are doing, it's safer to enable the multi-thread support!
.PP
More information about this setting is available at https://www.sqlite.org/threadsafe.html\&. 
.RE
.PP
The setting \fCFileUsage=1\fP indicates to unixODBC that the driver is file-based\&.
.SS "odbc\&.ini"
After the driver settings, we have to define the actual ODBC data sources in \fC/etc/unixODBC/odbc\&.ini\fP\&. This content of the file should look like this:
.PP
.PP
.nf
[Selektra]
Description=SQLite Database for Elektra
Driver=SQLite
Database=/home/user/elektraOdbc\&.db
Timeout=3500

[Pelektra]
Description=Postgresql
Driver=Postgresql
Trace=No
Database=elektraDB
Servername=localhost
Username=elektraUser
Password=elektra
Port=5432
Protocol=6\&.4
ReadOnly=No
RowVersioning=No
ShowSystemTables=No
ShowOidColumn=No
FakeOidIndex=No
.fi
.PP
.PP
At first, the data source name is chosen, in our example \fCSelektra\fP and \fCPelektra\fP, then the configuration values for the data source are defined\&. The value for the key \fCDriver\fP must match the corresponding name of the entry that is defined in \fCodbcinst\&.ini\fP\&.
.SH "6\&. Compiling Elektra with support for the ODBC Backend"
.PP
The plugin for the ODBC backend is currently marked as \fBEXPERIMENTAL\fP and therefore not built by default\&.
.PP
You must use the correct cmake-parameters for the plugin to be built\&. If you want to build all plugins, you can just use
.PP
.PP
.nf
cmake -DPLUGINS="ALL" <path to elektra root dir>
.fi
.PP
.PP
If you want the default behavior and just additionally include the ODBC backend plugin, you can use the following command:
.PP
.PP
.nf
cmake -DPLUGINS="ALL;backend_odbc;-EXPERIMENTAL" <path to elektra root dir>
.fi
.PP
.PP
Alternatively, you can also use the ncurses-based \fCccmake\fP tool to define the option\&. For more information about how to build Elektra, please see \fB/doc/COMPILE\&.md\fP\&.
.PP
Check the cmake output to be sure that the build system finds the ODBC libraries\&. Otherwise, the \fCbackend_odbc\fP plugin gets automatically excluded\&.
.SH "7\&. Mounting the data sources into the global Key Database (KDB) of Elektra"
.PP
Now, we can finally mount our ODBC data sources into the global Key Database (KDB) of Elektra\&. Currently, a separate command \fCkdb mountOdbc\fP exists for this purpose\&. Unfortunately, in contrast to the well-known \fCkdb mount\fP for the file-based backend, currently no additional plugins are supported\&.
.PP
However, for now we use the \fCkdb mountOdbc\fP command\&. If you just type the command without additional arguments, you get some information about how the command works and which arguments are expected\&.
.PP
.RS 4
Only \fCsystem:/\fP and \fCuser:/\fP namespaces are supported for ODBC mountpoints\&. 
.RE
.PP
Finally, we can create the mountpoint for our SQLite database using the \fCkdb mountOdbc\fP command\&. Further details about the arguments of the command are available in its \fBman page\fP\&.
.PP
.PP
.nf
kdb mountOdbc Selektra "" "" elektraKeys keyName keyValue metaKeys keyName metaKeyName metaKeyValue "" user:/odbcSqlite
# The new mountpoint for the ODBC data source was successfully created!
.fi
.PP
.PP
Now we can just access the data like with any other mountpoint\&.
.PP
.PP
.nf
kdb ls user:/odbcSqlite/
# user:/odbcSqlite/sqliteapp1/key1
# user:/odbcSqlite/sqliteapp1/key2
# user:/odbcSqlite/sqliteapp2/key1
# user:/odbcSqlite/sqliteapp2/key2
# user:/odbcSqlite/sqliteapp2/key3
# user:/odbcSqlite/sqliteapp3/key1

kdb get /odbcSqlite/sqliteapp1/key1
# sqlite val 1\&.1

kdb set /odbcSqlite/sqliteapp1/key1 newVal
kdb get /odbcSqlite/sqliteapp1/key1
# sqlite newVal

kdb meta-show user:/odbcSqlite/sqliteapp1/key1
# metakey 1\&.1\&.1: metaval 1\&.1\&.1
# metakey 1\&.1\&.2: metaval 1\&.1\&.2
# metakey 1\&.1\&.3: metaval 1\&.1\&.3
# metakey 1\&.1\&.4: metaval 1\&.1\&.4
.fi
.PP
.PP
For unmounting, there is not an extra command for ODBC data sources\&. You can unmount the ODBC backend, exactly like mounted files:
.PP
.PP
.nf
kdb umount user:/odbcSqlite
.fi
.PP
 
