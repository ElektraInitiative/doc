.TH "doc_tutorials_merge_md" 3elektra "Mon Feb 1 2021" "Version 0.9.4" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_merge_mdHow-To: kdb merge 
 \- The kdb tool allows users to access and perform functions on the Elektra Key Database from the command line\&. We added a new command to this very useful tool, the \fCmerge\fP command\&. This command allows a user to perform a three-way merge of KeySets from the \fCkdb\fP tool\&.
.PP
The command to use this tool is:
.PP
.PP
.nf
kdb merge [options] ourpath theirpath basepath resultpath
.fi
.PP
.PP
The standard naming scheme for a three-way merge consists of \fCours\fP, \fCtheirs\fP, and \fCbase\fP:
.PP
.IP "\(bu" 2
\fCours\fP refers to the local copy of a file
.IP "\(bu" 2
\fCtheirs\fP refers to a remote copy
.IP "\(bu" 2
\fCbase\fP refers to their common ancestor\&.
.PP
.PP
This works very similarly for KeySets, especially ones that consist of mounted configuration files\&.
.PP
For mounted configuration files:
.PP
.IP "\(bu" 2
\fCours\fP should be the user's copy
.IP "\(bu" 2
\fCtheirs\fP would be the maintainers copy,
.IP "\(bu" 2
\fCbase\fP would be the previous version of the maintainer's copy\&.
.PP
.PP
If the user is just trying to accomplish a three-way merge using any two arbitrary keysets that share a base, it doesn't matter which ones are defined as \fCours\fP or \fCtheirs\fP as long as they use the correct base KeySet\&. In \fCkdb merge\fP, \fCourpath\fP, \fCtheirpath\fP, and \fCbasepath\fP work just like \fCours\fP, \fCtheirs\fP, and \fCbase\fP except each one represents the root of a KeySet\&. The argument \fCresultpath\fP is pretty self-explanatory, it is just where you want the result of the merge to be saved under\&. It's worth noting, \fCresultpath\fP should be empty before attempting a merge, otherwise there can be unintended consequences\&.
.PP
As for the options, there are a few basic options:
.PP
.IP "\(bu" 2
\fC-i\fP, \fC--interactive\fP: which attempts the merge in an interactive way
.IP "\(bu" 2
\fC-t\fP, \fC--test\fP: which tests the proposed merge and informs you about possible conflicts
.IP "\(bu" 2
\fC-f\fP, \fC--force\fP: which overwrites any Keys in \fCresultpath\fP
.PP
.PP
Additionally there is an option to specify a merge strategy, which is very important\&.
.PP
The option for strategy is:
.PP
.IP "\(bu" 2
\fC-s <name>\fP, \fC--strategy <name>\fP: which is used to specify a strategy to use in case of a conflict
.PP
.PP
The current list of strategies are:
.PP
.IP "\(bu" 2
\fCpreserve\fP: the merge will fail if a conflict is detected
.IP "\(bu" 2
\fCours\fP: the merge will use our version during a conflict
.IP "\(bu" 2
\fCtheirs\fP: the merge will use their version during a conflict
.IP "\(bu" 2
\fCbase\fP: the merge will use the base version during a conflict
.PP
.PP
If no strategy is specified, the merge will default to the preserve strategy as to not risk making the wrong decision\&. If any of the other strategies are specified, when a conflict is detected, merge will use the Key specified by the strategy (\fCours\fP, \fCtheirs\fP, or \fCbase\fP) for the resulting Key\&.
.PP
Basic Usage:
.PP
.PP
.nf
kdb merge system:/hosts/ours system:/hosts/theirs system:/hosts/base system:/hosts/result
.fi
.PP
.PP
Here are examples of the same KeySets being merged using different strategies\&. The KeySets are mounted using a property format, the left side of '=' is the name of the Key, the right side is its string value\&.
.PP
We start with the base KeySet, \fCsystem:/base\fP:
.PP
.PP
.nf
key1=1
key2=2
key3=3
key4=4
key5=5
.fi
.PP
.PP
Here is our KeySet, \fCsystem:/ours\fP:
.PP
.PP
.nf
key1=apple
key2=2
key3=3
key5=fish
.fi
.PP
.PP
Here is their KeySet, \fCsystem:/theirs\fP:
.PP
.PP
.nf
key1=1
key2=pie
key4=banana
key5=5
.fi
.PP
.PP
Now we will examine the result KeySet with the different strategies\&.
.PP
.PP
.nf
kdb merge -s preserve system:/ours system:/theirs system:/base system:/result
.fi
.PP
.PP
The merge will fail because of a conflict for \fCkey4\fP since \fCkey4\fP was deleted in our KeySet and edited in their KeySet\&. Since we used preserve, the merge fails and the result KeySet is not saved\&.
.PP
.PP
.nf
kdb merge -s ours system:/ours system:/theirs system:/base system:/result
.fi
.PP
.PP
The result KeySet, system:/result will be:
.PP
.PP
.nf
key1=apple
key2=pie
key5=fish
.fi
.PP
.PP
Because the conflict of \fCkey4\fP (it was deleted in \fCours\fP but changed in \fCtheirs\fP) is solved by using our copy thus deleting the key\&.
.PP
.PP
.nf
kdb merge -s theirs system:/ours system:/theirs system:/base system:/result
.fi
.PP
.PP
The result KeySet, \fCsystem:/result\fP will be:
.PP
.PP
.nf
key1=apple
key2=pie
key4=banana
key5=fish
.fi
.PP
.PP
Here, the conflict of \fCkey4\fP is solved by using their copy, thus \fCkey4=banana\fP\&.
.PP
.PP
.nf
kdb merge -s base system:/ours system:/theirs system:/base system:/result
.fi
.PP
.PP
The result KeySet, \fCsystem:/result\fP will be:
.PP
.PP
.nf
key1=apple
key2=pie
key4=4
key5=5
.fi
.PP
.PP
The same conflict is found in \fCkey4\fP, but here we use the \fCbase\fP version to solve it so \fCkey4=4\fP\&. 
