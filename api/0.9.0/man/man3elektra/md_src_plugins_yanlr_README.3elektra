.TH "md_src_plugins_yanlr_README" 3elektra "Tue Aug 6 2019" "Version 0.9.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_yanlr_READMEPlugin: yanlr 
 \- 
.IP "\(bu" 2
infos = Information about the yanlr plugin is in keys below
.IP "\(bu" 2
infos/author = René Schwaiger sanssecours@me.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs = directoryvalue yamlsmith
.IP "\(bu" 2
infos/provides = storage/yaml
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = getstorage
.IP "\(bu" 2
infos/status = maintained unittest preview experimental unfinished nodoc concept discouraged
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = This storage plugin use a parser generated by ANTLR to read YAML files
.PP
.SH "Yan LR"
.PP
.SS "Introduction"
.PP
This plugin uses ANTLR to generate a parser for the \fCYAML\fP serialization format\&. Apart from the hand written \fClexer\fP, all other parts of the plugin use standard ANTLR tools, such as
.PP
.IP "\(bu" 2
an ANTLR \fBparser grammar\fP,
.IP "\(bu" 2
a \fClistener\fP, that reacts to matches in the grammar building a key set, and
.IP "\(bu" 2
an \fCerror listener\fP that reacts to syntax errors
.PP
.PP
.SS "Dependencies"
.PP
The plugin requires
.PP
.IP "\(bu" 2
\fCANTLR\fP \fC4\&.6\fP or later (\fC\fCantlr4\fP\fP), and
.IP "\(bu" 2
\fCANTLR 4’s C++ runtime\fP (\fC\fCantlr4-cpp-runtime\fP\fP or \fC\fClibantlr4-runtime-dev\fP\fP)
.PP
.PP
\&. If packages for those libraries are not available for your system, you can install them manually\&. For more information about that please take a look \fCat ANTLR’s homepage\fP and at the \fCReadMe of the ANTLR C++ runtime\fP\&.
.PP
Please note that we only tested the plugin with ANTLR \fC4\&.7\&.1\fP (and later versions of ANTLR)\&.
.PP
.SS "Examples"
.PP
.SS "Mappings"
.PP
``\fC <h1>Mount plugin to\fPuser/tests/yanlr` sudo kdb mount config\&.yaml user/tests/yanlr yanlr
.PP
.SH "Manually add some mappings to the configuration file"
.PP
.PP
printf 'all : circles presuppose
.br
' > \fCkdb file user/tests/yanlr\fP printf 'hello : world
.br
' >> \fCkdb file user/tests/yanlr\fP
.PP
kdb ls /tests/yanlr #> user/tests/yanlr/all #> user/tests/yanlr/hello
.PP
kdb get user/tests/yanlr/all #> circles presuppose
.PP
.SH "Store value at root of mountpoint"
.PP
.PP
kdb set user/tests/yanlr 'Mount Eerie' kdb get user/tests/yanlr #> Mount Eerie
.PP
.SH "Add new key-value pairs"
.PP
.PP
.SH "Yan LR actually uses the YAML Smith plugin to write data"
.PP
.PP
kdb set user/tests/yanlr/brand new kdb set user/tests/yanlr/brand/new eyes kdb set user/tests/yanlr/dance/gavin 'Dance!'
.PP
kdb ls /tests/yanlr #> user/tests/yanlr #> user/tests/yanlr/all #> user/tests/yanlr/brand #> user/tests/yanlr/brand/new #> user/tests/yanlr/dance/gavin #> user/tests/yanlr/hello
.PP
kdb get /tests/yanlr/hello #> world kdb get user/tests/yanlr/brand #> new kdb get /tests/yanlr/dance/gavin #> Dance!
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r user/tests/yanlr sudo kdb umount user/tests/yanlr 
.PP
.nf
### Arrays

.fi
.PP
 
.SH "Mount plugin to \fC/tests/yanlr\fP"
.PP
.PP
sudo kdb mount config\&.yaml user/tests/yanlr yanlr
.PP
.SH "Manually add a sequences to the configuration file"
.PP
.PP
printf 'primes:
.br
' > \fCkdb file user/tests/yanlr\fP printf ' - two
.br
' >> \fCkdb file user/tests/yanlr\fP printf ' - three
.br
' >> \fCkdb file user/tests/yanlr\fP printf ' - five
.br
' >> \fCkdb file user/tests/yanlr\fP
.PP
kdb ls user/tests/yanlr #> user/tests/yanlr/primes #> user/tests/yanlr/primes/#0 #> user/tests/yanlr/primes/#1 #> user/tests/yanlr/primes/#2
.PP
kdb set user/tests/yanlr/primes/#3 seven
.PP
.SH "Retrieve index of last array element"
.PP
.PP
kdb getmeta user/tests/yanlr/primes array #> #3
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r user/tests/yanlr sudo kdb umount user/tests/yanlr 
.PP
.nf
### Boolean Values

.fi
.PP
 
.SH "Mount plugin to \fC/tests/yanlr\fP"
.PP
.PP
sudo kdb mount config\&.yaml user/tests/yanlr yanlr
.PP
.SH "Manually add a boolean value to the database"
.PP
.PP
printf 'boolean: true' > \fCkdb file user/tests/yanlr\fP
.PP
.SH "Elektra stores boolean values as \fC0\fP and \fC1\fP"
.PP
.PP
kdb get user/tests/yanlr/boolean #> 1
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r user/tests/yanlr sudo kdb umount user/tests/yanlr 
.PP
.nf
### Null Values

.fi
.PP
 
.SH "Mount plugin to \fC/tests/yanlr\fP"
.PP
.PP
sudo kdb mount config\&.yaml user/tests/yanlr yanlr
.PP
.SH "Manually add a null value to the database"
.PP
.PP
printf ''null':' > \fCkdb file user/tests/yanlr\fP
.PP
.SH "Elektra adds the metakey \fCbinary\fP for empty keys"
.PP
.PP
kdb lsmeta user/tests/yanlr/null #> binary
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r user/tests/yanlr sudo kdb umount user/tests/yanlr 
.PP
.nf
### Error Messages

.fi
.PP
 
.SH "Mount plugin"
.PP
.PP
sudo kdb mount config\&.yaml user/tests/yanlr yanlr
.PP
.SH "Manually add syntactically incorrect data"
.PP
.PP
printf -- 'key: - element 1
.br
' > \fCkdb file user/tests/yanlr\fP printf -- '- element 2 # Incorrect Indentation!' >> \fCkdb file user/tests/yanlr\fP
.PP
.SH "The plugin reports the location of the error"
.PP
.PP
kdb ls user/tests/yanlr 
.SH "RET: 5"
.PP
.PP
.SH "STDERR: \&.*/config\&.yaml:2:1: mismatched input '- ' expecting end of map\&.*"
.PP
.PP
.SH "Let us look at the error message more closely\&."
.PP
.PP
.SH "Since the location of \fCconfig\&.yaml\fP depends on the current user and OS,"
.PP
.PP
.SH "we store the text before \fCconfig\&.yaml\fP as \fCuser/tests/error/prefix\fP\&."
.PP
.PP
kdb set user/tests/error '$(2>&1 kdb ls user/tests/yanlr)' kdb set user/tests/error/prefix '$(kdb get user/tests/error | grep 'config\&.yaml' | head -1 | sed -E 's/(\&.*)config\&.yaml\&.*/\\1/')' 
.SH "We also store the length of the prefix, so we can remove it from every"
.PP
.PP
.SH "line of the error message\&."
.PP
.PP
kdb set user/tests/error/prefix/length '$(kdb get user/tests/error/prefix | wc -c | sed 's/[ ]*//g')'
.PP
.SH "Since we only want to look at the “reason” of the error, we"
.PP
.PP
.SH "remove the other part of the error message with \fChead\fP and \fCtail\fP\&."
.PP
.PP
kdb get user/tests/error | tail -n6 | cut -c'$(kdb get user/tests/error/prefix/length | tr -d '\\n')'- #> config\&.yaml:2:1: mismatched input '- ' expecting end of map #> - element 2 # Incorrect Indentation! #> ^^ #> config\&.yaml:2:37: extraneous input 'end of map' expecting end of document #> - element 2 # Incorrect Indentation! #> ^
.PP
.SH "Fix syntax error"
.PP
.PP
printf -- 'key: - element 1
.br
' > \fCkdb file user/tests/yanlr\fP printf -- ' - element 2 # Fixed!' >> \fCkdb file user/tests/yanlr\fP
.PP
kdb ls user/tests/yanlr #> user/tests/yanlr/key #> user/tests/yanlr/key/#0 #> user/tests/yanlr/key/#1
.PP
.SH "Undo modifications"
.PP
.PP
kdb rm -r user/tests/error kdb rm -r user/tests/yanlr sudo kdb umount user/tests/yanlr 
.PP
.nf
## Limitations

- The plugin does **not support**

  - plain scalars that span **multiple lines**,
  - **special characters** inside double quoted scalars,
  - other **line endings** than `\n` (Unix line endings),
  - **block scalars**,
  - **flow collections**,
  - **tags**,
  - **anchors & aliases**,
  - **multiple documents**, and
  - document **start and end markers**

  \&.

- Yan LR does not provide write support for data\&. Please use the [YAML Smith](@ref src_plugins_yamlsmith_README_md) plugin for that purpose\&.

### Comments

The [lexer](/home/markus/Projekte/Elektra/current/src/plugins/yanlr/yaml_lexer\&.cpp) does currently tokenize comments\&. Consequently the [plugin grammar](@ref src_plugins_yanlr_YAML_g4) of the plugin does also match comments\&. However, the [listener](/home/markus/Projekte/Elektra/current/src/plugins/yanlr/listener\&.cpp) does currently **ignore comments**\&.

### Indentation

The lexer does not check for incorrect indentation\&. Consequently the following YAML data:



```yaml
        value

.fi
.PP
.PP
will produce a plain scalar containing a tab character followed by the text \fCvalue\fP\&. The correct behavior would be to report an error, since YAML does not allow tab characters in indentation\&.
.PP
.SS "Error Messages"
.PP
Visualized error messages (containing \fC^\fP markers) might not point to the correct error location, if the input contains tabs or unicode characters with a length other than \fC1\fP\&. 
