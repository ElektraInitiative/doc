.TH "doc_dev_plugins-ordering_md" 3elektra "Fri Aug 4 2023" "Version 0.11.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_dev_plugins-ordering_md \- Plugins Ordering 
 
.SH "Outdated"
.PP
.RS 4
\fBWarning\fP Many of the things described below are outdated\&. Parts of this document are still valid for the \fCbackend\fP plugin\&. 
.RE
.PP
.SH "Introduction"
.PP
You should first read \fBelektra-plugins\fP to get an idea about plugins\&.
.PP
This document describes how \fBelektra-plugins\fP are ordered with \fBelektra-backends(7)\fP\&.
.PP
Multiple plugins open up many ways in which they can be arranged\&. A simple way is to have one array with pointers to plugins\&. To store a \fCKeySet\fP, the first plugin starts off with the \fCKeySet\fP passed to it\&. The resulting \fCKeySet\fP is given to the next plugin\&. This is repeated for every plugin in the array\&.
.PP
To obtain a \fCKeySet\fP, the array of plugins is processed the other way round\&. An empty \fCKeySet\fP is passed to the last plugin\&. The resulting \fCKeySet\fP is handed over to the previous one until the first plugin is executed\&.
.PP
This approach has shown not to be powerful enough to express all use cases by counter-evidence\&. Logging should take place after the storage plugin performs its actions in both directions\&. It is not possible to do this with a \fIsingle array\fP processed in a way as described above\&.
.SH "Separated lists"
.PP
Two individual lists (get+set list) of plugins solve the described problem\&. Instead of bidirectional processing of a single list two separate arrays are used\&. It turns out that error scenarios also make this approach unsuccessful\&. When a plugin fails, no other plugin must be executed later on because it might depend on the previous plugin to work correctly\&. In \fC\fBkdbGet()\fP\fP, this works well -- the update process will be stopped\&. But during \fC\fBkdbSet()\fP\fP, changes to the file system must be reverted\&. Plugins can leave a lock, temporary file or journal\&. These resources need to be cleaned up properly\&.
.SH "Error List"
.PP
So every backend additionally needs a third array that is executed in error scenarios during \fC\fBkdbSet()\fP\fP\&. Plugins responsible for the cleanup, rollback or error notification are inserted into it\&.
.PP
The resolver plugin requires this error list to do a proper rollback\&. Another use case is logging after a failure has happened\&.
.SH "Arrays of linked lists"
.PP
A disadvantage of using arrays is that they contain a fixed amount of slots\&. This means that when a certain amount of slots is full, it is no longer possible to add more\&. Therefore, the plugin arrays are structured as arrays of linked lists\&.
.PP
Each plugin role is assigned its own slot in the array, which contains a linked list\&. Plugins fulfilling that role are added to the list\&. That way, much greater and more flexible plugin numbers can be added to a single role\&.
.SH "Placements"
.PP
The ordering of plugins inside these three arrays is controlled by \fBelektra-contracts(7)\fP\&. Each of the three arrays has one slot for each role\&. These slots have names to be referred to in the contract\&.
.PP
Here you see a table that contains all names:
.PP
Slot   Error   Get   Set    0   prerollback   getresolver   setresolver    1   rollback   pregetstorage   presetstorage    2   postrollback   getstorage   setstorage    3   postgetstorage   precommit    4   commit    5   postcommit   
.PP
How the placement is influenced using \fCinfos/placement\fP, \fCinfos/ordering\fP and \fCinfos/stacking\fP is described in \fCCONTRACT\&.ini\fP\&. 
