.TH "doc_api_review_core_keyAddName_md" 3elektra "Thu Mar 10 2022" "Version 0.9.9" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_api_review_core_keyAddName_md \- keyAddName 

.IP "\(bu" 2
start = 2021-02-26 12:25
.IP "\(bu" 2
end = 2021-02-26 18:10
.IP "\(bu" 2
moderator = Stefan Hanreich stefanhani@gmail.com
.IP "\(bu" 2
reviewer = Michael Tucek michael@tucek.eu
.PP
.SH "Signature"
.PP
\fCssize_t \fBkeyAddName(Key *key, const char *addName)\fP\fP
.SH "Checklist"
.PP
.SS "Doxygen"
(bullet points are in order of appearance)
.PP
.IP "\(bu" 2
[ ] First line explains briefly what the function does 
.br
.IP "  \(bu" 4
[ ] Add an already escaped key name part to the key name
.PP

.IP "\(bu" 2
[ ] Simple example or snippet how to use the function 
.br
.IP "  \(bu" 4
[ ] add very simple example, with one simple key name part without dots
.PP

.IP "\(bu" 2
[ ] Longer description of function containing common use cases 
.br
.IP "  \(bu" 4
[ ] add common use cases (append to a key name,\&.\&.)
.PP

.IP "\(bu" 2
[ ] Description of functions reads nicely 
.br
.IP "  \(bu" 4
[ ] move examples to bottom 
.br

.IP "  \(bu" 4
[ ] passed name below brief description 
.br

.IP "  \(bu" 4
[ ] replace list with reference to canonicalization docs 
.br

.IP "  \(bu" 4
[ ] 'key name' rules no space before dot
.PP

.IP "\(bu" 2
[ ] \fC@pre\fP 
.br
.IP "  \(bu" 4
[ ] move above \fC@param\fP 
.br

.IP "  \(bu" 4
[ ] writeable key 
.br

.IP "  \(bu" 4
[ ] newName must be a valid name (reference to key name rules) 
.br

.IP "  \(bu" 4
[ ] move 'It is not allowed to' precondition
.PP

.IP "\(bu" 2
[ ] \fC@post\fP 
.br
.IP "  \(bu" 4
[ ] newName has been added to key
.PP

.IP "\(bu" 2
[ ] \fC@invariant\fP 
.br
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[ ] \fC@param\fP for every parameter 
.br
.IP "  \(bu" 4
[ ] move below \fC@pre\fP 
.br

.IP "  \(bu" 4
[ ] key - pointer to Key object 
.br

.IP "  \(bu" 4
[ ] newName - name part to append to \fCkey\fP's name
.PP

.IP "\(bu" 2
[ ] \fC@return\fP / \fC@retval\fP 
.br
.IP "  \(bu" 4
[ ] move below \fC@param\fP 
.br

.IP "  \(bu" 4
[ ] move \fC@retval\fP into list 
.br

.IP "  \(bu" 4
[ ] make error cases differentiable (key errors, name errors)?
.PP

.IP "\(bu" 2
[ ] \fC@since\fP 
.br
.IP "  \(bu" 4
[ ] move lower
.PP

.IP "\(bu" 2
[x] \fC@ingroup\fP
.IP "\(bu" 2
[ ] \fC@see\fP 
.br
.IP "  \(bu" 4
[ ] \fC\fBkeyAddBaseName()\fP\fP 
.br

.IP "  \(bu" 4
[ ] \fC\fBkeySetName()\fP\fP 
.br

.IP "  \(bu" 4
[ ] \fC\fBkeySetBaseName()\fP\fP
.PP

.PP
.SS "Naming"
.IP "\(bu" 2
Abbreviations used in function names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Function names should neither be too long, nor too short
.IP "\(bu" 2
[ ] Function name should be clear and unambiguous 
.br
.IP "  \(bu" 4
[ ] Add -> Append
.PP

.IP "\(bu" 2
Abbreviations used in parameter names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Parameter names should neither be too long, nor too short
.IP "\(bu" 2
[ ] Parameter names should be clear and unambiguous 
.br
.IP "  \(bu" 4
[ ] newName -> nameParts
.PP

.PP
.SS "Compatibility"
(only in PRs)
.PP
.IP "\(bu" 2
\fBSymbol versioning\fP is correct for breaking changes
.IP "\(bu" 2
ABI/API changes are forward-compatible (breaking backwards-compatibility to add additional symbols is fine)
.PP
.SS "Parameter & Return Types"
.IP "\(bu" 2
Function parameters should use enum types instead of boolean types wherever sensible
.IP "\(bu" 2
[x] Wherever possible, function parameters should be \fCconst\fP
.IP "\(bu" 2
[x] Wherever possible, return types should be \fCconst\fP
.IP "\(bu" 2
[x] Functions should have the least amount of parameters feasible
.PP
.SS "Structural Clarity"
.IP "\(bu" 2
[x] Functions should do exactly one thing
.IP "\(bu" 2
[x] Function name has the appropriate prefix
.IP "\(bu" 2
[ ] Order of signatures in kdb\&.h\&.in is the same as Doxygen 
.br
.IP "  \(bu" 4
[ ] order is different
.PP

.IP "\(bu" 2
[ ] No functions with similar purpose exist 
.br
.IP "  \(bu" 4
[ ] \fC\fBkeyAddName()\fP\fP merge with \fC\fBkeySetName()\fP\fP
.PP

.PP
.SS "Memory Management"
.IP "\(bu" 2
Memory Management should be handled by the function wherever possible
.PP
.SS "Extensibility"
.IP "\(bu" 2
[x] Function is easily extensible, e\&.g\&., with flags
.IP "\(bu" 2
[x] Documentation does not impose limits, that would hinder further extensions
.PP
.SS "Tests"
.IP "\(bu" 2
[ ] Function code is fully covered by tests 
.br
.IP "  \(bu" 4
[x] check if we can remove uncovered code 
.br

.IP "  \(bu" 4
[x] Line 542
.PP

.IP "\(bu" 2
[ ] All possible error states are covered by tests 
.br
.IP "  \(bu" 4
[x] add test case for read-only key 
.br

.IP "  \(bu" 4
[x] test invalid name
.PP

.IP "\(bu" 2
All possible enum values are covered by tests
.IP "\(bu" 2
[x] No inconsistencies between tests and documentation
.PP
.SH "Summary"
.PP
.SH "Other Issues discovered (unrelated to function)"
.PP
.IP "\(bu" 2
What is a valid Key exactly? Or does it just mean a valid pointer?
.IP "\(bu" 2
Different Return Vlaues for different errors
.IP "\(bu" 2
Set Doxygen Options to sort after header file 
.PP

