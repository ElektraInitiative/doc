.TH "kdb::KDB" 3elektra "Sun Jul 10 2022" "Version 0.9.10" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::KDB \- Constructs a class \fBKDB\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <kdb\&.hpp>\fP
.PP
Inherited by \fBkdb::tools::merging::MergingKDB\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKDB\fP ()"
.br
.RI "Constructs a class \fBKDB\fP\&. "
.ti -1c
.RI "\fBKDB\fP (\fBKey\fP &errorKey)"
.br
.RI "Constructs a class \fBKDB\fP\&. "
.ti -1c
.RI "\fBKDB\fP (\fBKeySet\fP &contract)"
.br
.RI "Constructs a class \fBKDB\fP\&. "
.ti -1c
.RI "\fBKDB\fP (\fBKeySet\fP &contract, \fBKey\fP &errorKey)"
.br
.RI "Constructs a class \fBKDB\fP\&. "
.ti -1c
.RI "virtual void \fBopen\fP (\fBKey\fP &errorKey)"
.br
.RI "Open the database\&. "
.ti -1c
.RI "virtual void \fBopen\fP (\fBKeySet\fP &contract, \fBKey\fP &errorKey)"
.br
.RI "Open the database\&. "
.ti -1c
.RI "virtual void \fBclose\fP ()  throw ()"
.br
.RI "Close the database\&. "
.ti -1c
.RI "virtual void \fBclose\fP (\fBKey\fP &errorKey)  throw ()"
.br
.RI "Close the database\&. "
.ti -1c
.RI "virtual int \fBget\fP (\fBKeySet\fP &returned, std::string const &keyname)"
.br
.RI "Get all keys below keyname inside returned\&. "
.ti -1c
.RI "virtual int \fBget\fP (\fBKeySet\fP &returned, \fBKey\fP &parentKey)"
.br
.RI "Get all keys below parentKey inside returned\&. "
.ti -1c
.RI "virtual int \fBset\fP (\fBKeySet\fP &returned, std::string const &keyname)"
.br
.RI "Set all keys below keyname\&. "
.ti -1c
.RI "virtual int \fBset\fP (\fBKeySet\fP &returned, \fBKey\fP &parentKey)"
.br
.RI "Set all keys below parentKey\&. "
.in -1c
.SH "Detailed Description"
.PP 
Constructs a class \fBKDB\fP\&. 


.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP
.RE
.PP
Access to the key database\&.
.PP
\fBInvariant\fP
.RS 4
the object holds a valid connection to the key database or is empty 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "kdb::KDB::KDB ()\fC [inline]\fP"

.PP
Constructs a class \fBKDB\fP\&. 
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP 
.RE
.PP

.SS "kdb::KDB::KDB (\fBKey\fP & errorKey)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a class \fBKDB\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP 
.RE
.PP

.SS "kdb::KDB::KDB (\fBKeySet\fP & contract)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructs a class \fBKDB\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured 
.br
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP 
.RE
.PP

.SS "kdb::KDB::KDB (\fBKeySet\fP & contract, \fBKey\fP & errorKey)\fC [inline]\fP"

.PP
Constructs a class \fBKDB\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured 
.br
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void kdb::KDB::close ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Close the database\&. The return value does not matter because its only a null pointer check\&.
.PP
Closes the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
The handle must be a valid handle as returned from \fBkdbOpen()\fP 
.PP
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
This is the counterpart of \fBkdbOpen()\fP\&.
.PP
You must call this method when you are finished working with the \fBKey\fP database\&. You can manipulate \fBKey\fP and \fBKeySet\fP objects also after \fBkdbClose()\fP, but you must not use any kdb*() call afterwards\&.
.PP
The \fChandle\fP parameter will be finalized and all resources associated to it will be freed\&. After a \fBkdbClose()\fP, the \fChandle\fP cannot be used anymore\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIerrorKey\fP the key which holds error/warning information
.RE
.PP
\fBReturn values\fP
.RS 4
\fI0\fP on success 
.br
\fI-1\fP on NULL pointer
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbOpen()\fP for opening a session with a \fBKey\fP database 
.RE
.PP

.SS "void kdb::KDB::close (\fBKey\fP & errorKey)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Close the database\&. The return value does not matter because its only a null pointer check\&.
.PP
\fBParameters\fP
.RS 4
\fIerrorKey\fP is useful if you want to get the warnings
.RE
.PP
Closes the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
The handle must be a valid handle as returned from \fBkdbOpen()\fP 
.PP
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
This is the counterpart of \fBkdbOpen()\fP\&.
.PP
You must call this method when you are finished working with the \fBKey\fP database\&. You can manipulate \fBKey\fP and \fBKeySet\fP objects also after \fBkdbClose()\fP, but you must not use any kdb*() call afterwards\&.
.PP
The \fChandle\fP parameter will be finalized and all resources associated to it will be freed\&. After a \fBkdbClose()\fP, the \fChandle\fP cannot be used anymore\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIerrorKey\fP the key which holds error/warning information
.RE
.PP
\fBReturn values\fP
.RS 4
\fI0\fP on success 
.br
\fI-1\fP on NULL pointer
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbOpen()\fP for opening a session with a \fBKey\fP database 
.RE
.PP

.SS "int kdb::KDB::get (\fBKeySet\fP & returned, \fBKey\fP & parentKey)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get all keys below parentKey inside returned\&. Retrieve Keys from a \fBKey\fP database in an atomic and universal way\&. 
.PP
\fBPrecondition\fP
.RS 4
The \fChandle\fP must be passed as returned from \fBkdbOpen()\fP\&. 
.PP
The \fCreturned\fP \fBKeySet\fP must be a valid \fBKeySet\fP, e\&.g\&. constructed with \fBksNew()\fP\&. 
.PP
The \fCparentKey\fP \fBKey\fP must be a valid \fBKey\fP, e\&.g\&. constructed with \fBkeyNew()\fP\&.
.RE
.PP
If you pass NULL on any parameter, \fBkdbGet()\fP will fail immediately without doing anything\&.
.PP
The returned \fBKeySet\fP \fCks\fP may already contain some keys, e\&.g\&. from previous \fBkdbGet()\fP calls\&. The newly retrieved Keys will be appended using \fBksAppendKey()\fP\&.
.PP
If not done earlier, \fBkdbGet()\fP will fully retrieve all keys under the \fCparentKey\fP folder recursively (See Optimization below when it will not be done)\&. Cascading Keys (starting with /) will retrieve the same path in all namespaces\&. \fC/\fP will retrieve all Keys in \fChandle\fP\&.
.PP
It is recommended to use the most specific \fCparentKey\fP possible\&. (e\&.g\&. using \fCsystem:/\fP is rarely the most specific)
.PP
\fBNote\fP
.RS 4
\fBkdbGet()\fP might retrieve more Keys than requested which are not below parentKey or even in a different namespace\&. These keys, except of \fCproc:/\fP keys, must be passed to calls of \fBkdbSet()\fP, otherwise they will be lost\&. This stems from the fact that the user has the only copy of the whole configuration and backends only write configuration that was passed to them\&. For example, if you \fBkdbGet()\fP 'system:/mountpoint/interest' you will not only get all Keys below system:/mountpoint/interest, but also all Keys below system:/mountpoint (if system:/mountpoint is a mountpoint as the name suggests, but system:/mountpoint/interest is not a mountpoint)\&. Make sure to not touch or remove Keys outside the Keys of interest, because others may need them!
.RE
.PP
\fBExample:\fP
.RS 4
This example demonstrates the typical usecase within an application (without error handling)\&.
.RE
.PP
.PP
.nf

#include <kdb\&.h>
#include <stdio\&.h>

int main (void)
{
        KeySet * myConfig = ksNew (0, KS_END);

        // for error handling see kdbget_error\&.c

        // clang-format off
Key * key = keyNew ("/sw/tests/myapp/#0/current/",  KEY_END);
KDB * handle = kdbOpen (NULL, key);
kdbGet (handle, myConfig, key);
Key * result = ksLookupByName (myConfig, "/sw/tests/myapp/#0/current/testkey1", 0);
        // clang-format on

        keyDel (key);

        const char * key_name = keyName (result);
        const char * key_value = keyString (result);
        const char * key_comment = keyString (keyGetMeta (result, "comment/#0"));
        printf ("key: %s value: %s comment: %s\n", key_name, key_value, key_comment);

        ksDel (myConfig); // delete the in-memory configuration


        // maybe you want kdbSet() myConfig here

        kdbClose (handle, 0); // no more affairs with the key database\&.
}
.fi
.PP
.PP
When a backend fails \fBkdbGet()\fP will return -1 with all error and warning information in the \fCparentKey\fP\&. The parameter \fCreturned\fP will not be changed\&.
.PP
\fBOptimization:\fP
.RS 4
In the first run of kdbGet all requested (or more) Keys are retrieved\&. On subsequent calls only the Keys are retrieved where something was changed inside the \fBKey\fP database\&. The other Keys stay in the \fBKeySet\fP returned as passed\&.
.RE
.PP
It is your responsibility to save the original \fBKeySet\fP if you need it afterwards\&.
.PP
If you want to be sure to get a fresh \fBKeySet\fP again, you need to open a second handle to the \fBKey\fP database using \fBkdbOpen()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIparentKey\fP Keys below \fCparentKey\fP will be retrieved from \fChandle\fP\&. It is also used to add warnings and set error information\&. 
.br
\fIks\fP the (pre-initialized) \fBKeySet\fP returned with all keys found will not be changed on error or if no update is required
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if the Keys were retrieved successfully\&. There might be warnings attached to the parentKey! Depending on your use case, you might need to treat them as errors! 
.br
\fI0\fP if there was no update - no changes are made to the \fBKeySet\fP then\&. There might be warnings attached to the parentKey! Depending on your use case, you might need to treat them as erorrs! 
.br
\fI-1\fP on failure - no changes are made to the \fBKeySet\fP then
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBksLookup()\fP, \fBksLookupByName()\fP for powerful lookups after the \fBKeySet\fP was retrieved 
.PP
\fBkdbOpen()\fP which needs to be called before 
.PP
\fBkdbSet()\fP to save the configuration afterwards 
.PP
\fBkdbClose()\fP to finish affairs with the \fBKey\fP database\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIreturned\fP the keyset where the keys will be in 
.br
\fIparentKey\fP the parentKey of returned
.RE
.PP
\fBReturn values\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if there were problems with the database 
.RE
.PP

.PP
Reimplemented in \fBkdb::tools::merging::MergingKDB\fP\&.
.SS "int kdb::KDB::get (\fBKeySet\fP & returned, std::string const & keyname)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get all keys below keyname inside returned\&. Retrieve Keys from a \fBKey\fP database in an atomic and universal way\&. 
.PP
\fBPrecondition\fP
.RS 4
The \fChandle\fP must be passed as returned from \fBkdbOpen()\fP\&. 
.PP
The \fCreturned\fP \fBKeySet\fP must be a valid \fBKeySet\fP, e\&.g\&. constructed with \fBksNew()\fP\&. 
.PP
The \fCparentKey\fP \fBKey\fP must be a valid \fBKey\fP, e\&.g\&. constructed with \fBkeyNew()\fP\&.
.RE
.PP
If you pass NULL on any parameter, \fBkdbGet()\fP will fail immediately without doing anything\&.
.PP
The returned \fBKeySet\fP \fCks\fP may already contain some keys, e\&.g\&. from previous \fBkdbGet()\fP calls\&. The newly retrieved Keys will be appended using \fBksAppendKey()\fP\&.
.PP
If not done earlier, \fBkdbGet()\fP will fully retrieve all keys under the \fCparentKey\fP folder recursively (See Optimization below when it will not be done)\&. Cascading Keys (starting with /) will retrieve the same path in all namespaces\&. \fC/\fP will retrieve all Keys in \fChandle\fP\&.
.PP
It is recommended to use the most specific \fCparentKey\fP possible\&. (e\&.g\&. using \fCsystem:/\fP is rarely the most specific)
.PP
\fBNote\fP
.RS 4
\fBkdbGet()\fP might retrieve more Keys than requested which are not below parentKey or even in a different namespace\&. These keys, except of \fCproc:/\fP keys, must be passed to calls of \fBkdbSet()\fP, otherwise they will be lost\&. This stems from the fact that the user has the only copy of the whole configuration and backends only write configuration that was passed to them\&. For example, if you \fBkdbGet()\fP 'system:/mountpoint/interest' you will not only get all Keys below system:/mountpoint/interest, but also all Keys below system:/mountpoint (if system:/mountpoint is a mountpoint as the name suggests, but system:/mountpoint/interest is not a mountpoint)\&. Make sure to not touch or remove Keys outside the Keys of interest, because others may need them!
.RE
.PP
\fBExample:\fP
.RS 4
This example demonstrates the typical usecase within an application (without error handling)\&.
.RE
.PP
.PP
.nf

#include <kdb\&.h>
#include <stdio\&.h>

int main (void)
{
        KeySet * myConfig = ksNew (0, KS_END);

        // for error handling see kdbget_error\&.c

        // clang-format off
Key * key = keyNew ("/sw/tests/myapp/#0/current/",  KEY_END);
KDB * handle = kdbOpen (NULL, key);
kdbGet (handle, myConfig, key);
Key * result = ksLookupByName (myConfig, "/sw/tests/myapp/#0/current/testkey1", 0);
        // clang-format on

        keyDel (key);

        const char * key_name = keyName (result);
        const char * key_value = keyString (result);
        const char * key_comment = keyString (keyGetMeta (result, "comment/#0"));
        printf ("key: %s value: %s comment: %s\n", key_name, key_value, key_comment);

        ksDel (myConfig); // delete the in-memory configuration


        // maybe you want kdbSet() myConfig here

        kdbClose (handle, 0); // no more affairs with the key database\&.
}
.fi
.PP
.PP
When a backend fails \fBkdbGet()\fP will return -1 with all error and warning information in the \fCparentKey\fP\&. The parameter \fCreturned\fP will not be changed\&.
.PP
\fBOptimization:\fP
.RS 4
In the first run of kdbGet all requested (or more) Keys are retrieved\&. On subsequent calls only the Keys are retrieved where something was changed inside the \fBKey\fP database\&. The other Keys stay in the \fBKeySet\fP returned as passed\&.
.RE
.PP
It is your responsibility to save the original \fBKeySet\fP if you need it afterwards\&.
.PP
If you want to be sure to get a fresh \fBKeySet\fP again, you need to open a second handle to the \fBKey\fP database using \fBkdbOpen()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIparentKey\fP Keys below \fCparentKey\fP will be retrieved from \fChandle\fP\&. It is also used to add warnings and set error information\&. 
.br
\fIks\fP the (pre-initialized) \fBKeySet\fP returned with all keys found will not be changed on error or if no update is required
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if the Keys were retrieved successfully\&. There might be warnings attached to the parentKey! Depending on your use case, you might need to treat them as errors! 
.br
\fI0\fP if there was no update - no changes are made to the \fBKeySet\fP then\&. There might be warnings attached to the parentKey! Depending on your use case, you might need to treat them as erorrs! 
.br
\fI-1\fP on failure - no changes are made to the \fBKeySet\fP then
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBksLookup()\fP, \fBksLookupByName()\fP for powerful lookups after the \fBKeySet\fP was retrieved 
.PP
\fBkdbOpen()\fP which needs to be called before 
.PP
\fBkdbSet()\fP to save the configuration afterwards 
.PP
\fBkdbClose()\fP to finish affairs with the \fBKey\fP database\&.
.RE
.PP
.PP
.nf

#include <kdb\&.hpp>

#include <keyio\&.hpp>

using namespace kdb;

int main ()
{
        KeySet config;
        KDB kdb;
        kdb\&.get (config, "/sw/MyApp");

        Key k = config\&.lookup ("/sw/MyApp/mykey");
        if (k)
        {
                std::cout << k << " is " << k\&.get<int> () << std::endl;
        }
        else
        {
                std::cerr << "No key found" << std::endl;
                return 1;
        }
}
.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIreturned\fP the keyset where the keys will be in 
.br
\fIkeyname\fP the root keyname which should be used to get keys below it
.RE
.PP
\fBReturn values\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if there were problems with the database
.RE
.PP
\fBSee also\fP
.RS 4
\fBKDB::get\fP (\fBKeySet\fP & returned, \fBKey\fP & parentKey) 
.RE
.PP

.PP
Reimplemented in \fBkdb::tools::merging::MergingKDB\fP\&.
.SS "void kdb::KDB::open (\fBKey\fP & errorKey)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Open the database\&. 
.PP
\fBParameters\fP
.RS 4
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP 
.RE
.PP

.SS "void kdb::KDB::open (\fBKeySet\fP & contract, \fBKey\fP & errorKey)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Open the database\&. 
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured 
.br
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
Opens the session with the \fBKey\fP database\&. 
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
You must always call this method before retrieving or committing any keys to the database\&. At the end of a program, after using the \fBKey\fP database (\fBKDB\fP), you must not forget to call \fBkdbClose()\fP to free resources\&.
.PP
The method will bootstrap itself in the following way\&. The first step is to open the default backend\&. With it \fCsystem:/elektra/mountpoints\fP will be loaded and all needed libraries and mountpoints will be determined\&. Then the global plugins and global keyset data from the \fCcontract\fP is processed\&. Finally, the libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP data structure will be initialized\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it:
.PP
.PP
.nf
void thread1 (void)
{
        Key * parent = keyNew ("/app/part1", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
void thread2 (void)
{
        Key * parent = keyNew ("/app/part2", KEY_END);
        KDB * h = kdbOpen (NULL, parent);
        // fetch keys and work with them
        kdbClose (h, parent);
}
.fi
.PP
 You don't need \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects\&.
.PP
\fBPrecondition\fP
.RS 4
errorKey must be a valid key, e\&.g\&. created with \fBkeyNew()\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIcontract\fP the contract that should be ensured before opening the \fBKDB\fP all data is copied and the \fBKeySet\fP can safely be used for e\&.g\&. \fBkdbGet()\fP later 
.br
\fIerrorKey\fP the key which holds errors and warnings which were issued
.RE
.PP
\fBReturns\fP
.RS 4
handle to the newly created \fBKDB\fP on success 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINULL\fP on failure
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbClose()\fP to \fBclose\fP the session of a \fBKey\fP database opened by \fBkdbOpen()\fP 
.RE
.PP

.SS "int kdb::KDB::set (\fBKeySet\fP & returned, \fBKey\fP & parentKey)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Set all keys below parentKey\&. If the keyname of the parentKey is invalid (e\&.g\&. empty) all keys will be set\&.
.PP
Set Keys to a \fBKey\fP database in an atomic and universal way\&. 
.PP
\fBPrecondition\fP
.RS 4
\fBkdbGet()\fP must be called before \fBkdbSet()\fP:
.IP "\(bu" 2
initially (after \fBkdbOpen()\fP)
.IP "\(bu" 2
after conflict errors in \fBkdbSet()\fP\&. 
.PP
.PP
The \fCreturned\fP \fBKeySet\fP must be a valid \fBKeySet\fP, e\&.g\&. constructed with \fBksNew()\fP\&. 
.PP
The \fCparentKey\fP \fBKey\fP must be a valid \fBKey\fP, e\&.g\&. constructed with \fBkeyNew()\fP\&. It must not have read-only name, value or metadata\&.
.RE
.PP
If you pass NULL on any parameter, \fBkdbSet()\fP will fail immediately without doing anything\&.
.PP
With \fCparentKey\fP you can specify which part of the given keyset is of interest for you\&. Then you promise to only modify or remove keys below this key\&. All others would be passed back as they were retrieved by \fBkdbGet()\fP\&. Cascading keys (starting with /) will set the path in all namespaces\&. \fC/\fP will commit all keys\&. This parameter is an optimization toonly save keys of mountpoints affected by the specified \fCparentKey\fP\&. This does not necessarily mean that only changes to keys below that \fCparentKey\fP are saved\&. Meta-names in \fCparentKey\fP will be rejected (error C01320)\&. Empty/Invalid Keys will also be rejected (error C01320)\&.
.PP
\fBErrors\fP
.RS 4
If \fCparentKey == NULL\fP or \fCparentKey\fP has read-only metadata, \fBkdbSet()\fP will immediately return the error code -1\&. In all other error cases the following happens:
.IP "\(bu" 2
\fBkdbSet()\fP will leave the \fBKeySet\fP's * internal cursor on the key that generated the error\&.
.IP "\(bu" 2
Error information will be written into the metadata of the parent key, if possible\&.
.IP "\(bu" 2
None of the keys are actually committed in this situation, i\&.e\&. no configuration file will be modified\&.
.PP
.RE
.PP
In case of errors you should present the error message to the user and let the user decide what to do\&. Possible solutions are:
.IP "\(bu" 2
remove the problematic key and use \fBkdbSet()\fP again (for validation or type errors)
.IP "\(bu" 2
change the value of the problematic key and use \fBkdbSet()\fP again (for validation errors)
.IP "\(bu" 2
do a \fBkdbGet()\fP (for conflicts, i\&.e\&. error C02000) and then
.IP "  \(bu" 4
set the same keyset again (in favour of what was set by this user)
.IP "  \(bu" 4
drop the old keyset (in favour of what was set from another application)
.IP "  \(bu" 4
merge the original, your own and the other keyset
.PP

.IP "\(bu" 2
export the configuration into a file (for unresolvable errors)
.IP "\(bu" 2
repeat the same kdbSet might be of limited use if the user does not explicitly request it, because temporary errors are rare and its unlikely that they fix themselves (e\&.g\&. disc full, permission problems)
.PP
.PP
\fBOptimization\fP
.RS 4
Each key is checked with \fBkeyNeedSync()\fP before being actually committed\&. If no key of a backend needs to be synced any affairs to backends are omitted and 0 is returned\&.
.RE
.PP
.PP
.nf
KeySet * myConfig = ksNew (0, KS_END);
Key * parentKey = keyNew ("system:/sw/MyApp", KEY_END);
KDB * handle = kdbOpen (NULL, parentKey);

kdbGet (handle, myConfig, parentKey); // kdbGet needs to be called first!
KeySet * base = ksDup (myConfig);     // save a copy of original keyset

// change the keys within myConfig
ksAppendKey (myConfig, keyNew ("system:/sw/MyApp/Test", KEY_VALUE, "5", KEY_END));

KeySet * ours = ksDup (myConfig); // save a copy of our keyset
KeySet * theirs;                  // needed for 3-way merging
int ret = kdbSet (handle, myConfig, parentKey);
while (ret == -1) // as long as we have an error
{
        int strategy = showElektraErrorDialog (parentKey);
        theirs = ksDup (ours);
        kdbGet (handle, theirs, parentKey); // refresh key database
        KeySet * result = elektraMerge(
                ksCut(ours, parentKey), parentKey,
                ksCut(theirs, parentKey), parentKey,
                ksCut(base, parentKey), parentKey,
                parentKey, strategy, parentKey);
        int numberOfConflicts = getConflicts (parentKey);
        ksDel (theirs);
        if (result != NULL) {
                ret = kdbSet (handle, result, parentKey);
        } else {
                // an error happened while merging
                if (numberOfConflicts > 0 && strategy == MERGE_STRATEGY_ABORT)
                {
                        // Error due to merge conflicts
                        ret = -1;
                }
                else
                {
                        // Internal errors, out of memory etc\&.
                        ret = -1;
                }
        }
}


ksDel (ours);
ksDel (base);
ksDel (myConfig); // delete the in-memory configuration

kdbClose (handle, parentKey); // no more affairs with the key database\&.
keyDel (parentKey);
.fi
.PP
 showElektraErrorDialog() and doElektraMerge() need to be implemented by the user of Elektra\&. For doElektraMerge a 3-way merge algorithm exists in libelektra-tools\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIks\fP a \fBKeySet\fP which should contain changed keys, otherwise nothing is done 
.br
\fIparentKey\fP Keys below \fCparentKey\fP will be set to \fChandle\fP\&. It is also used to add warnings and set error information\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP if nothing had to be done, no changes in \fBKDB\fP 
.br
\fI-1\fP on failure, no changes in \fBKDB\fP, an error will be set on \fCparentKey\fP if possible (see 'Errors' above)
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbOpen()\fP for getting \fChandle\fP 
.PP
\fBkdbClose()\fP that must be called afterwards 
.PP
\fBksCurrent()\fP contains the error \fBKey\fP
.RE
.PP
\fBReturn values\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated
.RE
.PP
\fBParameters\fP
.RS 4
\fIreturned\fP the keyset where the keys are passed to the user 
.br
\fIparentKey\fP the parentKey of returned
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if there were problems with the database 
.RE
.PP

.SS "int kdb::KDB::set (\fBKeySet\fP & returned, std::string const & keyname)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Set all keys below keyname\&. If the keyname of the parentKey is invalid (e\&.g\&. empty) all keys will be set\&.
.PP
Set Keys to a \fBKey\fP database in an atomic and universal way\&. 
.PP
\fBPrecondition\fP
.RS 4
\fBkdbGet()\fP must be called before \fBkdbSet()\fP:
.IP "\(bu" 2
initially (after \fBkdbOpen()\fP)
.IP "\(bu" 2
after conflict errors in \fBkdbSet()\fP\&. 
.PP
.PP
The \fCreturned\fP \fBKeySet\fP must be a valid \fBKeySet\fP, e\&.g\&. constructed with \fBksNew()\fP\&. 
.PP
The \fCparentKey\fP \fBKey\fP must be a valid \fBKey\fP, e\&.g\&. constructed with \fBkeyNew()\fP\&. It must not have read-only name, value or metadata\&.
.RE
.PP
If you pass NULL on any parameter, \fBkdbSet()\fP will fail immediately without doing anything\&.
.PP
With \fCparentKey\fP you can specify which part of the given keyset is of interest for you\&. Then you promise to only modify or remove keys below this key\&. All others would be passed back as they were retrieved by \fBkdbGet()\fP\&. Cascading keys (starting with /) will set the path in all namespaces\&. \fC/\fP will commit all keys\&. This parameter is an optimization toonly save keys of mountpoints affected by the specified \fCparentKey\fP\&. This does not necessarily mean that only changes to keys below that \fCparentKey\fP are saved\&. Meta-names in \fCparentKey\fP will be rejected (error C01320)\&. Empty/Invalid Keys will also be rejected (error C01320)\&.
.PP
\fBErrors\fP
.RS 4
If \fCparentKey == NULL\fP or \fCparentKey\fP has read-only metadata, \fBkdbSet()\fP will immediately return the error code -1\&. In all other error cases the following happens:
.IP "\(bu" 2
\fBkdbSet()\fP will leave the \fBKeySet\fP's * internal cursor on the key that generated the error\&.
.IP "\(bu" 2
Error information will be written into the metadata of the parent key, if possible\&.
.IP "\(bu" 2
None of the keys are actually committed in this situation, i\&.e\&. no configuration file will be modified\&.
.PP
.RE
.PP
In case of errors you should present the error message to the user and let the user decide what to do\&. Possible solutions are:
.IP "\(bu" 2
remove the problematic key and use \fBkdbSet()\fP again (for validation or type errors)
.IP "\(bu" 2
change the value of the problematic key and use \fBkdbSet()\fP again (for validation errors)
.IP "\(bu" 2
do a \fBkdbGet()\fP (for conflicts, i\&.e\&. error C02000) and then
.IP "  \(bu" 4
set the same keyset again (in favour of what was set by this user)
.IP "  \(bu" 4
drop the old keyset (in favour of what was set from another application)
.IP "  \(bu" 4
merge the original, your own and the other keyset
.PP

.IP "\(bu" 2
export the configuration into a file (for unresolvable errors)
.IP "\(bu" 2
repeat the same kdbSet might be of limited use if the user does not explicitly request it, because temporary errors are rare and its unlikely that they fix themselves (e\&.g\&. disc full, permission problems)
.PP
.PP
\fBOptimization\fP
.RS 4
Each key is checked with \fBkeyNeedSync()\fP before being actually committed\&. If no key of a backend needs to be synced any affairs to backends are omitted and 0 is returned\&.
.RE
.PP
.PP
.nf
KeySet * myConfig = ksNew (0, KS_END);
Key * parentKey = keyNew ("system:/sw/MyApp", KEY_END);
KDB * handle = kdbOpen (NULL, parentKey);

kdbGet (handle, myConfig, parentKey); // kdbGet needs to be called first!
KeySet * base = ksDup (myConfig);     // save a copy of original keyset

// change the keys within myConfig
ksAppendKey (myConfig, keyNew ("system:/sw/MyApp/Test", KEY_VALUE, "5", KEY_END));

KeySet * ours = ksDup (myConfig); // save a copy of our keyset
KeySet * theirs;                  // needed for 3-way merging
int ret = kdbSet (handle, myConfig, parentKey);
while (ret == -1) // as long as we have an error
{
        int strategy = showElektraErrorDialog (parentKey);
        theirs = ksDup (ours);
        kdbGet (handle, theirs, parentKey); // refresh key database
        KeySet * result = elektraMerge(
                ksCut(ours, parentKey), parentKey,
                ksCut(theirs, parentKey), parentKey,
                ksCut(base, parentKey), parentKey,
                parentKey, strategy, parentKey);
        int numberOfConflicts = getConflicts (parentKey);
        ksDel (theirs);
        if (result != NULL) {
                ret = kdbSet (handle, result, parentKey);
        } else {
                // an error happened while merging
                if (numberOfConflicts > 0 && strategy == MERGE_STRATEGY_ABORT)
                {
                        // Error due to merge conflicts
                        ret = -1;
                }
                else
                {
                        // Internal errors, out of memory etc\&.
                        ret = -1;
                }
        }
}


ksDel (ours);
ksDel (base);
ksDel (myConfig); // delete the in-memory configuration

kdbClose (handle, parentKey); // no more affairs with the key database\&.
keyDel (parentKey);
.fi
.PP
 showElektraErrorDialog() and doElektraMerge() need to be implemented by the user of Elektra\&. For doElektraMerge a 3-way merge algorithm exists in libelektra-tools\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIks\fP a \fBKeySet\fP which should contain changed keys, otherwise nothing is done 
.br
\fIparentKey\fP Keys below \fCparentKey\fP will be set to \fChandle\fP\&. It is also used to add warnings and set error information\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP if nothing had to be done, no changes in \fBKDB\fP 
.br
\fI-1\fP on failure, no changes in \fBKDB\fP, an error will be set on \fCparentKey\fP if possible (see 'Errors' above)
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkdbOpen()\fP for getting \fChandle\fP 
.PP
\fBkdbClose()\fP that must be called afterwards 
.PP
\fBksCurrent()\fP contains the error \fBKey\fP
.RE
.PP
\fBReturn values\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated
.RE
.PP
\fBParameters\fP
.RS 4
\fIreturned\fP the keyset where the keys will be in 
.br
\fIkeyname\fP the keyname below the names should be set
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKDBException\fP if there were problems with the database 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
