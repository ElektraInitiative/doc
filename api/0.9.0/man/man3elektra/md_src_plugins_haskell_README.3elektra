.TH "md_src_plugins_haskell_README" 3elektra "Tue Aug 6 2019" "Version 0.9.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_haskell_READMEPlugin: haskell 
 \- 
.IP "\(bu" 2
infos = Information about the haskell plugin is in keys below
.IP "\(bu" 2
infos/author = e1528532 e1528532@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = getstorage setstorage
.IP "\(bu" 2
infos/status = maintained memleak experimental
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = base for haskell plugins
.PP
.PP
A plugin which takes care about initializing the haskell run-time\&.
.PP
.SS "Usage"
.PP
This plugin on its own provides a minimalistic implementation to test the basic functionality, but acts as a base for developing further haskell plugins\&. To be precise, the following files are required and should use the following naming scheme, with \fC<PLUGIN_NAME>\fP being the name of this plugin (\fChaskell\fP in this case):
.PP
.IP "\(bu" 2
CMakeLists\&.txt which includes and calls the LibAddHaskellPlugin macro
.IP "\(bu" 2
\fC<PLUGIN_NAME>\&.cabal\&.in\fP which is the cabal build file for the plugin, ensure that:
.IP "  \(bu" 4
\fChs-source-dirs:\fP is set to \fC'@CMAKE_CURRENT_SOURCE_DIR@'\fP
.IP "  \(bu" 4
\fCbuild-depends:\fP includes \fClibelektra-haskell\fP for the haskell bindings
.IP "  \(bu" 4
\fCbuild-type:\fP is set to \fCCustom\fP
.IP "  \(bu" 4
\fC@CABAL_CUSTOM_SETUP@\fP is included somewhere in case the default Setup\&.hs is used
.PP

.IP "\(bu" 2
\fCtestmod_<PLUGIN_NAME>\&.c\fP which includes the tests for the plugin
.PP
.PP
Use the cmake command add_haskell_plugin which can be used by including LibAddHaskellPlugin\&. This command will take care about the proper linking of your haskell plugin\&. Furthermore it uses the c wrapper provided by this plugin so this doesn't have to be done again\&.
.PP
By default plugins get built in a cabal sandbox shared with all other Haskell plugins- and the Haskell bindings to speed up compilation by compiling commonly used dependencies just once\&. Dependencies are automatically resolved according to the cabal build configuration\&.
.PP
.SS "Dependencies"
.PP
.IP "\(bu" 2
Elektra's haskell bindings
.IP "\(bu" 2
ghc, tested with 8\&.1\&.2, may work with older versions as well
.IP "\(bu" 2
ghc-pkg, usually bundled with ghc
.IP "\(bu" 2
cabal, the haskell build system, usually bundled with ghc
.PP
.PP
.SS "Limitations"
.PP
Currently the Haskell plugin only executes tests written in C and not directly in Haskell\&.
.PP
.SS "Other"
.PP
Unfortunately the haskell runtime itself leaks some memory, but as haskell plugins are generally executed in an isolated process it should not matter too much\&. 
