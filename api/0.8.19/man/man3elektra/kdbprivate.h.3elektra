.TH "kdbprivate.h" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdbprivate.h \- 
.PP
Private declarations\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <kdb\&.h>\fP
.br
\fC#include <kdbconfig\&.h>\fP
.br
\fC#include <kdbextension\&.h>\fP
.br
\fC#include <kdbhelper\&.h>\fP
.br
\fC#include <kdbmacros\&.h>\fP
.br
\fC#include <kdbplugin\&.h>\fP
.br
\fC#include <kdbproposal\&.h>\fP
.br
\fC#include <kdbtypes\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBKEYSET_SIZE\fP   16"
.br
.RI "\fIThe minimal allocation size of a keyset inclusive NULL byte\&. \fP"
.ti -1c
.RI "#define \fBNR_OF_PLUGINS\fP   10"
.br
.RI "\fIHow many plugins can exist in an backend\&. \fP"
.ti -1c
.RI "#define \fBCOMMIT_PLUGIN\fP   7"
.br
.RI "\fIThe index of the commit plugin\&. \fP"
.ti -1c
.RI "#define \fBSTORAGE_PLUGIN\fP   5"
.br
.RI "\fIThe index of the storage plugin\&. \fP"
.ti -1c
.RI "#define \fBRESOLVER_PLUGIN\fP   0"
.br
.RI "\fIThe index of the resolver plugin\&. \fP"
.ti -1c
.RI "#define \fBAPPROXIMATE_NR_OF_BACKENDS\fP   16"
.br
.RI "\fITrie optimization\&. \fP"
.ti -1c
.RI "#define \fBMAX_LEN_INT\fP   31"
.br
.RI "\fIThe maximum of how many characters an integer needs as decimal number\&. \fP"
.ti -1c
.RI "#define \fBKDB_SYSTEM_ELEKTRA\fP   'system/elektra'"
.br
.RI "\fIBackend mounting information\&. \fP"
.ti -1c
.RI "#define \fBtest_bit\fP(var, bit)   ((var) & (bit))"
.br
.RI "\fITest a bit\&. \fP"
.ti -1c
.RI "#define \fBset_bit\fP(var, bit)   ((var) |= (bit))"
.br
.RI "\fISet a bit\&. \fP"
.ti -1c
.RI "#define \fBclear_bit\fP(var, bit)   ((var) &= ~(bit))"
.br
.RI "\fIClear a bit\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBkeyflag_t\fP { \fBKEY_FLAG_SYNC\fP = 1, \fBKEY_FLAG_RO_NAME\fP = 1 << 1, \fBKEY_FLAG_RO_VALUE\fP = 1 << 2, \fBKEY_FLAG_RO_META\fP = 1 << 3 }"
.br
.RI "\fIKey Flags\&. \fP"
.ti -1c
.RI "enum \fBksflag_t\fP { \fBKS_FLAG_SYNC\fP = 1 }"
.br
.RI "\fIKs Flags\&. \fP"
.ti -1c
.RI "enum \fBGlobalpluginPositions\fP "
.br
.RI "\fIHelper for identifying global plugin positions\&. \fP"
.ti -1c
.RI "enum \fBsplitflag_t\fP { \fBSPLIT_FLAG_SYNC\fP = 1, \fBSPLIT_FLAG_CASCADING\fP = 1 << 1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "Split * \fBsplitNew\fP (void)"
.br
.RI "\fIAllocates a new split object\&. \fP"
.ti -1c
.RI "void \fBsplitDel\fP (Split *keysets)"
.br
.RI "\fIDelete a split object\&. \fP"
.ti -1c
.RI "void \fBsplitRemove\fP (Split *split, size_t where)"
.br
.RI "\fIRemove one part of split\&. \fP"
.ti -1c
.RI "ssize_t \fBsplitAppend\fP (Split *split, Backend *backend, Key *parentKey, int syncbits)"
.br
.RI "\fIIncreases the size of split and appends a new empty keyset\&. \fP"
.ti -1c
.RI "int \fBsplitBuildup\fP (Split *split, KDB *handle, Key *parentKey)"
.br
.RI "\fIWalks through kdb->split and adds all backends below parentKey to split\&. \fP"
.ti -1c
.RI "void \fBsplitUpdateFileName\fP (Split *split, KDB *handle, Key *key)"
.br
.RI "\fIUpdate the (configuration) file name for the parent key\&. \fP"
.ti -1c
.RI "int \fBsplitAppoint\fP (Split *split, KDB *handle, KeySet *ks)"
.br
.RI "\fIAppoints all keys from ks to yet unsynced splits\&. \fP"
.ti -1c
.RI "int \fBsplitGet\fP (Split *split, Key *warningKey, KDB *handle)"
.br
.RI "\fIDoes some work after getting of backends is finished\&. \fP"
.ti -1c
.RI "int \fBsplitMerge\fP (Split *split, KeySet *dest)"
.br
.RI "\fIMerges together all parts of split into dest\&. \fP"
.ti -1c
.RI "int \fBsplitDivide\fP (Split *split, KDB *handle, KeySet *ks)"
.br
.RI "\fISplits up the keysets and search for a sync bit in every key\&. \fP"
.ti -1c
.RI "int \fBsplitSync\fP (Split *split)"
.br
.RI "\fIAdd sync bits everywhere keys were removed/added\&. \fP"
.ti -1c
.RI "void \fBsplitPrepare\fP (Split *split)"
.br
.RI "\fIPrepares for \fBkdbSet()\fP mainloop afterwards\&. \fP"
.ti -1c
.RI "int \fBsplitUpdateSize\fP (Split *split)"
.br
.RI "\fIAlso update sizes after \fBkdbSet()\fP to recognize multiple \fBkdbSet()\fP attempts\&. \fP"
.ti -1c
.RI "Backend * \fBbackendOpen\fP (KeySet *elektra_config, KeySet *modules, Key *errorKey)"
.br
.RI "\fIBuilds a backend out of the configuration supplied from: \fP"
.ti -1c
.RI "Backend * \fBbackendOpenDefault\fP (KeySet *modules, const char *file, Key *errorKey)"
.br
.RI "\fIOpens a default backend using the plugin named KDB_RESOLVER and KDB_STORAGE\&. \fP"
.ti -1c
.RI "Backend * \fBbackendOpenModules\fP (KeySet *modules, Key *errorKey)"
.br
.ti -1c
.RI "Backend * \fBbackendOpenVersion\fP (Key *errorKey)"
.br
.RI "\fIOpens the internal version backend\&. \fP"
.ti -1c
.RI "int \fBbackendUpdateSize\fP (Backend *backend, Key *parent, int size)"
.br
.RI "\fIUpdate internal size in backend\&. \fP"
.ti -1c
.RI "int \fBelektraProcessPlugin\fP (Key *cur, int *pluginNumber, char **pluginName, char **referenceName, Key *errorKey)"
.br
.ti -1c
.RI "int \fBelektraProcessPlugins\fP (Plugin **plugins, KeySet *modules, KeySet *referencePlugins, KeySet *config, KeySet *systemConfig, Key *errorKey)"
.br
.RI "\fILoad a plugin\&. \fP"
.ti -1c
.RI "Plugin * \fBelektraPluginOpen\fP (const char *backendname, KeySet *modules, KeySet *config, Key *errorKey)"
.br
.RI "\fIOpens a plugin\&. \fP"
.ti -1c
.RI "int \fBtrieClose\fP (Trie *trie, Key *errorKey)"
.br
.RI "\fICloses the trie and all opened backends within\&. \fP"
.ti -1c
.RI "Backend * \fBtrieLookup\fP (Trie *trie, const Key *key)"
.br
.RI "\fIInternal Datastructure for mountpoints\&. \fP"
.ti -1c
.RI "int \fBmountOpen\fP (KDB *kdb, KeySet *config, KeySet *modules, Key *errorKey)"
.br
.RI "\fICreates a trie from a given configuration\&. \fP"
.ti -1c
.RI "int \fBmountDefault\fP (KDB *kdb, KeySet *modules, int inFallback, Key *errorKey)"
.br
.RI "\fIReopens the default backend and mounts the default backend if needed\&. \fP"
.ti -1c
.RI "int \fBmountModules\fP (KDB *kdb, KeySet *modules, Key *errorKey)"
.br
.RI "\fIMount all module configurations\&. \fP"
.ti -1c
.RI "int \fBmountVersion\fP (KDB *kdb, Key *errorKey)"
.br
.RI "\fIMount the version backend\&. \fP"
.ti -1c
.RI "int \fBmountBackend\fP (KDB *kdb, Backend *backend, Key *errorKey)"
.br
.RI "\fIMounts a backend into the trie\&. \fP"
.ti -1c
.RI "Key * \fBmountGetMountpoint\fP (KDB *handle, const Key *where)"
.br
.RI "\fILookup a mountpoint in a handle for a specific key\&. \fP"
.ti -1c
.RI "Backend * \fBmountGetBackend\fP (KDB *handle, const Key *key)"
.br
.RI "\fILookup a backend handle for a specific key\&. \fP"
.ti -1c
.RI "Key * \fBelektraKsPrev\fP (KeySet *ks)"
.br
.RI "\fIReturns the previous Key in a KeySet\&. \fP"
.ti -1c
.RI "Key * \fBelektraKsPopAtCursor\fP (KeySet *ks, cursor_t pos)"
.br
.RI "\fIPop key at given cursor position\&. \fP"
.ti -1c
.RI "int \fBelektraKeyLock\fP (Key *key, enum \fBelektraLockOptions\fP what)"
.br
.RI "\fIPermanently locks a part of the key\&. \fP"
.ti -1c
.RI "ssize_t \fBelektraMemcpy\fP (Key **array1, Key **array2, size_t size)"
.br
.RI "\fIInternal Methods for Elektra\&. \fP"
.ti -1c
.RI "ssize_t \fBelektraMemmove\fP (Key **array1, Key **array2, size_t size)"
.br
.RI "\fICopies the key array2 into where array1 points\&. \fP"
.ti -1c
.RI "char * \fBelektraStrNDup\fP (const char *s, size_t l)"
.br
.RI "\fICopy buffer into new allocated memory\&. \fP"
.ti -1c
.RI "int \fBelektraValidateKeyName\fP (const char *name, size_t size)"
.br
.RI "\fIValidates whether the supplied keyname is valid\&. \fP"
.ti -1c
.RI "KeySet * \fBelektraRenameKeys\fP (KeySet *config, const char *name)"
.br
.RI "\fITakes the first key and cuts off this common part for all other keys, instead name will be prepended\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Private declarations\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/LICENSE\&.md or http://www.libelektra.org) 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define clear_bit(var, bit)   ((var) &= ~(bit))"

.PP
Clear a bit\&. 
.PP
\fBSee also:\fP
.RS 4
\fBset_bit()\fP 
.RE
.PP

.SS "#define KDB_SYSTEM_ELEKTRA   'system/elektra'"

.PP
Backend mounting information\&. This key directory tells you where each backend is mounted to which mountpoint\&. 
.SS "#define KEYSET_SIZE   16"

.PP
The minimal allocation size of a keyset inclusive NULL byte\&. ksGetAlloc() will return one less because it says how much can actually be stored\&. 
.SS "#define MAX_LEN_INT   31"

.PP
The maximum of how many characters an integer needs as decimal number\&. 
.SS "#define NR_OF_PLUGINS   10"

.PP
How many plugins can exist in an backend\&. 
.SS "#define set_bit(var, bit)   ((var) |= (bit))"

.PP
Set a bit\&. 
.PP
\fBSee also:\fP
.RS 4
\fBclear_bit()\fP 
.RE
.PP

.SS "#define test_bit(var, bit)   ((var) & (bit))"

.PP
Test a bit\&. 
.PP
\fBSee also:\fP
.RS 4
\fBset_bit()\fP, \fBclear_bit()\fP 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBkeyflag_t\fP"

.PP
Key Flags\&. Store a synchronizer state so that the Elektra knows if something has changed or not\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKEY_FLAG_SYNC \fP\fP
Key need sync\&. If name, value or metadata are changed this flag will be set, so that the backend will sync the key to database\&. 
.TP
\fB\fIKEY_FLAG_RO_NAME \fP\fP
Read only flag for name\&. Key name is read only and not allowed to be changed\&. All attempts to change the name will lead to an error\&. Needed for metakeys and keys that are in a data structure that depends on name ordering\&. 
.TP
\fB\fIKEY_FLAG_RO_VALUE \fP\fP
Read only flag for value\&. Key value is read only and not allowed to be changed\&. All attempts to change the value will lead to an error\&. Needed for metakeys 
.TP
\fB\fIKEY_FLAG_RO_META \fP\fP
Read only flag for meta\&. Key meta is read only and not allowed to be changed\&. All attempts to change the value will lead to an error\&. Needed for metakeys\&. 
.SS "enum \fBksflag_t\fP"

.PP
Ks Flags\&. Store a synchronizer state so that the Elektra knows if something has changed or not\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKS_FLAG_SYNC \fP\fP
KeySet need sync\&. If keys were popped from the Keyset this flag will be set, so that the backend will sync the keys to database\&. 
.SS "enum \fBsplitflag_t\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISPLIT_FLAG_SYNC \fP\fP
KeySet in Split need sync\&. Is there any key in there which need to be synced? If keys were popped from the Keyset this flag will be set, so that the backend will sync the keys to database\&. 
.TP
\fB\fISPLIT_FLAG_CASCADING \fP\fP
Do we need relative checks? Is this a cascading backend? 
.SH "Function Documentation"
.PP 
.SS "Backend* backendOpen (KeySet *elektraConfig, KeySet *modules, Key *errorKey)"

.PP
Builds a backend out of the configuration supplied from: 
.PP
.nf
system/elektra/mountpoints/<name>

.fi
.PP
.PP
The root key must be like the above example\&. You do not need to rewind the keyset\&. But every key must be below the root key\&.
.PP
The internal consistency will be checked in this function\&. If necessary parts are missing, like no plugins, they cant be loaded or similar 0 will be returned\&.
.PP
\fBksCut()\fP is perfectly suitable for cutting out the configuration like needed\&.
.PP
\fBNote:\fP
.RS 4
The given KeySet will be deleted within the function, don't use it afterwards\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIelektraConfig\fP the configuration to work with\&. It is used to build up this backend\&. 
.br
\fImodules\fP used to load new modules or get references to existing one 
.br
\fIerrorKey\fP the key where an error and warnings are added
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a freshly allocated backend this could be the requested backend or a so called 'missing backend'\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if out of memory 
.RE
.PP

.SS "Backend* backendOpenDefault (KeySet *modules, const char *file, Key *errorKey)"

.PP
Opens a default backend using the plugin named KDB_RESOLVER and KDB_STORAGE\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodules\fP the modules to work with 
.br
\fIerrorKey\fP the key to issue warnings and errors to 
.RE
.PP
\fBReturns:\fP
.RS 4
the fresh allocated default backend or 0 if it failed 
.RE
.PP

.SS "Backend* backendOpenModules (KeySet *modules, Key *errorKey)"

.PP
\fBReturns:\fP
.RS 4
a backend which gives plugin configuration of the module which is currently point to\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fImodules\fP the modules to work with 
.br
\fIerrorKey\fP the key to issue warnings and errors to 
.RE
.PP

.SS "Backend* backendOpenVersion (Key *errorKey)"

.PP
Opens the internal version backend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP the key to issue warnings and errors to 
.RE
.PP
\fBReturns:\fP
.RS 4
the fresh allocated default backend or 0 if it failed 
.RE
.PP

.SS "int backendUpdateSize (Backend *backend, Key *parent, intsize)"

.PP
Update internal size in backend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbackend\fP the backend to update 
.br
\fIparent\fP for parent 
.br
\fIsize\fP to update (-1 default, 0 empty, >0 otherwise)
.RE
.PP
\fBPrecondition:\fP
.RS 4
parent must be serializable namespace
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if invalid parent (assert) 
.br
\fI0\fP on success 
.RE
.PP

.SS "int elektraKeyLock (Key *key, enum \fBelektraLockOptions\fPwhat)"

.PP
Permanently locks a part of the key\&. This can be:
.IP "\(bu" 2
KEY_FLAG_LOCK_NAME to lock the name
.IP "\(bu" 2
KEY_FLAG_LOCK_VALUE to lock the value
.IP "\(bu" 2
KEY_FLAG_LOCK_META to lock the metadata
.PP
.PP
To unlock the key, duplicate it\&.
.PP
It is also possible to lock when the key is created with \fBkeyNew()\fP\&.
.PP
Some data structures need to lock the key (most likely its name), so that the ordering does not get confused\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP which name should be locked
.RE
.PP
\fBSee also:\fP
.RS 4
\fBkeyNew()\fP, \fBkeyDup()\fP, \fBksAppendKey()\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI>0\fP the bits that were successfully locked 
.br
\fI0\fP if everything was locked before 
.br
\fI-1\fP if it could not be locked (nullpointer) 
.RE
.PP

.SS "Key* elektraKsPopAtCursor (KeySet *ks, cursor_tpos)"

.PP
Pop key at given cursor position\&. 
.PP
\fBParameters:\fP
.RS 4
\fIks\fP the keyset to pop key from 
.br
\fIc\fP where to pop
.RE
.PP
The internal cursor will be rewinded using \fBksRewind()\fP\&. You can use \fBksGetCursor()\fP and \fBksSetCursor()\fP jump back to the previous position\&. e\&.g\&. to pop at current position within \fBksNext()\fP loop: 
.PP
.nf
1 cursor_t c = ksGetCursor(ks);
2 keyDel (ksPopAtCursor(ks, c));
3 ksSetCursor(ks, c);
4 ksPrev(ks); // to have correct key after next ksNext()

.fi
.PP
.PP
\fBWarning:\fP
.RS 4
do not use, will be superseded by external iterator API
.RE
.PP
\fBReturns:\fP
.RS 4
the popped key 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if ks is 0 
.RE
.PP

.SS "Key* elektraKsPrev (KeySet *ks)"

.PP
Returns the previous Key in a KeySet\&. KeySets have an internal cursor that can be reset with \fBksRewind()\fP\&. Every time \fBksPrev()\fP is called the cursor is decremented and the new current Key is returned\&.
.PP
You'll get a NULL pointer if the key before begin of the KeySet was reached\&.
.PP
Don't delete the key, use \fBksPop()\fP if you want to delete it\&.
.PP
\fBReturns:\fP
.RS 4
the new current Key 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBksRewind()\fP, \fBksCurrent()\fP 
.RE
.PP

.SS "ssize_t elektraMemcpy (Key **array1, Key **array2, size_tsize)"

.PP
Internal Methods for Elektra\&. To use them: 
.PP
.nf
1 #include <kdbinternal\&.h>

.fi
.PP
.PP
There are some areas where libraries have to reimplement some basic functions to archive support for non-standard systems, for testing purposes or to provide a little more convenience\&. Copies the key array2 into where array1 points\&. It copies size elements\&.
.PP
Overlapping is prohibited, use \fBelektraMemmove()\fP instead\&.
.PP
\fBParameters:\fP
.RS 4
\fIarray1\fP the destination 
.br
\fIarray2\fP the source 
.br
\fIsize\fP how many pointer to Keys to copy 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on null pointers 
.br
\fI0\fP if nothing was done 
.RE
.PP
\fBReturns:\fP
.RS 4
size how many keys were copied 
.RE
.PP

.SS "ssize_t elektraMemmove (Key **array1, Key **array2, size_tsize)"

.PP
Copies the key array2 into where array1 points\&. It copies size elements\&.
.PP
Overlapping is ok\&. If they do not overlap consider \fBelektraMemcpy()\fP instead\&.
.PP
\fBParameters:\fP
.RS 4
\fIarray1\fP the destination 
.br
\fIarray2\fP the source 
.br
\fIsize\fP how many pointer to Keys to copy 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on null pointers 
.br
\fI0\fP if nothing was done 
.RE
.PP
\fBReturns:\fP
.RS 4
size how many keys were copied 
.RE
.PP

.SS "Plugin* elektraPluginOpen (const char *name, KeySet *modules, KeySet *config, Key *errorKey)"

.PP
Opens a plugin\&. The config will be used as is\&. So be sure to transfer ownership of the config to it, with e\&.g\&. \fBksDup()\fP\&. elektraPluginClose() will delete the config\&.
.PP
\fBReturns:\fP
.RS 4
a pointer to a new created plugin or 0 on error 
.RE
.PP

.SS "int elektraProcessPlugin (Key *cur, int *pluginNumber, char **pluginName, char **referenceName, Key *errorKey)"

.PP
\fBReturn values:\fP
.RS 4
\fI1\fP and an allocated string of the pluginName if a new plugins should be created\&. 
.br
\fI2\fP and an allocated string of the referenceName if an old plugin should be used 
.br
\fI3\fP and both if a new plugin should be created and made available for later back referencing\&. 
.br
\fI-1\fP on error 
.RE
.PP

.SS "int elektraProcessPlugins (Plugin **plugins, KeySet *modules, KeySet *referencePlugins, KeySet *config, KeySet *systemConfig, Key *errorKey)"

.PP
Load a plugin\&. The array of plugins must be set to 0\&. Its length is NR_OF_PLUGINS\&.
.PP
systemConfig will only be used, not deleted\&.
.PP
\fBParameters:\fP
.RS 4
\fIconfig\fP the config with the information how the plugins should be put together 
.br
\fIsystemConfig\fP the shared (system) config for the plugins\&. Every plugin additional get this config\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.RE
.PP

.SS "KeySet* elektraRenameKeys (KeySet *config, const char *name)"

.PP
Takes the first key and cuts off this common part for all other keys, instead name will be prepended\&. 
.PP
\fBReturns:\fP
.RS 4
a new allocated keyset with keys in user namespace\&.
.RE
.PP
The first key is removed in the resulting keyset\&. 
.SS "char* elektraStrNDup (const char *s, size_tl)"

.PP
Copy buffer into new allocated memory\&. You need to free the memory yourself\&.
.PP
This function also works with \\0 characters in the buffer\&. The length is taken as given, it must be correct\&.
.PP
\fBReturns:\fP
.RS 4
0 if out of memory, a pointer otherwise 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP must be a allocated buffer 
.br
\fIl\fP the length of s 
.RE
.PP

.SS "int elektraValidateKeyName (const char *name, size_tsize)"

.PP
Validates whether the supplied keyname is valid\&. The function looks for tangling escape characters in the end and for a minimum length\&.
.PP
Does not check for valid namespaces
.PP
\fBPrecondition:\fP
.RS 4
size must be at least 2
.RE
.PP
\fBParameters:\fP
.RS 4
\fIname\fP the key name that is to be checked 
.br
\fIsize\fP a elektraStrLen of the key name 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fItrue\fP if the supplied keyname part is valid 
.br
\fIfalse\fP if its invalid 
.RE
.PP

.SS "int mountBackend (KDB *kdb, Backend *backend, Key *errorKey)"

.PP
Mounts a backend into the trie\&. 
.PP
\fBPrecondition:\fP
.RS 4
user must pass correctly allocated backend 
.RE
.PP
\fBPostcondition:\fP
.RS 4
sets reference counter of backend
.RE
.PP
\fBWarning:\fP
.RS 4
in case of init and default backends, the reference counter needs to be modified \fIafter\fP calling mountBackend\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fIbackend\fP the backend to mount 
.br
\fIerrorKey\fP the key used to report warnings 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.br
\fI1\fP on success 
.RE
.PP

.SS "int mountDefault (KDB *kdb, KeySet *modules, intinFallback, Key *errorKey)"

.PP
Reopens the default backend and mounts the default backend if needed\&. 
.PP
\fBPrecondition:\fP
.RS 4
Default Backend is closed\&. mountOpen was executed before\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fImodules\fP the current list of loaded modules 
.br
\fIerrorKey\fP the key used to report warnings 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on error 
.br
\fI0\fP on success 
.RE
.PP

.SS "Backend* mountGetBackend (KDB *handle, const Key *key)"

.PP
Lookup a backend handle for a specific key\&. The required canonical name is ensured by using a key as parameter, which will transform the key to canonical representation\&.
.PP
Will return handle when no more specific KDB could be found\&.
.PP
If key is 0 or invalid the default backend will be returned\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP is the data structure, where the mounted directories are saved\&. 
.br
\fIkey\fP the key, that should be looked up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the backend handle associated with the key 
.RE
.PP

.SS "Key* mountGetMountpoint (KDB *handle, const Key *where)"

.PP
Lookup a mountpoint in a handle for a specific key\&. Will return a key representing the mountpoint or null if there is no appropriate mountpoint e\&.g\&. its the root mountpoint\&.
.PP
\fBExample:\fP
.RS 4

.PP
.nf
1 Key * key = keyNew ("system/template");
2 KDB * handle = kdbOpen();
3 Key *mountpoint=0;
4 mountpoint=kdbGetMountpoint(handle, key);
5 
6 printf("The backend I am using is %s mounted in %s\n",
7         keyValue(mountpoint),
8         keyName(mountpoint));
9 kdbClose (handle);
10 keyDel (key);

.fi
.PP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP is the data structure, where the mounted directories are saved\&. 
.br
\fIwhere\fP the key, that should be looked up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the mountpoint associated with the key 
.RE
.PP

.SS "int mountModules (KDB *kdb, KeySet *modules, Key *errorKey)"

.PP
Mount all module configurations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fImodules\fP the current list of loaded modules 
.br
\fIerrorKey\fP the key used to report warnings
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if not rootkey was found 
.br
\fI0\fP otherwise 
.RE
.PP

.SS "int mountOpen (KDB *kdb, KeySet *config, KeySet *modules, Key *errorKey)"

.PP
Creates a trie from a given configuration\&. The config will be deleted within this function\&.
.PP
is not allowed to be executed before
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fImodules\fP the current list of loaded modules 
.br
\fIconfig\fP the configuration which should be used to build up the trie\&. 
.br
\fIerrorKey\fP the key used to report warnings 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.br
\fI0\fP on success 
.RE
.PP

.SS "int mountVersion (KDB *kdb, Key *errorKey)"

.PP
Mount the version backend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fIerrorKey\fP the key used to report warnings
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP on success 
.RE
.PP

.SS "ssize_t splitAppend (Split *split, Backend *backend, Key *parentKey, intsyncbits)"

.PP
Increases the size of split and appends a new empty keyset\&. Initializes the element with the given parameters at size-1 to be used\&.
.PP
Will automatically resize split if needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIbackend\fP the backend which should be appended 
.br
\fIparentKey\fP the parentKey which should be appended 
.br
\fIsyncbits\fP the initial syncstate which should be appended
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if no split is found 
.RE
.PP
\fBReturns:\fP
.RS 4
the position of the new element: size-1 
.RE
.PP

.SS "int splitAppoint (Split *split, KDB *handle, KeySet *ks)"

.PP
Appoints all keys from ks to yet unsynced splits\&. 
.PP
\fBPrecondition:\fP
.RS 4
\fBsplitBuildup()\fP need to be executed before\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIhandle\fP to determine to which backend a key belongs 
.br
\fIks\fP the keyset to appoint to split
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI-1\fP if no backend was found for a key 
.RE
.PP

.SS "int splitBuildup (Split *split, KDB *kdb, Key *parentKey)"

.PP
Walks through kdb->split and adds all backends below parentKey to split\&. Sets syncbits to 2 if it is a default or root backend (which needs splitting)\&. The information is copied from kdb->split\&.
.PP
\fBPrecondition:\fP
.RS 4
split needs to be empty, directly after creation with \fBsplitNew()\fP\&.
.PP
there needs to be a valid defaultBackend but its ok not to have a trie inside KDB\&.
.PP
parentKey must be a valid key! (could be implemented more generally, but that would require splitting up of keysets of the same backend)
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP will get all backends appended 
.br
\fIkdb\fP the handle to get information about backends 
.br
\fIparentKey\fP the information below which key the backends are from interest
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP always 
.RE
.PP

.SS "void splitDel (Split *keysets)"

.PP
Delete a split object\&. Will free all allocated resources of a split keyset\&.
.PP
\fBParameters:\fP
.RS 4
\fIkeysets\fP the split object to work with 
.RE
.PP

.SS "int splitDivide (Split *split, KDB *handle, KeySet *ks)"

.PP
Splits up the keysets and search for a sync bit in every key\&. It does not check if there were removed keys, see \fBsplitSync()\fP for the next step\&.
.PP
It does not create new backends, this has to be done by buildup before\&.
.PP
\fBPrecondition:\fP
.RS 4
\fBsplitBuildup()\fP need to be executed before\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIhandle\fP to get information where the individual keys belong 
.br
\fIks\fP the keyset to divide
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if there were no sync bits 
.br
\fI1\fP if there were sync bits 
.br
\fI-1\fP if no backend was found for any key 
.RE
.PP

.SS "int splitGet (Split *split, Key *warningKey, KDB *handle)"

.PP
Does some work after getting of backends is finished\&. 
.IP "\(bu" 2
Update sizes
.IP "\(bu" 2
Removal of wrong keys
.PP
.PP
\fBPrecondition:\fP
.RS 4
\fBsplitAppoint()\fP needs to be executed before\&.
.RE
.PP
.IP "\(bu" 2
check if keys are in correct backend
.IP "\(bu" 2
remove syncbits
.IP "\(bu" 2
update sizes in the backends
.PP
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIwarningKey\fP postcondition violations are reported here 
.br
\fIhandle\fP the handle to preprocess the keys 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI-1\fP if no backend was found for a key or split->parents has invalid namespace 
.RE
.PP

.SS "int splitMerge (Split *split, KeySet *dest)"

.PP
Merges together all parts of split into dest\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIdest\fP the destination keyset where all keysets are appended\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.RE
.PP

.SS "Split* splitNew (void)"

.PP
Allocates a new split object\&. Splits up a keyset into multiple keysets where each of them will passed to the correct \fBkdbSet()\fP\&.
.PP
Initially the size is 0 and alloc is APPROXIMATE_NR_OF_BACKENDS\&.
.PP
\fBReturns:\fP
.RS 4
a fresh allocated split object
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsplitDel()\fP 
.RE
.PP

.SS "void splitPrepare (Split *split)"

.PP
Prepares for \fBkdbSet()\fP mainloop afterwards\&. All splits which do not need sync are removed and a deep copy of the remaining keysets is done\&.
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.RE
.PP

.SS "void splitRemove (Split *split, size_twhere)"

.PP
Remove one part of split\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.br
\fIwhere\fP the position to cut away
.RE
.PP
\fBPrecondition:\fP
.RS 4
where must be within the size of the split 
.RE
.PP
\fBPostcondition:\fP
.RS 4
split will be removed 
.RE
.PP

.SS "int splitSync (Split *split)"

.PP
Add sync bits everywhere keys were removed/added\&. 
.IP "\(bu" 2
checks if the size of a previous \fBkdbGet()\fP is unchanged\&.
.IP "\(bu" 2
checks if in correct state (\fBkdbGet()\fP needs to be executed before)
.PP
.PP
Only \fBsplitDivide()\fP together with this function can really decide if sync is needed or not\&.
.PP
\fBPrecondition:\fP
.RS 4
split needs to be processed with \fBsplitDivide()\fP before\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if \fBkdbSet()\fP is not needed 
.br
\fI1\fP if \fBkdbSet()\fP is needed 
.br
\fI-1\fP on wrong keys (also has assert, should not happen) 
.br
\fI-2\fP wrong spec state: \fBkdbGet()\fP was not executed before 
.br
\fI-3\fP wrong dir state: \fBkdbGet()\fP was not executed before 
.br
\fI-4\fP wrong user state: \fBkdbGet()\fP was not executed before 
.br
\fI-5\fP wrong system state: \fBkdbGet()\fP was not executed before 
.RE
.PP
\fBPrecondition:\fP
.RS 4
user/system was split before\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split object to work with 
.RE
.PP

.SS "void splitUpdateFileName (Split *split, KDB *handle, Key *key)"

.PP
Update the (configuration) file name for the parent key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsplit\fP the split to work with 
.br
\fIhandle\fP the handle to work with 
.br
\fIkey\fP the parentKey that should be updated (name must be correct) 
.RE
.PP

.SS "int splitUpdateSize (Split *split)"

.PP
Also update sizes after \fBkdbSet()\fP to recognize multiple \fBkdbSet()\fP attempts\&. 
.PP
\fBWarning:\fP
.RS 4
cant use the same code with splitGet because there is no default split part for \fBkdbSet()\fP\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
