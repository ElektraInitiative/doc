.TH "kdbhelper.h" 3elektra "Tue Feb 16 2016" "Version 0.8.15" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdbhelper.h \- 
.PP
Helper for memory management\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'kdbconfig\&.h'\fP
.br
\fC#include <kdbtypes\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBelektraMalloc\fP (size_t size)"
.br
.RI "\fIAllocate memory for Elektra\&. \fP"
.ti -1c
.RI "void * \fBelektraCalloc\fP (size_t size)"
.br
.RI "\fIAllocate memory for Elektra\&. \fP"
.ti -1c
.RI "void \fBelektraFree\fP (void *ptr)"
.br
.RI "\fIFree memory of elektra or its backends\&. \fP"
.ti -1c
.RI "char * \fBelektraStrDup\fP (const char *s)"
.br
.RI "\fICopy string into new allocated memory\&. \fP"
.ti -1c
.RI "int \fBelektraRealloc\fP (void **buffer, size_t size)"
.br
.RI "\fIReallocate Storage in a save way\&. \fP"
.ti -1c
.RI "char * \fBelektraFormat\fP (const char *format,\&.\&.\&.)"
.br
.RI "\fIDoes string formating in fresh allocated memory\&. \fP"
.ti -1c
.RI "char * \fBelektraVFormat\fP (const char *format, va_list arg_list)"
.br
.RI "\fIDoes string formating in fresh allocated memory\&. \fP"
.ti -1c
.RI "int \fBelektraStrCmp\fP (const char *s1, const char *s2)"
.br
.RI "\fICompare Strings\&. \fP"
.ti -1c
.RI "int \fBelektraStrCaseCmp\fP (const char *s1, const char *s2)"
.br
.RI "\fICompare Strings ignoring case\&. \fP"
.ti -1c
.RI "int \fBelektraMemCaseCmp\fP (const char *s1, const char *s2, size_t size)"
.br
.RI "\fICompare two memory regions but make cmp chars uppercase before comparision\&. \fP"
.ti -1c
.RI "size_t \fBelektraStrLen\fP (const char *s)"
.br
.RI "\fICalculates the length in bytes of a string\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Helper for memory management\&. 

Should be always preferred\&. Can be used for profiling and tracing\&.
.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/COPYING or http://www.libelektra.org) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void* elektraCalloc (size_tsize)"

.PP
Allocate memory for Elektra\&. Memory will be set to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP the requested size 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraMalloc\fP 
.RE
.PP

.SS "char* elektraFormat (const char *format, \&.\&.\&.)"

.PP
Does string formating in fresh allocated memory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP as in printf() 
.br
\fI\&.\&.\&.\fP as in printf()
.RE
.PP
\fBReturns:\fP
.RS 4
new allocated memory (free with elektraFree) 
.RE
.PP

.SS "void elektraFree (void *ptr)"

.PP
Free memory of elektra or its backends\&. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP the pointer to free
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraMalloc\fP 
.RE
.PP

.SS "void* elektraMalloc (size_tsize)"

.PP
Allocate memory for Elektra\&. 
.PP
.nf
1 if ((buffer = elektraMalloc (length)) == 0) {
2         // here comes the failure handler
3         // no allocation happened here, so don't use buffer
4 #if DEBUG
5         fprintf (stderr, "Allocation error");
6 #endif
7         // return with error
8 }

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP the requested size
.RE
.PP
This function is compatible to ANSI-C elektraMalloc 
.PP
\fBSee also:\fP
.RS 4
\fBelektraFree\fP 
.PP
\fBelektraCalloc\fP 
.RE
.PP

.SS "int elektraMemCaseCmp (const char *s1, const char *s2, size_tsize)"

.PP
Compare two memory regions but make cmp chars uppercase before comparision\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared 
.br
\fIsize\fP to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "int elektraRealloc (void **buffer, size_tsize)"

.PP
Reallocate Storage in a save way\&. 
.PP
.nf
1 if (elektraRealloc ((void **) & buffer, new_length) < 0) {
2         // here comes the failure handler
3         // you can still use the old buffer
4 #if DEBUG
5         fprintf (stderr, "Reallocation error\n");
6 #endif
7         elektraFree (buffer);
8         buffer = 0;
9         // return with error
10 }

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP is a pointer to a elektraMalloc 
.br
\fIsize\fP is the new size for the memory 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.br
\fI0\fP on success 
.RE
.PP

.SS "int elektraStrCaseCmp (const char *s1, const char *s2)"

.PP
Compare Strings ignoring case\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "int elektraStrCmp (const char *s1, const char *s2)"

.PP
Compare Strings\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "char* elektraStrDup (const char *s)"

.PP
Copy string into new allocated memory\&. You need to free the memory yourself\&.
.PP
\fBNote:\fP
.RS 4
that size is determined at runtime\&. So if you have a size information, don't use that function\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the null-terminated string to duplicate
.RE
.PP
\fBReturns:\fP
.RS 4
0 if out of memory, a pointer otherwise 
.RE
.PP
\fBPrecondition:\fP
.RS 4
s must be a c-string\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraFree\fP 
.PP
\fBelektraStrLen\fP 
.PP
\fBelektraStrNDup\fP 
.RE
.PP

.SS "size_t elektraStrLen (const char *s)"

.PP
Calculates the length in bytes of a string\&. This function differs from strlen() because it is Unicode and multibyte chars safe\&. While strlen() counts characters and ignores the final NULL, \fBelektraStrLen()\fP count bytes including the ending NULL\&.
.PP
It must not be used to search for / in the name, because it does not consider escaping\&. Instead use the unescaped name\&.
.PP
\fBSee also:\fP
.RS 4
\fBkeyUnescapedName()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the string to get the length from 
.RE
.PP
\fBReturns:\fP
.RS 4
number of bytes used by the string, including the final NULL\&. 
.RE
.PP

.SS "char* elektraVFormat (const char *format, va_listarg_list)"

.PP
Does string formating in fresh allocated memory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP as in vprintf() 
.br
\fIarg_list\fP as in vprintf()
.RE
.PP
\fBReturns:\fP
.RS 4
new allocated memory (free with elektraFree) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
