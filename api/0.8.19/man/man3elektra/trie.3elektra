.TH "Trie" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Trie \- 
.PP
The private trie structure\&.  

.in +1c
.ti -1c
.RI "Backend * \fBtrieLookup\fP (Trie *trie, const Key *key)"
.br
.RI "\fIInternal Datastructure for mountpoints\&. \fP"
.ti -1c
.RI "int \fBtrieClose\fP (Trie *trie, Key *errorKey)"
.br
.RI "\fICloses the trie and all opened backends within\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The private trie structure\&. 

A trie is a data structure which can handle the longest prefix matching very fast\&. This is exactly what needs to be done when using \fBkdbGet()\fP and \fBkdbSet()\fP in a hierarchy where backends are mounted - you need the backend mounted closest to the parentKey\&. 
.SH "Function Documentation"
.PP 
.SS "int trieClose (Trie *trie, Key *errorKey)"

.PP
Closes the trie and all opened backends within\&. 
.PP
\fBParameters:\fP
.RS 4
\fItrie\fP the trie to close 
.br
\fIerrorKey\fP the key used to report warnings
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP on success 
.RE
.PP

.SS "Backend* trieLookup (Trie *trie, const Key *key)"

.PP
Internal Datastructure for mountpoints\&. Lookups a backend inside the trie\&.
.PP
\fBReturns:\fP
.RS 4
the backend if found 
.PP
0 otherwise 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItrie\fP the trie object to work with 
.br
\fIkey\fP the name of this key will be looked up 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
