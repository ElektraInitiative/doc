.TH "highlevel" 3elektra "Tue Nov 26 2019" "Version 0.9.1" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
highlevel
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "Elektra * \fBelektraOpen\fP (const char *application, KeySet *defaults, KeySet *contract, ElektraError **error)"
.br
.RI "Initializes a new Elektra instance\&. "
.ti -1c
.RI "void \fBelektraFatalError\fP (Elektra *elektra, ElektraError *fatalError)"
.br
.RI "Promote an ElektraError to fatal and call the fatal error handler\&. "
.ti -1c
.RI "Key * \fBelektraHelpKey\fP (Elektra *elektra)"
.br
.RI "This function is only intended for use with code-generation\&. "
.ti -1c
.RI "void \fBelektraFatalErrorHandler\fP (Elektra *elektra, ElektraErrorHandler fatalErrorHandler)"
.br
.RI "Sets the fatal error handler that will be called, whenever a fatal error occurs\&. "
.ti -1c
.RI "void \fBelektraClose\fP (Elektra *elektra)"
.br
.RI "Releases all resources used by the given elektra instance\&. "
.ti -1c
.RI "kdb_long_long_t \fBelektraArraySize\fP (Elektra *elektra, const char *name)"
.br
.RI "Gets the size of an array\&. "
.ti -1c
.RI "Key * \fBelektraFindArrayElementKey\fP (Elektra *elektra, const char *name, kdb_long_long_t index, KDBType type)"
.br
.RI "Helper function for code generation\&. "
.ti -1c
.RI "const char * \fBelektraFindReferenceArrayElement\fP (Elektra *elektra, const char *name, kdb_long_long_t index)"
.br
.RI "Resolves the reference stored in a key\&. "
.ti -1c
.RI "KDBType \fBelektraGetArrayElementType\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Reads the type metadata of a given array element\&. "
.ti -1c
.RI "const char * \fBelektraGetRawStringArrayElement\fP (Elektra *elektra, const char *name, kdb_long_long_t index)"
.br
.RI "Get the raw string value of an array element key\&. "
.ti -1c
.RI "void \fBelektraSetRawStringArrayElement\fP (Elektra *elektra, const char *name, kdb_long_long_t index, const char *value, KDBType type, ElektraError **error)"
.br
.RI "Set the raw string value of an array element key\&. "
.ti -1c
.RI "const char * \fBelektraGetStringArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a string value array element\&. "
.ti -1c
.RI "kdb_boolean_t \fBelektraGetBooleanArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a boolean value array element\&. "
.ti -1c
.RI "kdb_char_t \fBelektraGetCharArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a char value array element\&. "
.ti -1c
.RI "kdb_octet_t \fBelektraGetOctetArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets an octet value array element\&. "
.ti -1c
.RI "kdb_short_t \fBelektraGetShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a short value array element\&. "
.ti -1c
.RI "kdb_unsigned_short_t \fBelektraGetUnsignedShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a unsigned short value array element\&. "
.ti -1c
.RI "kdb_long_t \fBelektraGetLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a long value array element\&. "
.ti -1c
.RI "kdb_unsigned_long_t \fBelektraGetUnsignedLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a unsigned long value array element\&. "
.ti -1c
.RI "kdb_long_long_t \fBelektraGetLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a long long value array element\&. "
.ti -1c
.RI "kdb_unsigned_long_long_t \fBelektraGetUnsignedLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a unsigned long long value array element\&. "
.ti -1c
.RI "kdb_float_t \fBelektraGetFloatArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a float value array element\&. "
.ti -1c
.RI "kdb_double_t \fBelektraGetDoubleArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a double value array element\&. "
.ti -1c
.RI "void \fBelektraSetStringArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, const char *value, ElektraError **error)"
.br
.RI "Sets a string value array element\&. "
.ti -1c
.RI "void \fBelektraSetBooleanArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_boolean_t value, ElektraError **error)"
.br
.RI "Sets a boolean value array element\&. "
.ti -1c
.RI "void \fBelektraSetCharArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_char_t value, ElektraError **error)"
.br
.RI "Sets a char value array element\&. "
.ti -1c
.RI "void \fBelektraSetOctetArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_octet_t value, ElektraError **error)"
.br
.RI "Sets an octet value array element\&. "
.ti -1c
.RI "void \fBelektraSetShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_short_t value, ElektraError **error)"
.br
.RI "Sets a short value array element\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_unsigned_short_t value, ElektraError **error)"
.br
.RI "Sets a unsigned short value array element\&. "
.ti -1c
.RI "void \fBelektraSetLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_long_t value, ElektraError **error)"
.br
.RI "Sets a long value array element\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_unsigned_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long value array element\&. "
.ti -1c
.RI "void \fBelektraSetLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_long_long_t value, ElektraError **error)"
.br
.RI "Sets a long long value array element\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_unsigned_long_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long long value array element\&. "
.ti -1c
.RI "void \fBelektraSetFloatArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_float_t value, ElektraError **error)"
.br
.RI "Sets a float value array element\&. "
.ti -1c
.RI "void \fBelektraSetDoubleArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_double_t value, ElektraError **error)"
.br
.RI "Sets a double value array element\&. "
.ti -1c
.RI "ElektraError * \fBelektraErrorPureWarning\fP (void)"
.br
.RI "Creates a dummy ElektraError struct to store warnings in\&. "
.ti -1c
.RI "const char * \fBelektraErrorCode\fP (const ElektraError *error)"
.br
.ti -1c
.RI "const char * \fBelektraErrorDescription\fP (const ElektraError *error)"
.br
.ti -1c
.RI "void \fBelektraErrorReset\fP (ElektraError **error)"
.br
.RI "Frees the memory used by the error and sets the referenced error variable to NULL\&. "
.ti -1c
.RI "Key * \fBelektraFindKey\fP (Elektra *elektra, const char *name, KDBType type)"
.br
.RI "Helper function for code generation\&. "
.ti -1c
.RI "const char * \fBelektraFindReference\fP (Elektra *elektra, const char *name)"
.br
.RI "Resolves the reference stored in a key\&. "
.ti -1c
.RI "KDBType \fBelektraGetType\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Reads the type metadata of a given key\&. "
.ti -1c
.RI "const char * \fBelektraGetRawString\fP (Elektra *elektra, const char *name)"
.br
.RI "Get the raw string value of a key\&. "
.ti -1c
.RI "void \fBelektraSetRawString\fP (Elektra *elektra, const char *name, const char *value, KDBType type, ElektraError **error)"
.br
.RI "Set the raw string value of a key\&. "
.ti -1c
.RI "const char * \fBelektraGetString\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a string value\&. "
.ti -1c
.RI "kdb_boolean_t \fBelektraGetBoolean\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a boolean value\&. "
.ti -1c
.RI "kdb_char_t \fBelektraGetChar\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a char value\&. "
.ti -1c
.RI "kdb_octet_t \fBelektraGetOctet\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets an octet value\&. "
.ti -1c
.RI "kdb_short_t \fBelektraGetShort\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a short value\&. "
.ti -1c
.RI "kdb_unsigned_short_t \fBelektraGetUnsignedShort\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a unsigned short value\&. "
.ti -1c
.RI "kdb_long_t \fBelektraGetLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a long value\&. "
.ti -1c
.RI "kdb_unsigned_long_t \fBelektraGetUnsignedLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a unsigned long value\&. "
.ti -1c
.RI "kdb_long_long_t \fBelektraGetLongLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a long long value\&. "
.ti -1c
.RI "kdb_unsigned_long_long_t \fBelektraGetUnsignedLongLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a long long value\&. "
.ti -1c
.RI "kdb_float_t \fBelektraGetFloat\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a float value\&. "
.ti -1c
.RI "kdb_double_t \fBelektraGetDouble\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a double value\&. "
.ti -1c
.RI "void \fBelektraSetString\fP (Elektra *elektra, const char *keyname, const char *value, ElektraError **error)"
.br
.RI "Sets a string value\&. "
.ti -1c
.RI "void \fBelektraSetBoolean\fP (Elektra *elektra, const char *keyname, kdb_boolean_t value, ElektraError **error)"
.br
.RI "Sets a boolean value\&. "
.ti -1c
.RI "void \fBelektraSetChar\fP (Elektra *elektra, const char *keyname, kdb_char_t value, ElektraError **error)"
.br
.RI "Sets a char value\&. "
.ti -1c
.RI "void \fBelektraSetOctet\fP (Elektra *elektra, const char *keyname, kdb_octet_t value, ElektraError **error)"
.br
.RI "Sets an octet value\&. "
.ti -1c
.RI "void \fBelektraSetShort\fP (Elektra *elektra, const char *keyname, kdb_short_t value, ElektraError **error)"
.br
.RI "Sets a short value\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedShort\fP (Elektra *elektra, const char *keyname, kdb_unsigned_short_t value, ElektraError **error)"
.br
.RI "Sets a unsigned short value\&. "
.ti -1c
.RI "void \fBelektraSetLong\fP (Elektra *elektra, const char *keyname, kdb_long_t value, ElektraError **error)"
.br
.RI "Sets a long value\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLong\fP (Elektra *elektra, const char *keyname, kdb_unsigned_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long value\&. "
.ti -1c
.RI "void \fBelektraSetLongLong\fP (Elektra *elektra, const char *keyname, kdb_long_long_t value, ElektraError **error)"
.br
.RI "Sets a long long value\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLongLong\fP (Elektra *elektra, const char *keyname, kdb_unsigned_long_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long long value\&. "
.ti -1c
.RI "void \fBelektraSetFloat\fP (Elektra *elektra, const char *keyname, kdb_float_t value, ElektraError **error)"
.br
.RI "Sets a float value\&. "
.ti -1c
.RI "void \fBelektraSetDouble\fP (Elektra *elektra, const char *keyname, kdb_double_t value, ElektraError **error)"
.br
.RI "Sets a double value\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "kdb_long_long_t elektraArraySize (Elektra * elektra, const char * name)"

.PP
Gets the size of an array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the size of the array, 0 is returned if the array is empty or doesn't exist 
.RE
.PP

.SS "void elektraClose (Elektra * elektra)"

.PP
Releases all resources used by the given elektra instance\&. The elektra instance must not be used anymore after calling this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.RE
.PP

.SS "const char* elektraErrorCode (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the error code of the given error 
.RE
.PP

.SS "const char* elektraErrorDescription (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the description for the given error 
.RE
.PP

.SS "ElektraError* elektraErrorPureWarning (void)"

.PP
Creates a dummy ElektraError struct to store warnings in\&. If \fBelektraErrorCode()\fP is called on the resulting struct, it will return NULL\&.
.PP
\fBReturns:\fP
.RS 4
A newly allocated ElektraError (free with \fBelektraFree()\fP)\&. 
.RE
.PP

.SS "void elektraFatalError (Elektra * elektra, ElektraError * fatalError)"

.PP
Promote an ElektraError to fatal and call the fatal error handler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP Elektra instance whose fatal error handler shall be used\&. 
.br
\fIfatalError\fP The error that will be raised\&. 
.RE
.PP

.SS "void elektraFatalErrorHandler (Elektra * elektra, ElektraErrorHandler fatalErrorHandler)"

.PP
Sets the fatal error handler that will be called, whenever a fatal error occurs\&. Errors occurring in a function, which does not take a pointer to ElektraError, are always considered fatal\&.
.PP
If this function returns, i\&.e\&. it does not call exit() or interrupt the thread of execution in some other way, the behaviour of the function from which the error originated is generally undefined\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.br
\fIfatalErrorHandler\fP The error handler that will be used henceforth\&. 
.RE
.PP

.SS "Key * elektraFindArrayElementKey (Elektra * elektra, const char * name, kdb_long_long_t index, KDBType type)"

.PP
Helper function for code generation\&. Finds an array element Key from its relative name and index\&. Also checks type metadata, if \fCtype\fP is not NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The relative name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.br
\fItype\fP The expected type metadata value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the Key referenced by \fCname\fP or NULL, if a fatal error occurs and the fatal error handler returns to this function The returned pointer remains valid until the KeySet inside \fCelektra\fP is modified\&. Calls to elektraSet*() functions may cause such modifications\&. In any case, it becomes invalid when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "Key * elektraFindKey (Elektra * elektra, const char * name, KDBType type)"

.PP
Helper function for code generation\&. Finds a Key from its relative name\&. Also checks type metadata, if \fCtype\fP is not NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The relative name of the key\&. 
.br
\fItype\fP The expected type metadata value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the Key referenced by \fCname\fP or NULL, if a fatal error occurs and the fatal error handler returns to this function The returned pointer remains valid until the KeySet inside \fCelektra\fP is modified\&. Calls to elektraSet*() functions may cause such modifications\&. In any case, it becomes invalid when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "const char * elektraFindReference (Elektra * elektra, const char * name)"

.PP
Resolves the reference stored in a key\&. 
.IP "1." 4
Get the raw string value\&.
.IP "2." 4
Resolve that reference\&.
.IP "3." 4
Return resulting keyname relative to the parent key of the given Elektra instance\&.
.PP
.PP
IMPORTANT: this method DOES NOT check the type metadata of the key, it is only intended to be used by the code-generation API\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the key\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the resolved version of the reference stored in the specified key (relative to the parent key of \fCelektra\fP) or NULL, if the key was not found, or the reference resolves two a key not below the parent key\&. The empty string is returned, if the value was the empty string (no resolution is attempted)\&. The returned pointer becomes invalid when this function is called again (even with the same arguments)\&. It is also invalidated when \fBelektraFindReferenceArrayElement()\fP or \fBelektraClose()\fP are called on \fCelektra\fP\&. 
.RE
.PP

.SS "const char * elektraFindReferenceArrayElement (Elektra * elektra, const char * name, kdb_long_long_t index)"

.PP
Resolves the reference stored in a key\&. 
.IP "1." 4
Get the raw string value\&.
.IP "2." 4
Resolve that reference\&.
.IP "3." 4
Return resulting keyname relative to the parent key of the given Elektra instance\&.
.PP
.PP
IMPORTANT: this method DOES NOT check the type metadata of the key, it is only intended to be used by the code-generation API\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the resolved version of the reference stored in the specified key (relative to the parent key of \fCelektra\fP) or NULL, if the key was not found, or the reference resolves two a key not below the parent key\&. The empty string is returned, if the value was the empty string (no resolution is attempted)\&. The returned pointer becomes invalid when this function is called again (even with the same arguments)\&. It is also invalidated when \fBelektraFindReference()\fP or \fBelektraClose()\fP are called on \fCelektra\fP\&. 
.RE
.PP

.SS "KDBType elektraGetArrayElementType (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Reads the type metadata of a given array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.br
\fIname\fP The name of the array\&. 
.br
\fIindex\fP The index of the array element whose type information shall be read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the KDBType of the key 
.RE
.PP

.SS "kdb_boolean_t elektraGetBoolean (Elektra * elektra, const char * keyname)"

.PP
Gets a boolean value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the boolean stored at the given key 
.RE
.PP

.SS "kdb_boolean_t elektraGetBooleanArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a boolean value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the boolean stored at the given array element 
.RE
.PP

.SS "kdb_char_t elektraGetChar (Elektra * elektra, const char * keyname)"

.PP
Gets a char value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the char stored at the given key 
.RE
.PP

.SS "kdb_char_t elektraGetCharArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a char value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the char stored at the given array element 
.RE
.PP

.SS "kdb_double_t elektraGetDouble (Elektra * elektra, const char * keyname)"

.PP
Gets a double value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the double stored at the given key 
.RE
.PP

.SS "kdb_double_t elektraGetDoubleArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a double value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the double stored at the given array element 
.RE
.PP

.SS "kdb_float_t elektraGetFloat (Elektra * elektra, const char * keyname)"

.PP
Gets a float value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the float stored at the given key 
.RE
.PP

.SS "kdb_float_t elektraGetFloatArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a float value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the float stored at the given array element 
.RE
.PP

.SS "kdb_long_t elektraGetLong (Elektra * elektra, const char * keyname)"

.PP
Gets a long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long stored at the given key 
.RE
.PP

.SS "kdb_long_t elektraGetLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long stored at the given array element 
.RE
.PP

.SS "kdb_long_long_t elektraGetLongLong (Elektra * elektra, const char * keyname)"

.PP
Gets a long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long long stored at the given key 
.RE
.PP

.SS "kdb_long_long_t elektraGetLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long long stored at the given array element 
.RE
.PP

.SS "kdb_octet_t elektraGetOctet (Elektra * elektra, const char * keyname)"

.PP
Gets an octet value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the octet stored at the given key 
.RE
.PP

.SS "kdb_octet_t elektraGetOctetArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets an octet value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the octet stored at the given array element 
.RE
.PP

.SS "const char * elektraGetRawString (Elektra * elektra, const char * name)"

.PP
Get the raw string value of a key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the key\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the raw value of the specified key or NULL, if the key was not found The returned pointer remains valid until the internal state of \fCelektra\fP is modified\&. Calls to elektraSet*() functions may cause such modifications\&. In any case, it becomes invalid when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "const char * elektraGetRawStringArrayElement (Elektra * elektra, const char * name, kdb_long_long_t index)"

.PP
Get the raw string value of an array element key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the raw value of the specified key, or NULL if the key was not found The returned pointer remains valid until the internal state of \fCelektra\fP is modified\&. Calls to elektraSet*() functions may cause such modifications\&. In any case, it becomes invalid when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "kdb_short_t elektraGetShort (Elektra * elektra, const char * keyname)"

.PP
Gets a short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the short stored at the given key 
.RE
.PP

.SS "kdb_short_t elektraGetShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the short stored at the given array element 
.RE
.PP

.SS "const char * elektraGetString (Elektra * elektra, const char * keyname)"

.PP
Gets a string value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the string stored at the given key The returned pointer remains valid until the internal state of \fCelektra\fP is modified\&. Calls to elektraSet*() functions may cause such modifications\&. In any case, it becomes invalid when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "const char * elektraGetStringArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a string value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the string stored at the given array element The returned pointer remains valid until the internal state of \fCelektra\fP is modified\&. Calls to elektraSet*() functions may cause such modifications\&. In any case, it becomes invalid when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "KDBType elektraGetType (Elektra * elektra, const char * keyname)"

.PP
Reads the type metadata of a given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.br
\fIkeyname\fP The name of the key whose type information shall be read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the KDBType of the key 
.RE
.PP

.SS "kdb_unsigned_long_t elektraGetUnsignedLong (Elektra * elektra, const char * keyname)"

.PP
Gets a unsigned long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long stored at the given key 
.RE
.PP

.SS "kdb_unsigned_long_t elektraGetUnsignedLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a unsigned long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long stored at the given array element 
.RE
.PP

.SS "kdb_unsigned_long_long_t elektraGetUnsignedLongLong (Elektra * elektra, const char * keyname)"

.PP
Gets a long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long long stored at the given key 
.RE
.PP

.SS "kdb_unsigned_long_long_t elektraGetUnsignedLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a unsigned long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long long stored at the given array element 
.RE
.PP

.SS "kdb_unsigned_short_t elektraGetUnsignedShort (Elektra * elektra, const char * keyname)"

.PP
Gets a unsigned short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned short stored at the given key 
.RE
.PP

.SS "kdb_unsigned_short_t elektraGetUnsignedShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a unsigned short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned short stored at the given array element 
.RE
.PP

.SS "Key * elektraHelpKey (Elektra * elektra)"

.PP
This function is only intended for use with code-generation\&. It looks for the key proc/elektra/gopts/help (absolute name) created by gopts, and returns it if found\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to check
.RE
.PP
\fBReturns:\fP
.RS 4
the help key if found, NULL otherwise The pointer returned may become invalid, when any \fCelektraSet*()\fP function or any other function that modifies the state of \fCelektra\fP is called\&. It will always become invalid, when \fBelektraClose()\fP is called on \fCelektra\fP\&. 
.RE
.PP

.SS "Elektra * elektraOpen (const char * application, KeySet * defaults, KeySet * contract, ElektraError ** error)"

.PP
Initializes a new Elektra instance\&. To free the memory allocated by this function call \fBelektraClose()\fP, once you are done using this instance\&.
.PP
\fBParameters:\fP
.RS 4
\fIapplication\fP Your application's base name\&. The the simplest version for this string is '/sw/org/<appname>/#0/current', where '<appname>' is a unique name for your application\&. For more information see the man-page elektra-key-names(7)\&. 
.br
\fIdefaults\fP A KeySet containing default values\&. If you pass NULL, trying to read a non-existent value will cause a fatal error\&. It is recommended, to only pass NULL, if you are using a specification, which provides default values inside of the KDB\&. If a key in this KeySet doesn't have a value, we will use the value of the 'default' metakey of this key\&. 
.br
\fIcontract\fP Will be passed to \fBkdbEnsure()\fP as the contract\&. If it is NULL, \fBkdbEnsure()\fP won't be called\&. Unlike \fCdefaults\fP, this KeySet is consumed and must not be used afterwards\&. 
.br
\fIerror\fP If an error occurs during initialization of the Elektra instance, this pointer will be used to report the error\&.
.RE
.PP
\fBReturns:\fP
.RS 4
An Elektra instance initialized for the application (free with \fBelektraClose()\fP)\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraClose\fP 
.PP
\fBkdbEnsure\fP 
.RE
.PP

.SS "void elektraSetBoolean (Elektra * elektra, const char * keyname, kdb_boolean_t value, ElektraError ** error)"

.PP
Sets a boolean value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new boolean value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetBooleanArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_boolean_t value, ElektraError ** error)"

.PP
Sets a boolean value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new boolean value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetChar (Elektra * elektra, const char * keyname, kdb_char_t value, ElektraError ** error)"

.PP
Sets a char value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new char value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetCharArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_char_t value, ElektraError ** error)"

.PP
Sets a char value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new char value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetDouble (Elektra * elektra, const char * keyname, kdb_double_t value, ElektraError ** error)"

.PP
Sets a double value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new double value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetDoubleArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_double_t value, ElektraError ** error)"

.PP
Sets a double value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new double value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetFloat (Elektra * elektra, const char * keyname, kdb_float_t value, ElektraError ** error)"

.PP
Sets a float value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new float value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetFloatArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_float_t value, ElektraError ** error)"

.PP
Sets a float value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new float value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLong (Elektra * elektra, const char * keyname, kdb_long_t value, ElektraError ** error)"

.PP
Sets a long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_long_t value, ElektraError ** error)"

.PP
Sets a long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLongLong (Elektra * elektra, const char * keyname, kdb_long_long_t value, ElektraError ** error)"

.PP
Sets a long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_long_long_t value, ElektraError ** error)"

.PP
Sets a long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetOctet (Elektra * elektra, const char * keyname, kdb_octet_t value, ElektraError ** error)"

.PP
Sets an octet value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new octet value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetOctetArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_octet_t value, ElektraError ** error)"

.PP
Sets an octet value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new octet value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetRawString (Elektra * elektra, const char * name, const char * value, KDBType type, ElektraError ** error)"

.PP
Set the raw string value of a key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the key\&. 
.br
\fIvalue\fP The raw value to set\&. 
.br
\fItype\fP The type to set in the metadata of the key\&. 
.br
\fIerror\fP Pointer to an ElektraError\&. Will be set in case saving fails\&. 
.RE
.PP

.SS "void elektraSetRawStringArrayElement (Elektra * elektra, const char * name, kdb_long_long_t index, const char * value, KDBType type, ElektraError ** error)"

.PP
Set the raw string value of an array element key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.br
\fIvalue\fP The raw value to set\&. 
.br
\fItype\fP The type to set in the metadata of the (array element) key\&. 
.br
\fIerror\fP Pointer to an ElektraError\&. Will be set in case saving fails\&. 
.RE
.PP

.SS "void elektraSetShort (Elektra * elektra, const char * keyname, kdb_short_t value, ElektraError ** error)"

.PP
Sets a short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_short_t value, ElektraError ** error)"

.PP
Sets a short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetString (Elektra * elektra, const char * keyname, const char * value, ElektraError ** error)"

.PP
Sets a string value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new string value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetStringArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, const char * value, ElektraError ** error)"

.PP
Sets a string value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new string value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLong (Elektra * elektra, const char * keyname, kdb_unsigned_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new unsigned long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_unsigned_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new unsigned long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLongLong (Elektra * elektra, const char * keyname, kdb_unsigned_long_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new unsigned long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_unsigned_long_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new unsigned long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedShort (Elektra * elektra, const char * keyname, kdb_unsigned_short_t value, ElektraError ** error)"

.PP
Sets a unsigned short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new unsigned short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_unsigned_short_t value, ElektraError ** error)"

.PP
Sets a unsigned short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new unsigned short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
