.TH "kdbnotification.h" 3elektra "Sun May 13 2018" "Version 0.8.23" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdbnotification.h \- Elektra-Notification structures and declarations for application developers\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'kdb\&.h'\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBElektraNotificationChangeCallback\fP) (Key *key)"
.br
.RI "Callback function for key changes\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBelektraNotificationOpen\fP (KDB *kdb)"
.br
.RI "Initialize the notification system for the given KDB instance\&. "
.ti -1c
.RI "int \fBelektraNotificationClose\fP (KDB *kdb)"
.br
.RI "Stop the notification system for the given KDB instance\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterInt\fP (KDB *kdb, Key *key, int *variable)"
.br
.RI "Subscribe for automatic updates to a given integer variable when the given key value is changed\&. "
.ti -1c
.RI "int \fBelektraNotificationRegisterCallback\fP (KDB *kdb, Key *key, \fBElektraNotificationChangeCallback\fP callback)"
.br
.RI "Subscribe for updates via callback when a given key value is changed\&. "
.in -1c
.SH "Detailed Description"
.PP 
Elektra-Notification structures and declarations for application developers\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see LICENSE\&.md or https://www.libelektra.org) 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef void(* ElektraNotificationChangeCallback) (Key *key)"

.PP
Callback function for key changes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP changed key 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int elektraNotificationClose (KDB * kdb)"

.PP
Stop the notification system for the given KDB instance\&. May only be called after \fBelektraNotificationOpen()\fP was called for given KDB instance\&.
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP KDB instance 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on error 
.RE
.PP

.SS "int elektraNotificationOpen (KDB * kdb)"

.PP
Initialize the notification system for the given KDB instance\&. Asynchronous receiving of notifications requires an I/O binding\&. Use \fBelektraIoSetBinding()\fP before calling this function\&.
.PP
May only be called once for a KDB instance\&. Subsequent calls return 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP KDB instance 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on error 
.RE
.PP

.SS "int elektraNotificationRegisterCallback (KDB * kdb, Key * key, \fBElektraNotificationChangeCallback\fP callback)"

.PP
Subscribe for updates via callback when a given key value is changed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIcallback\fP callback function
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure 
.RE
.PP

.SS "int elektraNotificationRegisterInt (KDB * kdb, Key * key, int * variable)"

.PP
Subscribe for automatic updates to a given integer variable when the given key value is changed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP plugin handle 
.br
\fIkey\fP key to watch for changes 
.br
\fIvariable\fP integer variable
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on failure 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
