.TH "md_src_plugins_gopts_README" 3elektra "Tue Aug 6 2019" "Version 0.9.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_gopts_READMEPlugin: gopts 
 \- 
.IP "\(bu" 2
infos = Information about the gopts plugin is in keys below
.IP "\(bu" 2
infos/author = Klemens BÃ¶swirth k.boeswirth+git@gmail.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = procgetstorage
.IP "\(bu" 2
infos/status = recommended productive maintained nodep libc experimental
.IP "\(bu" 2
infos/metadata = args opt opt/long opt/arg opt/flagvalue opt/help opt/hidden opt/# opt/#/long opt/#/arg opt/#/flagvalue opt/#/hidden env env/#
.IP "\(bu" 2
infos/description = Parses command-line options using elektra-opts
.PP
.PP
This plugin is very simple in what it does\&. It uses system specific methods of accessing \fCargc\fP and \fCargv\fP outside of \fCmain\fP and then calls \fCelektraGetOpts\fP to do options processing\&.
.PP
.SS "Usage"
.PP
The preferred way of using this plugin is via \fCkdbEnsure\fP:
.PP
.PP
.nf
KDB * kdb = kdbOpen (parentKey);

KeySet * contract = ksNew (1, keyNew ("system/elektra/ensure/plugins/global/gopts", KEY_VALUE, "mounted", KEY_END), KS_END);
int rc = kdbEnsure (kdb, contract, parentKey);
if (rc != 0)
{
        // error handling
}

// gopts now mounted
KeySet * ks = ksNew (0, KS_END);
kdbGet (kdb, ks, parentKey);
.fi
.PP
 
