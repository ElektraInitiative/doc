.TH "autotoc_md484" 3elektra "Tue Nov 26 2019" "Version 0.9.1" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
autotoc_md484 \- Plugin: network 

.IP "\(bu" 2
infos = Information about network plugin is in keys below
.IP "\(bu" 2
infos/author = Markus Raab elektra@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = check
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/placements = presetstorage
.IP "\(bu" 2
infos/status = maintained unittest nodep libc nodoc
.IP "\(bu" 2
infos/metadata = check/ipaddr check/port check/port/listen
.IP "\(bu" 2
infos/description = Checks keys if they contain a valid ip address
.PP
.PP
This plugin is a check plugin that checks if a key contains a valid ip address\&. It uses the \fCPOSIX\&.1-2001\fP interface \fCgetaddrinfo()\fP in order to check if an ip address is valid\&.
.PP
Furthermore \fCgetaddrinfo()\fP is used in \fCcheck/port\fP to resolve a port by its service name which is defined under \fC/etc/services\fP\&. The portname is translated to the respective portnumber\&. The plugin can be used to check for valid port numbers and if the set port is free to use\&.
.PP
While, in theory, a regular expression can express if a string is a network address, in practice, such an attempt does not work well\&. The reason is that an unmanageable number of valid shortenings for IPv6 addresses makes the regular expression hard to write and understand\&.
.PP
So the idea of building such a complicated regular expression was discarded, but instead a dedicated checker was introduced\&. The idea is to use the operating system facilities to resolve the network address\&. If this succeeds, it is guaranteed that this network address will be valid when it is resolved by the same interface afterwards\&.
.PP
Many network address translators coexist\&. In \fCPOSIX\&.1-2001\fP a powerful address translator is provided with the interface \fCgetaddrinfo()\fP\&. It is a common network address translation for both IPv4 and IPv6\&. We used it to implement this plugin\&.
.PP
Every key tagged with the metakey \fCcheck/ipaddr\fP will be checked using \fCgetaddrinfo()\fP\&. If additionally the values \fCipv4\fP or \fCipv6\fP are supplied, the address family will be specified\&.
.PP
``\fC @section autotoc_md488 Mount Network plugin to\fPuser/tests/network` sudo kdb mount config\&.file user/tests/network network
.SH "Set valid IPv4 address"
.PP
kdb set user/tests/network/host 127\&.0\&.0\&.1 
.SH "Check for valid IPv4 address"
.PP
kdb meta-set user/tests/network/host check/ipaddr ipv4
.SH "Try to set invalid IPv4 address"
.PP
kdb set user/tests/network/host 133\&.133\&.133\&.1337 
.SH "RET: 5"
.PP
.SH "STDERR:\&.*Validation Semantic: name:\&.*133\&.133\&.133\&.1337\&.*"
.PP
kdb get user/tests/network/host #> 127\&.0\&.0\&.1
.SH "Set valid IPv4 address"
.PP
kdb set user/tests/network/host 1\&.2\&.3\&.4 #> Set string to '1\&.2\&.3\&.4' kdb get user/tests/network/host #> 1\&.2\&.3\&.4
.SH "Check for any valid network address"
.PP
kdb meta-set user/tests/network/host check/ipaddr '' 
.SH "If identifier <tt>localhost</tt> is not a valid network address it is not part of /etc/hosts"
.PP
kdb set user/tests/network/host localhost || ! grep -q localhost /etc/hosts
.PP
kdb get user/tests/network/host 
.SH "STDOUT-REGEX: localhost|1\&.2\&.3\&.4"
.PP
.SH "Undo modifications to the key database"
.PP
kdb rm -r user/tests/network sudo kdb umount user/tests/network ```
.PP
If \fCcheck/port\fP is specified on a given key, the plugin will validate if the port is a correct number between 1 and 65535\&.
.PP
If \fCcheck/port/listen\fP is specified, the plugin will check if the application can be started and listen on the given port\&.
.SS "Future Work"
\fCcheck/port/connect\fP to check if the port can be pinged/reached (usually for clients)\&. If not reachable, users receive a warning\&. A correct timeout setting will be problematic though\&. 
