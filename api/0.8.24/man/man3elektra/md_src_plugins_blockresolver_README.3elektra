.TH "md_src_plugins_blockresolver_README" 3elektra "Sat Aug 18 2018" "Version 0.8.24" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_blockresolver_READMEPlugin: blockresolver 
 \- 
.IP "\(bu" 2
infos = Information about the blockresolver plugin is in keys below
.IP "\(bu" 2
infos/author = Thomas Waser thomas.waser@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides = resolver
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = rollback getresolver setresolver commit
.IP "\(bu" 2
infos/status = maintained conformant compatible coverage specific unittest tested nodep libc configurable preview experimental difficult unfinished concept
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = resolver for parts in a file configuration file
.PP
.PP
The \fCblockresolver\fP can be used to only resolve a tagged block inside a configuration file\&.
.PP
.SS "Implementation details"
.PP
\fCblockresolver\fP extracts the requested block from the configurations file and writes it into a temporary file\&. Afterwards Elektra will only work on the temporary file until kdbSet is called\&. On kdbSet the contents of the temporary file will be merged with parts outside of the requested block from the original file\&.
.PP
.SS "Usage"
.PP
.PP
.nf
`kdb mount -R blockresolver /path/to/my/file /mountpoint -c identifier="identifier-tag"`
.fi
.PP
.PP
where \fCidentifier\fP specifies the tag \fCblockresolver\fP will search for in the configuration file\&.
.PP
A block consists of 2 parts:
.IP "\(bu" 2
beginning: the identifier suffixed with \fCstart\fP
.IP "\(bu" 2
end: the identifier suffixed with \fCstop\fP
.PP
.PP
.SS "Limitations"
.PP
Currently the identifier must be unique\&.
.PP
.SS "Example"
.PP
.PP
.nf
# Backup-and-Restore:system/tests/blockresolver

# create testfile
kdb set system/tests/blockfile $(mktemp)
echo 'text'                   >  $(kdb get system/tests/blockfile)
echo 'more text'              >> $(kdb get system/tests/blockfile)
echo 'some more text'         >> $(kdb get system/tests/blockfile)
echo '>>> block config start' >> $(kdb get system/tests/blockfile)
echo '[section1]'             >> $(kdb get system/tests/blockfile)
echo 'key1 = val1'            >> $(kdb get system/tests/blockfile)
echo '[section2]'             >> $(kdb get system/tests/blockfile)
echo 'key2 = val2'            >> $(kdb get system/tests/blockfile)
echo '>>> block config stop'  >> $(kdb get system/tests/blockfile)
echo 'text again'             >> $(kdb get system/tests/blockfile)
echo 'and more text'          >> $(kdb get system/tests/blockfile)
echo 'text'                   >> $(kdb get system/tests/blockfile)

sudo kdb mount -R blockresolver $(kdb get system/tests/blockfile) system/tests/blockresolver -c identifier=">>> block config" ini

# check testfile
cat $(kdb get system/tests/blockfile)
#> text
#> more text
#> some more text
#> >>> block config start
#> [section1]
#> key1 = val1
#> [section2]
#> key2 = val2
#> >>> block config stop
#> text again
#> and more text
#> text

# only the block between the tags is read!
kdb export system/tests/blockresolver ini
#> [section1]
#> key1 = val1
#> [section2]
#> key2 = val2

# add a new key to the resolved block
kdb set system/tests/blockresolver/section1/key12 val12

cat $(kdb get system/tests/blockfile)
#> text
#> more text
#> some more text
#> >>> block config start
#> [section1]
#> key1 = val1
#> key12 = val12
#> [section2]
#> key2 = val2
#> >>> block config stop
#> text again
#> and more text
#> text

# cleanup
kdb rm -r system/tests/blockresolver
rm $(kdb get system/tests/blockfile)
kdb rm system/tests/blockfile
sudo kdb umount system/tests/blockresolver
.fi
.PP
 
