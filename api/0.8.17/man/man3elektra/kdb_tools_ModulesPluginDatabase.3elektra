.TH "kdb::tools::ModulesPluginDatabase" 3elektra "Tue Jun 14 2016" "Version 0.8.17" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::tools::ModulesPluginDatabase \- 
.PP
A plugin database that works with installed modules\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <plugindatabase\&.hpp>\fP
.PP
Inherits \fBkdb::tools::PluginDatabase\fP\&.
.PP
Inherited by \fBkdb::tools::MockPluginDatabase\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::vector< std::string > \fBlistAllPlugins\fP () const "
.br
.RI "\fIlist all plugins \fP"
.ti -1c
.RI "std::string \fBlookupInfo\fP (\fBPluginSpec\fP const &spec, std::string const &which) const "
.br
.RI "\fIlookup contract clauses or dynamic information \fP"
.ti -1c
.RI "\fBPluginSpec\fP \fBlookupMetadata\fP (std::string const &which) const "
.br
.RI "\fIlookup which plugin handles meta data \fP"
.ti -1c
.RI "\fBPluginSpec\fP \fBlookupProvides\fP (std::string const &\fBprovides\fP) const "
.br
.RI "\fIlookup which plugin is a provider for that plugin \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A plugin database that works with installed modules\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::vector< std::string > kdb::tools::ModulesPluginDatabase::listAllPlugins () const\fC [virtual]\fP"

.PP
list all plugins If Elektra is compiled with plugins, it will search for shared libraries\&. In any case, if no shared libraries were found it will fallback to an internal list (plugins that were compiled together with Elektra)\&.
.PP
\fBReturns:\fP
.RS 4
a list of all available plugins 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.PP
Reimplemented in \fBkdb::tools::MockPluginDatabase\fP\&.
.SS "std::string kdb::tools::ModulesPluginDatabase::lookupInfo (\fBPluginSpec\fP const &whichplugin, std::string const &which) const\fC [virtual]\fP"

.PP
lookup contract clauses or dynamic information 
.PP
\fBParameters:\fP
.RS 4
\fIwhichplugin\fP about which plugin? 
.br
\fIwhich\fP about which clause in the contract?
.RE
.PP
\fBReturns:\fP
.RS 4
the clause of the contract 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.PP
Reimplemented in \fBkdb::tools::MockPluginDatabase\fP\&.
.SS "\fBPluginSpec\fP kdb::tools::ModulesPluginDatabase::lookupMetadata (std::string const &which) const\fC [virtual]\fP"

.PP
lookup which plugin handles meta data 
.PP
\fBParameters:\fP
.RS 4
\fIwhich\fP the meta data of interest
.RE
.PP
\fBReturns:\fP
.RS 4
the best suited plugin specification which provides it 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.SS "\fBPluginSpec\fP kdb::tools::ModulesPluginDatabase::lookupProvides (std::string const &provides) const\fC [virtual]\fP"

.PP
lookup which plugin is a provider for that plugin 
.PP
\fBNote:\fP
.RS 4
will return a \fBPluginSpec\fP with getName() == provides if the string provides actually is a plugin name\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINoPlugin\fP if no plugin that provides the functionality could be found
.RE
.PP
\fBReturns:\fP
.RS 4
the plugin itself or the best suited plugin specification which provides it 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
