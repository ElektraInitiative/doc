.TH "doc_tutorials_cmerge_md" 3elektra "Mon Oct 4 2021" "Version 0.9.8" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_cmerge_md \- How-To: Merging 
 
.SH "Introduction"
.PP
Elektra takes the semantic aspects of configuration files into account when merging them into one result file\&. Those configuration files are represented as key sets in Elektra\&. Key sets are collections of name-value pairs\&.
.PP
The \fCkdb\fP tool allows users to access and perform functions on the Elektra key database from the command line\&. We added a new command to this very useful tool, the \fCcmerge\fP command\&. This command allows a user to perform a three-way merge of key sets from the \fCkdb\fP tool\&.
.PP
The syntax to use this tool is:
.PP
\fCkdb cmerge [OPTIONS] our their base result\fP
.PP
\fCour\fP, \fCtheir\fP and \fCbase\fP represent the three keys that are used in a three-way merge\&. As in the \fCdiff3\fP tool, required are the three files MYFILE (our), OLDFILE (base) and YOURFILE (their) The result off the three-way merge will be stored in \fCresult\fP\&.
.SH "Simple example"
.PP
The easiest case is if all three versions contain equal data\&.
.PP
.PP
.nf
kdb set user:/tests/base a
#> Create a new key user:/tests/base with string "a"
kdb set user:/tests/their a
#> Create a new key user:/tests/their with string "a"
kdb set user:/tests/our a
#> Create a new key user:/tests/our with string "a"
kdb cmerge user:/tests/our user:/tests/their user:/tests/base user:/tests/result
kdb get user:/tests/result
#> a
.fi
.PP
.PP
We change the our key for another example\&.
.PP
.PP
.nf
kdb set user:/tests/our b
#> Set string to "b"
.fi
.PP
.PP
Using a \fCresult\fP path that is not empty gives an error\&. The option \fC-f\fP can be used to override\&. \fBAttention!\fP This deletes existing keys below \fCresult\fP\&.
.PP
.PP
.nf
kdb cmerge user:/tests/our user:/tests/their user:/tests/base user:/tests/result
# RET: 3
# There are keys in the result path\&. Use -f to override them\&.
kdb cmerge -f user:/tests/our user:/tests/their user:/tests/base user:/tests/result
kdb get user:/tests/result
#> b
.fi
.PP
.PP
We can use the same key multiple times in a single call to cmerge\&.
.PP
.PP
.nf
kdb set user:/tests/same a
#> Create a new key user:/tests/same with string "a"
kdb cmerge -f user:/tests/same user:/tests/same user:/tests/same user:/tests/result
kdb get user:/tests/result
#> a
.fi
.PP
.SS "hosts"
As a real-world example, we import three different (see the comment) versions of a hosts file\&.
.PP
.PP
.nf
echo "127\&.0\&.0\&.1       localhost
127\&.0\&.1\&.1       computer

# BASE The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" | kdb import user:/tests/hosts/base hosts

echo "127\&.0\&.0\&.1       localhost
127\&.0\&.1\&.1       computer

# OUR The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" | kdb import user:/tests/hosts/our hosts

echo "127\&.0\&.0\&.1       localhost
127\&.0\&.1\&.1       computer

# THEIR The following lines are desirable for IPv6 capable hosts
::2     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" | kdb import user:/tests/hosts/their hosts

kdb cmerge user:/tests/hosts/our user:/tests/hosts/their user:/tests/hosts/base user:/tests/hosts/result
.fi
.PP
.PP
The merge notices that only one of the three versions of the key \fCip6-localhost\fP has changed\&. Assuming that this was an update it puts the new value in the result\&.
.PP
.PP
.nf
kdb get user:/tests/hosts/result/ipv6/ip6-localhost
#> ::2
.fi
.PP
.SH "Metadata"
.PP
Metadata gets merged as well\&. We do not follow a complicated approach for this topic\&. When a key-value pair is chosen from the three versions to be present in the result it takes all its metadata with it\&.
.PP
In case that the values of some keys are equal, the \fCour\fP version wins and consequently the metadata of the \fCour\fP version is used\&. The reason for this is that users might have used the metadata for personal comments\&.
.PP
To demonstrate this, we continue the hosts example:
.PP
.PP
.nf
kdb meta-get user:/tests/hosts/result/ipv6/ip6-localhost comment/#2
#>  THEIR The following lines are desirable for IPv6 capable hosts
.fi
.PP
.PP
We set up some keys:
.PP
.PP
.nf
kdb set user:/tests/meta/base equal
#> Create a new key user:/tests/meta/base with string "equal"
kdb meta-set user:/tests/meta/base comment/#0 "This is the original inline comment"
kdb meta-set user:/tests/meta/base comment/#1 "This is the first line of the original comment above the key"
kdb meta-set user:/tests/meta/base comment/#2 "This is the second line of the original comment above the key"

kdb set user:/tests/meta/their equal
#> Create a new key user:/tests/meta/their with string "equal"
kdb meta-set user:/tests/meta/their comment/#0 "This is their inline comment"
kdb meta-set user:/tests/meta/their comment/#1 "This is the first line of their comment above the key"
kdb meta-set user:/tests/meta/their comment/#2 "This is the second line of their comment above the key"

kdb set user:/tests/meta/our equal
#> Create a new key user:/tests/meta/our with string "equal"
kdb meta-set user:/tests/meta/our comment/#0 "This is your custom inline comment"
kdb meta-set user:/tests/meta/our comment/#1 "This is the first line of your custom comment above the key"
kdb meta-set user:/tests/meta/our comment/#2 "This is the second line of your custom comment above the key"

kdb cmerge user:/tests/meta/our user:/tests/meta/their user:/tests/meta/base user:/tests/meta/metaFromOur
.fi
.PP
.PP
Now we can check if the metadata has been merged as expected\&.
.PP
.PP
.nf
kdb meta-get user:/tests/meta/metaFromOur comment/#0
#> This is your custom inline comment
kdb meta-get user:/tests/meta/metaFromOur comment/#1
#> This is the first line of your custom comment above the key
kdb meta-get user:/tests/meta/metaFromOur comment/#2
#> This is the second line of your custom comment above the key
.fi
.PP
.PP
If a key is part of the result because its value has changed then the result will also contain the metadata of that key\&.
.PP
.PP
.nf
kdb set user:/tests/meta/their different
#> Set string to "different"

kdb cmerge user:/tests/meta/our user:/tests/meta/their user:/tests/meta/base user:/tests/meta/metaFromChanged
.fi
.PP
.PP
We can test again if the result meets our expectations\&.
.PP
.PP
.nf
kdb meta-get user:/tests/meta/metaFromChanged comment/#2
#> This is the second line of their comment above the key
.fi
.PP
.SH "Arrays"
.PP
cmerge uses LibGit2 to handle arrays in an efficient manner\&.
.PP
.PP
.nf
echo "one\
two\
three\
four\
five" | kdb import user:/tests/arrays/original line

echo "previous\
one\
two\
three\
four\
five" | kdb import user:/tests/arrays/changed line

kdb cmerge -f user:/tests/arrays/changed user:/tests/arrays/original user:/tests/arrays/original user:/tests/arrays/result

kdb get user:/tests/arrays/result/#0
#> previous
.fi
.PP
.SH "Scripts"
.PP
There are two tools of which cmerge is the central tool:
.PP
.IP "1." 4
\fB`kdb install-config-file`\fP installs or merges configuration files from the file system into Elektra\&. There is \fBa tutorial\fP for this tool, too\&.
.IP "2." 4
\fB`kdb cmerge-config-files`\fP performs a three-way merge on three files using Elektra
.PP
.SH "Calling the API"
.PP
All the tools that use the merge library rely on the same API\&. An exemplary call to this API can be found in the \fCexamples folder\fP\&. 
