.TH "kdb::tools::PluginDatabase" 3elektra "Fri Jul 9 2021" "Version 0.9.7" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::tools::PluginDatabase \- Loads all plugins and allows us to query them\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <plugindatabase\&.hpp>\fP
.PP
Inherited by \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBStatus\fP { \fBprovides\fP, \fBreal\fP, \fBmissing\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual std::vector< std::string > \fBlistAllPlugins\fP () const =0"
.br
.RI "list all plugins "
.ti -1c
.RI "virtual std::string \fBlookupInfo\fP (\fBPluginSpec\fP const &whichplugin, std::string const &which) const =0"
.br
.RI "lookup contract clauses or dynamic information "
.ti -1c
.RI "virtual func_t \fBgetSymbol\fP (\fBPluginSpec\fP const &whichplugin, std::string const &which) const =0"
.br
.RI "get exported plugin symbol "
.ti -1c
.RI "virtual \fBPluginSpec\fP \fBlookupMetadata\fP (std::string const &which) const =0"
.br
.RI "lookup which plugin handles metadata "
.ti -1c
.RI "virtual \fBPluginSpec\fP \fBlookupProvides\fP (std::string const &\fBprovides\fP) const =0"
.br
.RI "lookup which plugin is a provider for that plugin "
.ti -1c
.RI "virtual std::map< int, \fBPluginSpec\fP > \fBlookupAllProvidesWithStatus\fP (std::string const &\fBprovides\fP) const =0"
.br
.RI "looks up all plugins which are a suitable provider "
.ti -1c
.RI "virtual std::vector< \fBPluginSpec\fP > \fBlookupAllProvides\fP (std::string const &\fBprovides\fP) const =0"
.br
.RI "looks up all plugins which are a suitable provider "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static int \fBcalculateStatus\fP (std::string statusString)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Loads all plugins and allows us to query them\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBkdb::tools::PluginDatabase::Status\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIprovides \fP\fP
does not directly, but can be loaded via provides 
.TP
\fB\fIreal \fP\fP
exists and working as given 
.TP
\fB\fImissing \fP\fP
does not exist or cannot be loaded 
.SH "Member Function Documentation"
.PP 
.SS "int kdb::tools::PluginDatabase::calculateStatus (std::string statusString)\fC [static]\fP"

.PP
\fBParameters\fP
.RS 4
\fIstatusString\fP the string encoding the status
.RE
.PP
\fBReturns\fP
.RS 4
The representing number for a given status\&. 
.RE
.PP

.SS "virtual func_t kdb::tools::PluginDatabase::getSymbol (\fBPluginSpec\fP const & whichplugin, std::string const & which) const\fC [pure virtual]\fP"

.PP
get exported plugin symbol 
.PP
\fBParameters\fP
.RS 4
\fIwhichplugin\fP from which plugin? 
.br
\fIwhich\fP which symbol would you like to look up?
.RE
.PP
\fBReturns\fP
.RS 4
the function pointer to the exported symbol or NULL if the symbol was not found 
.RE
.PP

.PP
Implemented in \fBkdb::tools::MockPluginDatabase\fP, and \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "virtual std::vector<std::string> kdb::tools::PluginDatabase::listAllPlugins () const\fC [pure virtual]\fP"

.PP
list all plugins If Elektra is compiled with plugins, it will search for shared libraries\&. In any case, if no shared libraries were found it will fallback to an internal list (plugins that were compiled together with Elektra)\&.
.PP
\fBReturns\fP
.RS 4
a list of all available plugins 
.RE
.PP

.PP
Implemented in \fBkdb::tools::MockPluginDatabase\fP, and \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "virtual std::vector<\fBPluginSpec\fP> kdb::tools::PluginDatabase::lookupAllProvides (std::string const & provides) const\fC [pure virtual]\fP"

.PP
looks up all plugins which are a suitable provider 
.PP
\fBNote\fP
.RS 4
in case a plugin name is provided, the plugin with the name will also be part of the result\&. But if there are other plugins providing the requirement, then they will also be part of the result\&. The ordering of the resulting vector has no special meaning\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBReturns\fP
.RS 4
a vector of plugins offering the requirement or are named after it 
.RE
.PP

.PP
Implemented in \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "virtual std::map<int, \fBPluginSpec\fP> kdb::tools::PluginDatabase::lookupAllProvidesWithStatus (std::string const & provides) const\fC [pure virtual]\fP"

.PP
looks up all plugins which are a suitable provider 
.PP
\fBNote\fP
.RS 4
in case a plugin name is provided, the plugin with the name will also be part of the result\&. But if there are other plugins providing the requirement, then they will also be part of the result\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBReturns\fP
.RS 4
a map of plugins with their status offering the requirement or are named after it 
.RE
.PP

.PP
Implemented in \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "virtual std::string kdb::tools::PluginDatabase::lookupInfo (\fBPluginSpec\fP const & whichplugin, std::string const & which) const\fC [pure virtual]\fP"

.PP
lookup contract clauses or dynamic information 
.PP
\fBParameters\fP
.RS 4
\fIwhichplugin\fP about which plugin? 
.br
\fIwhich\fP about which clause in the contract?
.RE
.PP
\fBReturns\fP
.RS 4
the clause of the contract 
.RE
.PP

.PP
Implemented in \fBkdb::tools::MockPluginDatabase\fP, and \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "virtual \fBPluginSpec\fP kdb::tools::PluginDatabase::lookupMetadata (std::string const & which) const\fC [pure virtual]\fP"

.PP
lookup which plugin handles metadata 
.PP
\fBParameters\fP
.RS 4
\fIwhich\fP the metadata of interest
.RE
.PP
\fBReturns\fP
.RS 4
the best suited plugin specification which provides it 
.RE
.PP

.PP
Implemented in \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "virtual \fBPluginSpec\fP kdb::tools::PluginDatabase::lookupProvides (std::string const & provides) const\fC [pure virtual]\fP"

.PP
lookup which plugin is a provider for that plugin 
.PP
\fBNote\fP
.RS 4
will return a \fBPluginSpec\fP with getName() == provides if the string provides actually is a plugin name\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBExceptions\fP
.RS 4
\fINoPlugin\fP if no plugin that provides the functionality could be found
.RE
.PP
\fBReturns\fP
.RS 4
the plugin itself or the best suited plugin specification which provides it 
.RE
.PP

.PP
Implemented in \fBkdb::tools::ModulesPluginDatabase\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
