.TH "doc_tutorials_java-kdb_md" 3elektra "Tue Feb 26 2019" "Version 0.8.26" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_java-kdb_mdHow-To: Java kdb 
 \- 
.SS "Introduction"
.PP
When programming in Java it is possible to access the kdb database, changing values of existing keys or adding new ones and a few other things\&. It is also possible to write plugins for elektra in Java but we will focus on using the java binding in this tutorial\&.
.PP
.SS "First Steps"
.PP
In order to use \fCkdb\fP you will need include the dependency in your project\&. \fBHere\fP you can find a detailed tutorial on how to do that\&.
.PP
After that you can start loading an \fCKDB\fP object as follows:
.PP
.PP
.nf
Key key = Key\&.create("user/kdbsession/javabinding");
try (KDB kdb = KDB\&.open(key)) {
    //Your code to manipulate keys
} catch (KDB\&.KDBException e) {
    e\&.printStackTrace();
}
.fi
.PP
.PP
Note that KDB implements \fCAutoClosable\fP which allows \fCtry-with-resouces\fP\&.
.PP
You can also pass a \fCKey\fP object with an empty string on the first line\&. The passed key (\fCuser/kdbsession/javabinding\fP in this case) is being used for the session and stores warnings and error informations\&.
.PP
.SS "Fetching keys"
.PP
First I will show how to get a key which was already saved in the database\&. The first thing we need to do is to create a \fCKeySet\fP in which our key(s) will be loaded\&.
.PP
.PP
.nf
KeySet set = KeySet\&.create();
.fi
.PP
.PP
Now we load all keys and provide a parent key from which all keys below will be loaded
.PP
.PP
.nf
kdb\&.get(set, Key\&.create("user"));
.fi
.PP
.PP
Now we can simply fetch the desired key's value as follows:
.PP
.PP
.nf
String str = set\&.lookup("user/my/presaved/key")\&.getString()
.fi
.PP
.PP
So for example if you have executed before the application starts \fCkdb set user/my/test it_works!\fP, the method call \fCset\&.lookup('user/my/test')\&.getString()\fP would return \fCit_works!\fP\&.
.PP
.SS "Saving Keys"
.PP
Next I will show how to save a new key into the database\&. First we need need to create an empty \fCKeySet\fP again\&. We also \fBneed to fetch\fP all keys for the namespace before we will be able to save a new key\&.
.PP
.PP
.nf
KeySet set = KeySet\&.create();
Key namespace = Key\&.create("user");
kdb\&.get(set, namespace);    //Fetch all keys for the namespace
set\&.append(Key\&.create("user/somekey", "myValue"));
kdb\&.set(set, key);
.fi
.PP
.PP
If you try to save a key without fetching it beforehand, a \fCKDBException\fP will be thrown, telling you to call get before set\&.
.PP
The \fIuser\fP namespace is accessible without special rights, but if you try to write to \fIsystem\fP you will need to have root privileges\&. Check \fBthis\fP to see how to run as non-root user\&. This should only be done in testing environments though as it is not intended for productive systems\&.
.PP
.SS "Examples"
.PP
.SS "Traversing Keys in a \fCKeySet\fP"
.PP
.PP
.nf
Key key = Key\&.create("user/errors");
try (KDB kdb = KDB\&.open(key)) {
    KeySet set = KeySet\&.create();
    Key namespace = Key\&.create("user");       //Select a namespace from which all keys should be fetched
    kdb\&.get(set, namespace);                  //Fetch all keys into the set object
    for (int i = 0; i < set\&.length(); i++) {  //Traverse the set
        String keyAndValue = String\&.format("%s: %s",
                set\&.at(i)\&.getName(),          //Fetch the key's name
                set\&.at(i)\&.getString());       //Fetch the key's value
        System\&.out\&.println(keyAndValue);
    }
} catch (KDB\&.KDBException e) {
    e\&.printStackTrace();
}
.fi
.PP
.PP
First we create a new \fCKDB\fP object and fetch all keys for the desired namespace, in this example the \fCuser\fP namespace\&. Since it saves all keys in our passed \fCset\fP variable we can then iterate through it by a simple for loop\&. The \fCat(int)\fP method gives us the key on the corresponding position which we will print out in this example\&. 
