.TH "doc_api_review_core_keyUnescapedName_md" 3elektra "Mon Oct 4 2021" "Version 0.9.8" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_api_review_core_keyUnescapedName_md \- keyUnescapedName 

.IP "\(bu" 2
start = 2021-02-26 11:15
.IP "\(bu" 2
end = 2021-02-26 12:15
.IP "\(bu" 2
moderator = Stefan Hanreich stefanhani@gmail.com
.IP "\(bu" 2
reviewer = Michael Tucek michael@tucek.eu
.PP
.SH "Signature"
.PP
\fCconst void *keyUnescapedName(const Key *key)\fP
.SH "Checklist"
.PP
.SS "Doxygen"
(bullet points are in order of appearance)
.PP
.IP "\(bu" 2
[ ] First line explains briefly what the function does 
.br
.IP "  \(bu" 4
[ ] Merge first and second sentence 
.br
 'Returns a key's name where the key name parts are separated by null bytes and does not use backslash for escaping'
.PP

.IP "\(bu" 2
[ ] Simple example or snippet how to use the function 
.br
.IP "  \(bu" 4
[ ] add example
.PP

.IP "\(bu" 2
[x] Longer description of function containing common use cases
.IP "\(bu" 2
[x] Description of functions reads nicely
.IP "\(bu" 2
[ ] \fC@pre\fP 
.br
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[ ] \fC@post\fP 
.br
.IP "  \(bu" 4
[ ] add 
.br

.IP "  \(bu" 4
[ ] key stays unchanged 
.br

.IP "  \(bu" 4
[ ] returns pointer to unescaped Name
.PP

.IP "\(bu" 2
[ ] \fC@invariant\fP 
.br
.IP "  \(bu" 4
[ ] add 
.br

.IP "  \(bu" 4
[ ] key stays unchanged
.PP

.IP "\(bu" 2
[ ] \fC@param\fP for every parameter 
.br
.IP "  \(bu" 4
[ ] 'optional pointer to Key object'
.PP

.IP "\(bu" 2
[ ] \fC@return\fP / \fC@retval\fP 
.br
.IP "  \(bu" 4
[ ] swap order 
.br

.IP "  \(bu" 4
[ ] 'if Key has no name' 
.br

.IP "  \(bu" 4
[ ] 'the Key's name'
.PP

.IP "\(bu" 2
[ ] \fC@since\fP 
.br
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[ ] \fC@ingroup\fP 
.br
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[ ] \fC@see\fP 
.br
.IP "  \(bu" 4
[ ] \fBkeyGetUnescapedName()\fP for getting a copy
.PP

.PP
.SS "Naming"
.IP "\(bu" 2
Abbreviations used in function names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Function names should neither be too long, nor too short
.IP "\(bu" 2
[ ] Function name should be clear and unambiguous 
.br
.IP "  \(bu" 4
[ ] \fC\fBkeyGetUnescapedName()\fP\fP make difference to this function more clear?
.PP

.IP "\(bu" 2
Abbreviations used in parameter names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Parameter names should neither be too long, nor too short
.IP "\(bu" 2
[x] Parameter names should be clear and unambiguous
.PP
.SS "Compatibility"
(only in PRs)
.PP
.IP "\(bu" 2
\fBSymbol versioning\fP is correct for breaking changes
.IP "\(bu" 2
ABI/API changes are forward-compatible (breaking backwards-compatibility to add additional symbols is fine)
.PP
.SS "Parameter & Return Types"
.IP "\(bu" 2
Function parameters should use enum types instead of boolean types wherever sensible
.IP "\(bu" 2
[x] Wherever possible, function parameters should be \fCconst\fP
.IP "\(bu" 2
[x] Wherever possible, return types should be \fCconst\fP
.IP "\(bu" 2
[x] Functions should have the least amount of parameters feasible
.PP
.SS "Structural Clarity"
.IP "\(bu" 2
[x] Functions should do exactly one thing
.IP "\(bu" 2
[x] Function name has the appropriate prefix
.IP "\(bu" 2
[ ] Order of signatures in kdb\&.h\&.in is the same as Doxygen 
.br
.IP "  \(bu" 4
[ ] mismatch, move up in docs to match place in header file
.PP

.IP "\(bu" 2
[x] No functions with similar purpose exist
.PP
.SS "Memory Management"
.IP "\(bu" 2
Memory Management should be handled by the function wherever possible
.PP
.SS "Extensibility"
.IP "\(bu" 2
[x] Function is easily extensible, e\&.g\&., with flags
.IP "\(bu" 2
[x] Documentation does not impose limits, that would hinder further extensions
.PP
.SS "Tests"
.IP "\(bu" 2
[ ] Function code is fully covered by tests 
.br
.IP "  \(bu" 4
[x] no tests for this function
.PP

.IP "\(bu" 2
[ ] All possible error states are covered by tests 
.br
.IP "  \(bu" 4
[x] no tests for this function
.PP

.IP "\(bu" 2
[ ] All possible enum values are covered by tests 
.br
.IP "  \(bu" 4
[x] no tests for this function
.PP

.IP "\(bu" 2
[ ] No inconsistencies between tests and documentation 
.br
.IP "  \(bu" 4
[x] no tests for this function
.PP

.PP
.SH "Summary"
.PP
.IP "\(bu" 2
Why is return type void* exactly?
.IP "\(bu" 2
include optional in key \fC@param\fP - define schema for key param
.IP "\(bu" 2
Add explicit tests for this function
.PP
.SH "Other Issues discovered (unrelated to function)"
.PP
.IP "\(bu" 2
Convention for keyX / keyGetX (pointer vs copy) intended?
.IP "\(bu" 2
Remove elektra-internal functions
.IP "\(bu" 2
Functions are sorted alphabetically - can we change this easily? 
.PP

