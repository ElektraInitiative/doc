.TH "org.libelektra.KeySet" 3elektra "Sun Jul 10 2022" "Version 0.9.10" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.KeySet \- Java representation of a native Elektra key set, a container for keys\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits AbstractSet< Key >, and NavigableSet< Key >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Clean-up method to release key set reference by trying to free the native reference
.br
 
.br
 Call this method if you have obtained a \fBKeySet\fP via any of its public methods or {\fB} and you do not longer need it\&. \fP"
.ti -1c
.RI "\fBKeySet\fP \fBdup\fP ()"
.br
.RI "Duplicates the key set\&. "
.ti -1c
.RI "\fBKeySet\fP \fBcopy\fP (\fBKeySet\fP source)"
.br
.RI "Copies key references from\&. "
.ti -1c
.RI "\fBKeySet\fP \fBappend\fP (\fBKey\fP key)"
.br
.RI "Append key to key set\&. "
.ti -1c
.RI "\fBKeySet\fP \fBappend\fP (\fBKeySet\fP source)"
.br
.RI "Appends keys from key set\&. "
.ti -1c
.RI "\fBKeySet\fP \fBcut\fP (\fBKey\fP cutpoint)"
.br
.RI "Creates new key set with help of a cut point\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBremove\fP (\fBReadableKey\fP key)"
.br
.RI "Removes the specified key from key set\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBremove\fP (String find)"
.br
.RI "Removes the key with the specified name from key set\&. "
.ti -1c
.RI "\fBKey\fP \fBremove\fP (int cursor)"
.br
.RI "Returns key from key set and also removes it from the set\&. "
.ti -1c
.RI "\fBKey\fP \fBat\fP (int cursor)"
.br
.RI "Gets the key at the given cursor position\&. "
.ti -1c
.RI "int \fBindexOf\fP (\fBKey\fP key)"
.br
.ti -1c
.RI "Optional< \fBKey\fP > \fBlookup\fP (\fBKey\fP find)"
.br
.RI "Search for a key in the key set\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBlookup\fP (String find)"
.br
.RI "Search for a key in the key set\&. "
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.RI "Iterates though all keys in this key set and appends their representation to the output\&. "
.ti -1c
.RI "int \fBsize\fP ()"
.br
.ti -1c
.RI "boolean \fBisEmpty\fP ()"
.br
.ti -1c
.RI "boolean \fBcontains\fP (@Nullable Object o)"
.br
.ti -1c
.RI "\fBKey\fP \fBlower\fP (\fBKey\fP key)"
.br
.ti -1c
.RI "\fBKey\fP \fBfloor\fP (\fBKey\fP key)"
.br
.ti -1c
.RI "\fBKey\fP \fBceiling\fP (\fBKey\fP key)"
.br
.ti -1c
.RI "\fBKey\fP \fBhigher\fP (\fBKey\fP key)"
.br
.ti -1c
.RI "\fBKey\fP \fBpollFirst\fP ()"
.br
.ti -1c
.RI "\fBKey\fP \fBpollLast\fP ()"
.br
.ti -1c
.RI "Iterator< \fBKey\fP > \fBiterator\fP ()"
.br
.ti -1c
.RI "NavigableSet< \fBKey\fP > \fBdescendingSet\fP ()"
.br
.ti -1c
.RI "Iterator< \fBKey\fP > \fBdescendingIterator\fP ()"
.br
.ti -1c
.RI "NavigableSet< \fBKey\fP > \fBsubSet\fP (\fBKey\fP fromElement, boolean fromInclusive, \fBKey\fP toElement, boolean toInclusive)"
.br
.ti -1c
.RI "NavigableSet< \fBKey\fP > \fBheadSet\fP (\fBKey\fP toElement, boolean inclusive)"
.br
.ti -1c
.RI "NavigableSet< \fBKey\fP > \fBtailSet\fP (\fBKey\fP fromElement, boolean inclusive)"
.br
.ti -1c
.RI "Object[] \fBtoArray\fP ()"
.br
.ti -1c
.RI "boolean \fBadd\fP (\fBKey\fP e)"
.br
.ti -1c
.RI "boolean \fBremove\fP (Object o)"
.br
.ti -1c
.RI "boolean \fBcontainsAll\fP (Collection<?> c)"
.br
.ti -1c
.RI "boolean \fBaddAll\fP (Collection<? extends \fBKey\fP > c)"
.br
.ti -1c
.RI "boolean \fBretainAll\fP (Collection<?> c)"
.br
.ti -1c
.RI "boolean \fBremoveAll\fP (Collection<?> c)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Removes all elements form this \fBKeySet\fP\&. "
.ti -1c
.RI "Comparator<? super \fBKey\fP > \fBcomparator\fP ()"
.br
.ti -1c
.RI "SortedSet< \fBKey\fP > \fBsubSet\fP (\fBKey\fP fromElement, \fBKey\fP toElement)"
.br
.ti -1c
.RI "SortedSet< \fBKey\fP > \fBheadSet\fP (\fBKey\fP toElement)"
.br
.ti -1c
.RI "SortedSet< \fBKey\fP > \fBtailSet\fP (\fBKey\fP fromElement)"
.br
.ti -1c
.RI "\fBKey\fP \fBfirst\fP ()"
.br
.ti -1c
.RI "\fBKey\fP \fBlast\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBKeySet\fP \fBcreate\fP (Key\&.\&.\&. keys)"
.br
.RI "Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(\fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. "
.ti -1c
.RI "static \fBKeySet\fP \fBcreate\fP (int allocationHint, Key\&.\&.\&. keys)"
.br
.RI "Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(10, \fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. "
.ti -1c
.RI "static \fBKeySet\fP \fBcreate\fP ()"
.br
.RI "Constructs an empty \fBKeySet\fP with a default allocation hint of 16\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBKeySet\fP (long nativePointer)"
.br
.RI "Constructor associating a new \fBKeySet\fP instance with a native pointer in long format\&. "
.ti -1c
.RI "\fBKeySet\fP (long nativePointer, boolean suppressCleanUp)"
.br
.RI "Constructor associating a new \fBKeySet\fP instance with a native pointer in long format
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. "
.ti -1c
.RI "\fBKeySet\fP (Pointer pointer)"
.br
.RI "Constructor associating a new \fBKeySet\fP instance with a JNA pointer\&. "
.ti -1c
.RI "Pointer \fBgetPointer\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Java representation of a native Elektra key set, a container for keys\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.libelektra\&.KeySet\&.KeySet (long nativePointer)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKeySet\fP instance with a native pointer in long format\&. 
.PP
\fBParameters\fP
.RS 4
\fInativePointer\fP Native pointer to key set in long format 
.RE
.PP

.SS "org\&.libelektra\&.KeySet\&.KeySet (long nativePointer, boolean suppressCleanUp)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKeySet\fP instance with a native pointer in long format
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. 
.PP
\fBParameters\fP
.RS 4
\fInativePointer\fP Native pointer to key set in long format 
.br
\fIsuppressCleanUp\fP True to suppress native reference clean-up as soon as this {\fB} instance becomes phantom reachable, false otherwise  #release() \fP
.RE
.PP

.SS "org\&.libelektra\&.KeySet\&.KeySet (Pointer pointer)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKeySet\fP instance with a JNA pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP JNA \fBPointer\fP to key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP if
.PP
.nf
pointer 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "boolean org\&.libelektra\&.KeySet\&.add (\fBKey\fP e)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP or the specified
.PP
.nf
key 

.fi
.PP
 has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
key 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeySetException\fP if inserting the
.PP
.nf
key 

.fi
.PP
 failed because of allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBappend(Key)\fP 
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.addAll (Collection<? extends \fBKey\fP > c)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP or any \fBKey\fP contained in the specified collection
.PP
.nf
c 

.fi
.PP
 has already been released 
.br
\fINullPointerException\fP if the specified collection is
.PP
.nf
null 

.fi
.PP
 or contains
.PP
.nf
null 

.fi
.PP
 elements 
.br
\fIKeySetException\fP if inserting the
.PP
.nf
key 

.fi
.PP
 failed because of allocation problems 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.append (\fBKey\fP key)\fC [inline]\fP"

.PP
Append key to key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP \fBKey\fP to append 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKeySet\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP or the specified
.PP
.nf
key 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
key 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeySetException\fP if appending the
.PP
.nf
key 

.fi
.PP
 failed because of allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBadd(Key)\fP 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.append (\fBKeySet\fP source)\fC [inline]\fP"

.PP
Appends keys from key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Source \fBKeySet\fP to append all of its \fBkeys\fP 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKeySet\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP or the specified
.PP
.nf
source 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeySetException\fP if appending the
.PP
.nf
source 

.fi
.PP
 failed because of allocation problems 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.at (int cursor)\fC [inline]\fP"

.PP
Gets the key at the given cursor position\&. 
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP Cursor position used to fetch key; starting from 0 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP found at specified cursor position 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fIIndexOutOfBoundsException\fP if position is out of bounds 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.ceiling (\fBKey\fP key)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "void org\&.libelektra\&.KeySet\&.clear ()\fC [inline]\fP"

.PP
Removes all elements form this \fBKeySet\fP\&. 
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "Comparator<? super \fBKey\fP> org\&.libelektra\&.KeySet\&.comparator ()\fC [inline]\fP"

.PP
@implSpec Returns
.PP
.nf
null 

.fi
.PP
 because natural ordering of keys is used (\fBReadableKey\fP implements \fBComparable\fP) 
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.contains (@Nullable Object o)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released or the passed \fBo\fP is a \fBKey\fP that has already been released 
.br
\fINullPointerException\fP if the specified element
.PP
.nf
o 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBlookup(Key)\fP 
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.containsAll (Collection<?> c)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if the specified collection is
.PP
.nf
null 

.fi
.PP
 or contains
.PP
.nf
null 

.fi
.PP
 elements 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.copy (\fBKeySet\fP source)\fC [inline]\fP"

.PP
Copies key references from\&. 
.PP
.nf
source 

.fi
.PP
 to \fBthis\fP \fBKeySet\fP
.PP
\fBParameters\fP
.RS 4
\fIsource\fP \fBKey\fP set that is used as source 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKeySet\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP or the specified
.PP
.nf
source 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "static \fBKeySet\fP org\&.libelektra\&.KeySet\&.create ()\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs an empty \fBKeySet\fP with a default allocation hint of 16\&. 
.PP
\fBReturns\fP
.RS 4
Newly allocated key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetException\fP on allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static \fBKeySet\fP org\&.libelektra\&.KeySet\&.create (int allocationHint, Key\&.\&.\&. keys)\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(10, \fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. 
.PP
\fBParameters\fP
.RS 4
\fIallocationHint\fP Hint indicating the expected size of the key set 
.br
\fIkeys\fP List of initial keys for the key set 
.RE
.PP
\fBReturns\fP
.RS 4
New key set containing the specified initial keys 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetException\fP on allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static \fBKeySet\fP org\&.libelektra\&.KeySet\&.create (Key\&.\&.\&. keys)\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(\fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. 
.PP
\fBParameters\fP
.RS 4
\fIkeys\fP List of initial keys for the key set 
.RE
.PP
\fBReturns\fP
.RS 4
New key set containing the specified initial keys 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetException\fP on allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.cut (\fBKey\fP cutpoint)\fC [inline]\fP"

.PP
Creates new key set with help of a cut point\&. 
.PP
\fBParameters\fP
.RS 4
\fIcutpoint\fP \fBKey\fP that is used as cutting point 
.RE
.PP
\fBReturns\fP
.RS 4
New \fBKeySet\fP containing all keys until the cutting point 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
cutpoint 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeySetException\fP if
.PP
.nf
cutpoint 

.fi
.PP
 is missing a key name or on allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "Iterator<\fBKey\fP> org\&.libelektra\&.KeySet\&.descendingIterator ()\fC [inline]\fP"

.PP

.PP
\fBReturns\fP
.RS 4
New \fBDescendingKeySetIterator\fP backed by this \fBKeySet\fP 
.RE
.PP

.SS "NavigableSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.descendingSet ()\fC [inline]\fP"

.PP

.PP
\fBReturns\fP
.RS 4
New \fBDescendingKeySetView\fP backed by this \fBKeySet\fP 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.dup ()\fC [inline]\fP"

.PP
Duplicates the key set\&. 
.PP
\fBReturns\fP
.RS 4
New \fBKeySet\fP containing the same key references as this \fBKeySet\fP does 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.first ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINoSuchElementException\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.floor (\fBKey\fP key)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "Pointer org\&.libelektra\&.KeySet\&.getPointer ()\fC [inline]\fP, \fC [protected]\fP"

.PP
\fBReturns\fP
.RS 4
JNA pointer to the native pointer for this key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "SortedSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.headSet (\fBKey\fP toElement)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
toElement 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIIllegalArgumentException\fP 
.RE
.PP

.SS "NavigableSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.headSet (\fBKey\fP toElement, boolean inclusive)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
toElement 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIIllegalArgumentException\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.higher (\fBKey\fP key)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "int org\&.libelektra\&.KeySet\&.indexOf (\fBKey\fP key)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIkey\fP \fBKey\fP to look for 
.RE
.PP
\fBReturns\fP
.RS 4
Index of the
.PP
.nf
key 

.fi
.PP
 in this \fBKeySet\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if \fBKeySet\fP or
.PP
.nf
key 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
key 

.fi
.PP
 was not found in this \fBKeySet\fP 
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.isEmpty ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "Iterator<\fBKey\fP> org\&.libelektra\&.KeySet\&.iterator ()\fC [inline]\fP"

.PP

.PP
\fBReturns\fP
.RS 4
New \fBKeySetIterator\fP backed by this \fBKeySet\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.last ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINoSuchElementException\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.lookup (\fBKey\fP find)\fC [inline]\fP"

.PP
Search for a key in the key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP \fBKey\fP used in search 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP if search successful, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
key 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.PP
#contains(Object) 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.lookup (String find)\fC [inline]\fP"

.PP
Search for a key in the key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP \fBKey\fP name used in search 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP if search successful, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
find 

.fi
.PP
 is \fBblank\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.lower (\fBKey\fP key)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.pollFirst ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.pollLast ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "void org\&.libelektra\&.KeySet\&.release ()\fC [inline]\fP"

.PP
Clean-up method to release key set reference by trying to free the native reference
.br
 
.br
 Call this method if you have obtained a \fBKeySet\fP via any of its public methods or {\fB} and you do not longer need it\&. \fPIf you do not manually release such \fBkey sets\fP, they will get cleaned up by garbage collection as soon as they get phantom reachable\&. Therefore its encouraged to release \fBkey set instances\fP as soon as you do not use them anymore\&. 
.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.remove (int cursor)\fC [inline]\fP"

.PP
Returns key from key set and also removes it from the set\&. 
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP Cursor position of the key to remove; starting from 0 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP found at given cursor position 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fIIndexOutOfBoundsException\fP if position is out of bounds 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.remove (Object o)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP
\fBSee also\fP
.RS 4
\fBremove(ReadableKey)\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.remove (\fBReadableKey\fP key)\fC [inline]\fP"

.PP
Removes the specified key from key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP \fBKey\fP to remove 
.RE
.PP
\fBReturns\fP
.RS 4
Removed \fBKey\fP from the key set, matching the specified
.PP
.nf
key 

.fi
.PP
 's name\&. May or may not reference the same native key resource\&. \fBOptional#empty()\fP if the specified 
.PP
.nf
key 

.fi
.PP
 was not found\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if \fBKeySet\fP or
.PP
.nf
key 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
key 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBremove(Object)\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.remove (String find)\fC [inline]\fP"

.PP
Removes the key with the specified name from key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP Name of the key to remove 
.RE
.PP
\fBReturns\fP
.RS 4
Removed \fBKey\fP from the key set, matching the specified
.PP
.nf
key 

.fi
.PP
 's name\&. {\fB} if the no key matching the specified name was not found\&.  IllegalStateException if this  KeySet} has already been released  IllegalArgumentException if find  is  String#isBlank() blank} \fP
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.removeAll (Collection<?> c)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if the specified collection is
.PP
.nf
null 

.fi
.PP
 or contains
.PP
.nf
null 

.fi
.PP
 elements 
.RE
.PP

.SS "boolean org\&.libelektra\&.KeySet\&.retainAll (Collection<?> c)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if the specified collection is
.PP
.nf
null 

.fi
.PP
 or contains
.PP
.nf
null 

.fi
.PP
 elements 
.RE
.PP

.SS "int org\&.libelektra\&.KeySet\&.size ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "NavigableSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.subSet (\fBKey\fP fromElement, boolean fromInclusive, \fBKey\fP toElement, boolean toInclusive)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
fromElement 

.fi
.PP
 or
.PP
.nf
toElement 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIIllegalArgumentException\fP 
.RE
.PP

.SS "SortedSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.subSet (\fBKey\fP fromElement, \fBKey\fP toElement)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
fromElement 

.fi
.PP
 or
.PP
.nf
toElement 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIIllegalArgumentException\fP 
.RE
.PP

.SS "SortedSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.tailSet (\fBKey\fP fromElement)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
fromElement 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIIllegalArgumentException\fP 
.RE
.PP

.SS "NavigableSet<\fBKey\fP> org\&.libelektra\&.KeySet\&.tailSet (\fBKey\fP fromElement, boolean inclusive)\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.br
\fINullPointerException\fP if
.PP
.nf
fromElement 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIIllegalArgumentException\fP 
.RE
.PP

.SS "Object [] org\&.libelektra\&.KeySet\&.toArray ()\fC [inline]\fP"

.PP

.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.KeySet\&.toString ()\fC [inline]\fP"

.PP
Iterates though all keys in this key set and appends their representation to the output\&. Uses the \fBtoString()\fP function of the \fBKey\fP objects\&.
.PP
\fBReturns\fP
.RS 4
Represents this \fBKeySet\fP as string 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
