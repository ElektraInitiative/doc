.TH "org.libelektra.KDBException" 3elektra "Mon Oct 4 2021" "Version 0.9.8" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.KDBException \- Wraps Elektra errors into the corresponding Java exceptions\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits Exception\&.
.PP
Inherited by org\&.libelektra\&.exception\&.ConflictingStateException, org\&.libelektra\&.exception\&.PermanentException, and org\&.libelektra\&.exception\&.ValidationException\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBreleaseErrorKey\fP ()"
.br
.RI "Release the key backing this \fBKDBException\fP\&. "
.ti -1c
.RI "\fBKey\fP \fBgetErrorKey\fP ()"
.br
.ti -1c
.RI "String \fBgetErrorNumber\fP ()"
.br
.ti -1c
.RI "String \fBgetConfigFile\fP ()"
.br
.ti -1c
.RI "String \fBgetMountpoint\fP ()"
.br
.ti -1c
.RI "String \fBgetDebugInformation\fP ()"
.br
.ti -1c
.RI "String \fBgetModule\fP ()"
.br
.ti -1c
.RI "String \fBgetReason\fP ()"
.br
.ti -1c
.RI "String \fBgetMessage\fP ()"
.br
.ti -1c
.RI "boolean \fBhasWarnings\fP ()"
.br
.RI "If an error occurred it may also has important warnings which caused the error\&. "
.ti -1c
.RI "List< WarningEntry > \fBgetWarnings\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBKDBException\fP \fBgetMappedException\fP (\fBKey\fP errorKey)"
.br
.RI "Extracts warnings and error information and maps it to an appropriate exception\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBKDBException\fP (\fBKey\fP errorKey)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Wraps Elektra errors into the corresponding Java exceptions\&. 


.PP
\fBSee also\fP
.RS 4
\fBreleaseErrorKey()\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.libelektra\&.KDBException\&.KDBException (\fBKey\fP errorKey)\fC [inline]\fP, \fC [protected]\fP"

.PP
\fBParameters\fP
.RS 4
\fIerrorKey\fP \fBKey\fP containing
.PP
.nf
error/* 

.fi
.PP
 and
.PP
.nf
warnings/* 

.fi
.PP
 meta keys 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "String org\&.libelektra\&.KDBException\&.getConfigFile ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
The affected configuration file of the error or if not available returns the error key name 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.KDBException\&.getDebugInformation ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Elektra specific debug information in the form of 'At: file:line' 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KDBException\&.getErrorKey ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBKey\fP containing
.PP
.nf
error/* 

.fi
.PP
 and
.PP
.nf
warnings/* 

.fi
.PP
 meta keys backing this exception 
.RE
.PP

.SS "String org\&.libelektra\&.KDBException\&.getErrorNumber ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Elektra error number read from the error key backing this exception 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "static \fBKDBException\fP org\&.libelektra\&.KDBException\&.getMappedException (\fBKey\fP errorKey)\fC [inline]\fP, \fC [static]\fP"

.PP
Extracts warnings and error information and maps it to an appropriate exception\&. 
.PP
\fBParameters\fP
.RS 4
\fIerrorKey\fP \fBKey\fP containing
.PP
.nf
error/* 

.fi
.PP
 and
.PP
.nf
warnings/* 

.fi
.PP
 meta keys 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKDBException\fP corresponding to the error information 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this
.PP
.nf
errorKey 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
errorKey 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "String org\&.libelektra\&.KDBException\&.getMessage ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
The complete error information in a String with config file, mount point and debug information as it would be printed in the terminal 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.KDBException\&.getModule ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Module which issued the error 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.KDBException\&.getMountpoint ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Mountpoint of the configuration 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.KDBException\&.getReason ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Error reason read from the error key backing this exception 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released 
.RE
.PP

.SS "List<WarningEntry> org\&.libelektra\&.KDBException\&.getWarnings ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Additional warnings emitted with the error 
.RE
.PP

.SS "boolean org\&.libelektra\&.KDBException\&.hasWarnings ()\fC [inline]\fP"

.PP
If an error occurred it may also has important warnings which caused the error\&. 
.PP
\fBReturns\fP
.RS 4
True if additional warnings were emitted, false otherwise 
.RE
.PP

.SS "void org\&.libelektra\&.KDBException\&.releaseErrorKey ()\fC [inline]\fP"

.PP
Release the key backing this \fBKDBException\fP\&. 
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this error key backing this \fBKDBException\fP has already been released @apiNote If this exception does not terminate your process, consider releasing the backing error key after processing it 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
