.TH "md_src_plugins_enum_README" 3elektra "Tue Feb 27 2018" "Version 0.8.22" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_enum_READMEPlugin: enum 
 \- 
.IP "\(bu" 2
infos = Information about the enum plugin is in keys below
.IP "\(bu" 2
infos/author = Thomas Waser thomas.waser@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = check
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = presetstorage postgetstorage
.IP "\(bu" 2
infos/status = productive maintained unittest tested nodep libc
.IP "\(bu" 2
infos/metadata = check/enum check/enum/# check/enum/multi
.IP "\(bu" 2
infos/description = validates values against enum
.PP
.PP
The enum plugin checks string values of Keys by comparing it against a list of valid values\&.
.PP
.SS "Usage"
.PP
The plugin checks every Key in the Keyset for the Metakey \fCcheck/enum\fP containing a list with the syntax `'string1', 'string2', 'string3', \&.\&.\&., 'stringN'` and compares each value with the string value of the Key\&. If no match is found an error is returned\&.
.PP
Alternatively, if \fCcheck/enum\fP starts with \fC#\fP, a meta array \fCcheck/enum\fP is used\&. For example: 
.PP
.nf
check/enum = #3
check/enum/#0 = small
check/enum/#1 = middle
check/enum/#2 = large
check/enum/#3 = huge

.fi
.PP
.PP
Furthermore \fCcheck/enum/multi\fP may contain a separator character, that separates multiple allowed occurrences\&. For example: 
.PP
.nf
check/enum/multi = _

.fi
.PP
.PP
Then the value \fCmiddle_small\fP would validate\&. But \fCmiddle_small_small\fP would fail because every entry might only occur once\&.
.PP
## Example 
.PP
.nf
# Backup-and-Restore:/examples/enum

sudo kdb mount enum\&.ecf /examples/enum enum dump

# valid initial value + setup valid enum list
kdb set /examples/enum/value middle
kdb setmeta user/examples/enum/value check/enum "'low', 'middle', 'high'"

# should succeed
kdb set /examples/enum/value low

# should fail with error 121
kdb set /examples/enum/value no
# RET:5
# ERROR:121

.fi
.PP
 Or with multi-enums: 
.PP
.nf
# valid initial value + setup array with valid enums
kdb set /examples/enum/multivalue middle_small
kdb setmeta user/examples/enum/multivalue check/enum/#0 small
kdb setmeta user/examples/enum/multivalue check/enum/#1 middle
kdb setmeta user/examples/enum/multivalue check/enum/#2 large
kdb setmeta user/examples/enum/multivalue check/enum/#3 huge
kdb setmeta user/examples/enum/multivalue check/enum/multi _
kdb setmeta user/examples/enum/multivalue check/enum "#3"

# should succeed
kdb set /examples/enum/multivalue ___small_middle__

# should fail with error 121
kdb set /examples/enum/multivalue ___all_small__
# RET:5
# ERROR:121

# cleanup
kdb rm -r /examples/enum
sudo kdb umount /examples/enum

.fi
.PP
.PP
.SS "Limitations"
.PP
You cannot give enum values specific values\&. If you only want to check for numerical values, the plugin \fBrange\fP is better suited\&. 
