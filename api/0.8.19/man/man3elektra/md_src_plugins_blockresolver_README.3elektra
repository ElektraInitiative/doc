.TH "md_src_plugins_blockresolver_README" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_blockresolver_README \- Plugin: blockresolver 

.IP "\(bu" 2
infos = Information about the blockresolver plugin is in keys below
.IP "\(bu" 2
infos/author = Name name@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides = resolver
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = rollback getresolver setresolver commit
.IP "\(bu" 2
infos/status = maintained conformant compatible coverage specific unittest tested nodep libc configurable preview experimental difficult unfinished concept
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = resolver for parts in a file configuration file
.PP
.PP
The \fCblockresolver\fP can be used to only resolve a tagged block inside a configuration file\&.
.PP
.SS "Implementation details"
.PP
\fCblockresolver\fP extracts the requested block from the configurations file and writes it into a temporary file\&. Afterwards Elektra will only work on the temporary file until kdbSet is called\&. On kdbSet the contents of the temporary file will be merged with parts outside of the requested block from the original file\&.
.PP
.SS "Usage"
.PP
.PP
.nf
`kdb mount -R blockresolver /path/to/my/file /mountpoint -c identifier="identifier-tag"`
.fi
.PP
.PP
where \fCidentifier\fP specifies the tag \fCblockresolver\fP will search for in the configuration file\&.
.PP
A block consists of 2 parts:
.IP "\(bu" 2
beginning: the identifier suffixed with \fCstart\fP
.IP "\(bu" 2
end: the identifier suffixed with \fCstop\fP
.PP
.PP
.SS "Limitations"
.PP
Currently the identifier must be unique\&.
.PP
.SS "Example"
.PP
``` 
.SH "Backup-and-Restore:system/examples/blockresolver"
.PP
.PP
sudo kdb mount -R blockresolver /tmp/test\&.block system/examples/blockresolver -c identifier='>>> block config' ini # 
.SH "create testfile"
.PP
.PP
# $ echo 'text' > /tmp/test\&.block $ echo 'more text' >> /tmp/test\&.block $ echo 'some more text' >> /tmp/test\&.block $ echo '>>> block config start' >> /tmp/test\&.block $ echo '[section1]' >> /tmp/test\&.block $ echo 'key1 = val1' >> /tmp/test\&.block $ echo '[section2]' >> /tmp/test\&.block $ echo 'key2 = val2' >> /tmp/test\&.block $ echo '>>> block config stop' >> /tmp/test\&.block $ echo 'text again' >> /tmp/test\&.block $ echo 'and more text' >> /tmp/test\&.block $ echo 'text' >> /tmp/test\&.block # 
.SH "check testfile"
.PP
.PP
# $ cat /tmp/test\&.block text more text some more text 
.PP
.RS 4

.PP
.RS 4

.PP
.RS 4
block config start 
.RE
.PP
.RE
.PP
.RE
.PP
[section1] key1 = val1 [section2] key2 = val2 
.PP
.RS 4

.PP
.RS 4

.PP
.RS 4
block config stop 
.RE
.PP
.RE
.PP
.RE
.PP
text again and more text text # 
.SH "only the block between the tags is read!"
.PP
.PP
# kdb export system/examples/blockresolver ini [section1] key1 = val1 [section2] key2 = val2 # 
.SH "add a new key to the resolved block"
.PP
.PP
# kdb set system/examples/blockresolver/section1/key12 val12 # $ cat /tmp/test\&.block text more text some more text 
.PP
.RS 4

.PP
.RS 4

.PP
.RS 4
block config start 
.RE
.PP
.RE
.PP
.RE
.PP
[section1] key1 = val1 key12 = val12 [section2] key2 = val2 
.PP
.RS 4

.PP
.RS 4

.PP
.RS 4
block config stop 
.RE
.PP
.RE
.PP
.RE
.PP
text again and more text text # 
.SH "cleanup"
.PP
.PP
# kdb rm -r system/examples/blockresolver sudo kdb umount system/examples/blockresolver ``` 
