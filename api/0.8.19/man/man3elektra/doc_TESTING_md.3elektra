.TH "doc_TESTING_md" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_TESTING_md \- Testing 

.SS "Introduction"
.PP
Libraries need a pervasive testing for continuous improvement\&. Any problem found and behaviour described must be written down as test and integrated so that after running all tests in the build directory: 
.PP
.nf
make run_all

.fi
.PP
.PP
and on the target (installed) system: 
.PP
.nf
kdb run_all

.fi
.PP
.PP
it is assured that no new regressions were added\&. To run memcheck tests run in the build directory: 
.PP
.nf
make run_memcheck

.fi
.PP
.PP
For tests in the build directory ctest is used, so you alternatively also can call ctest with its options\&. On the target (installed) system our own scripts drive the tests\&.
.PP
Some tests write into system paths\&. If the access is denied, several tests will fail\&. You have some options to avoid running them as root:
.PP
.IP "1." 4
To void running the problematic test cases (reduces the test coverage!) run ctest without tests that have the label \fCkdbtests\fP: \fCctest --output-on-failure -LE kdbtests\fP
.IP "2." 4
To give your user the permissions to the relevant paths, i\&.e\&. (once as root): ``` kdb mount-info chown -R \fCwhoami\fP \fCkdb get system/info/constants/cmake/CMAKE_INSTALL_PREFIX\fP/\fCkdb get system/info/constants/cmake/KDB_DB_SPEC\fP chown -R \fCwhoami\fP \fCkdb get system/info/constants/cmake/KDB_DB_SYSTEM\fP ``` After that all test cases should run successfully as described above\&.
.IP "3." 4
Compile Elektra so that system paths are not actual system paths, e\&.g\&. to write everything into the home directory (\fC~\fP) use cmake options: \fC-DKDB_DB_SYSTEM='~/\&.config/kdb/system' -DKDB_DB_SPEC='~/\&.config/kdb/spec'\fP (for another example with ini see \fCscripts/configure-home\fP)
.IP "4." 4
Use the XDG resolver (see \fCscripts/configure-xdg\fP) and set the environment variable \fCXDG_CONFIG_DIRS\fP, currently lacks spec namespaces, see #734\&.
.PP
.PP
.SS "Conventions"
.PP
.IP "\(bu" 2
All names of the test must start with test (needed by test driver for installed tests)\&.
.IP "\(bu" 2
No tests should run if ENABLE_TESTING is OFF\&.
.IP "\(bu" 2
All tests that access system/spec namespaces (e\&.g\&. mount something):
.IP "  \(bu" 4
should be tagged with kdbtests: 
.PP
.nf
 set_property(TEST testname PROPERTY LABELS kdbtests)

.fi
.PP

.IP "  \(bu" 4
should not run, if \fCENABLE_KDB_TESTING\fP is OFF\&.
.IP "  \(bu" 4
should only write below
.IP "    \(bu" 6
\fC/tests/<testname>\fP (e\&.g\&. \fC/tests/ruby\fP) and
.IP "    \(bu" 6
\fCsystem/elektra\fP (e\&.g\&. for mounts or globalplugins)\&.
.PP

.PP

.IP "\(bu" 2
If your test has memleaks, e\&.g\&. because the library used leaks and that cannot be fixed, give them the label memleak with following command:
.PP
set_property(TEST testname PROPERTY LABELS memleak)
.PP
.PP
.SS "Strategy"
.PP
The testing must happen on every level of the software to achieve a maximum coverage with the available time\&. In the rest of the document we describe the different levels and where these tests are\&.
.PP
.SS "CFramework"
.PP
This is basically a bunch of assertion macros and some output facilities\&. It is written in pure C and very lightweight\&.
.PP
It is located \fBhere\fP\&.
.PP
.SS "ABI Tests"
.PP
C ABI Tests are written in plain C with the help of cframework\&.
.PP
The main purpose of these tests are, that the binaries of old versions can be used against new versions as ABI tests\&.
.PP
So lets say we compile Elektra 0\&.8\&.8 (at this version dedicated ABI tests were introduced) in the \fC-full\fP variant\&. But when we run the tests, we use \fClibelektra-full\&.so\&.0\&.8\&.9\fP (either by installing it or by setting \fCLD_LIBRARY_PATH\fP)\&. You can check with ldd which version is used\&.
.PP
The tests are located \fBhere\fP\&.
.PP
.SS "C Unit Tests"
.PP
C Unit Tests are written in plain C with the help of cframework\&.
.PP
It is used to test internal data structures of libelektra that are not ABI relevant\&.
.PP
ABI tests can be done on theses tests, too\&. But by nature from time to time these tests will fail\&.
.PP
They are located \fBhere\fP\&.
.PP
.SS "Internal Functions"
.PP
According to \fCsrc/libs/elektra/libelektra-symbols\&.map\fP, all functions starting with:
.PP
.IP "\(bu" 2
libelektra
.IP "\(bu" 2
elektra
.IP "\(bu" 2
kdb
.IP "\(bu" 2
key
.IP "\(bu" 2
ks
.PP
.PP
get exported\&. Functions not starting with this prefix are internal only and therefore not visible in the test cases\&. Test internal functionality by including the corresponding c file\&.
.PP
.SS "Module Tests"
.PP
The modules, which are typically used as plugins in Elektra (but can also be available statically or in the \fC-full\fP variant), should have their own tests\&.
.PP
Use the Cmake macro \fCadd_plugintest\fP for adding these tests\&.
.PP
.SS "C++ Unit Tests"
.PP
C++ Unit tests are done using the gtest framework\&. See \fBarchitectural decision\fP\&.
.PP
Use the CMake macro \fCadd_gtest\fP for adding these tests\&.
.PP
.SS "Script Tests"
.PP
Script test are done using POSIX shell + CMake\&. See \fBarchitectural decision\fP\&.
.PP
The script tests have different purposes:
.IP "\(bu" 2
End to End tests (usage of tools as a user would do)
.IP "\(bu" 2
External Compilation tests (compile and run programs as a user would do)
.IP "\(bu" 2
Conventions tests (do internal checks that check for common problems)
.IP "\(bu" 2
Meta Test Suites (run other test suites)
.PP
.PP
.SS "Fuzz Testing"
.PP
Copy some import files to testcase_dir and run: 
.PP
.nf
/usr/src/afl/afl-1.46b/./afl-fuzz -i testcase_dir -o findings_dir bin/kdb import user/tests

.fi
.PP
.PP
.SS "ASAN"
.PP
To enable sanitize checks use \fCENABLE_ASAN\fP via cmake\&.
.PP
Then, to use ASAN, run \fCrun_asan\fP in the build directory, which simply does: 
.PP
.nf
    ASAN_OPTIONS=symbolize=1 ASAN_SYMBOLIZER_PATH=$(shell which llvm-symbolizer) make run_all

.fi
.PP
.PP
It could also happen that you need to preload ASAN library, e\&.g\&.: 
.PP
.nf
    LD_PRELOAD=/usr/lib/clang/3.8.0/lib/linux/libclang_rt.asan-x86_64.so run_asan

.fi
.PP
.PP
or on Debian: 
.PP
.nf
    LD_PRELOAD=/usr/lib/llvm-3.8/lib/clang/3.8.1/lib/linux/libclang_rt.asan-x86_64.so run_asan

.fi
.PP
.PP
See also build server jobs:
.PP
.IP "\(bu" 2
\fCclang-asan\fP
.IP "\(bu" 2
\fCgcc-asan\fP
.PP
.PP
.SS "cbmc"
.PP
For bounded model checking tests, see \fCscripts/cbmc\fP\&.
.PP
.SS "Code Coverage"
.PP
Run: 
.PP
.nf
    make coverage-start
    # now run all tests! E.g.:
    make run_all
    make coverage-stop
    make coverage-genhtml

.fi
.PP
.PP
The htmls can be found in the build directory in the folder \fCcoverage\fP\&.
.PP
See also the build server job:
.PP
.IP "\(bu" 2
\fCgcc-asan\fP
.PP
.PP
.SS "See also"
.PP
.IP "\(bu" 2
\fBCOMPILE\fP\&.
.IP "\(bu" 2
\fBINSTALL\fP\&. 
.PP

