.TH "doc_GIT_md" 3elektra "Tue Feb 26 2019" "Version 0.8.26" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_GIT_mdGIT 
 \- 
.SS "Basic GIT Commands"
.PP
.PP
.nf
git add readme.md   // adds the changes of the file `readme.md` to the staging area
git add .           // adds all changes of files in the current directory (recursively) to the staging area
git add --all       // adds all changes of files in the repository to the staging area
git commit -a       // executes a commit that automatically stages all changed and deleted files before
.fi
.PP
.PP
.SS "Basic Configuration"
.PP
make sure to do: 
.PP
.nf
git config --global merge.ff false
git config merge.ff false

.fi
.PP
.PP
.SS "The Commit Message"
.PP
A commit message should have the following syntax: \fCcomponent: short change description\fP
.PP
For a clean and meaningful log the commit message should fulfil the following:
.PP
.IP "\(bu" 2
use imperative in the subject line
.IP "\(bu" 2
the subject line should not be longer than 50 characters
.IP "\(bu" 2
start the subject line with the module name (e\&.g\&. resolver:, cpp bindings:)
.IP "\(bu" 2
separate subject from body with a blank line
.IP "\(bu" 2
in the body describe in detail what you did, and possibly why
.IP "\(bu" 2
metadata like 'Fixes #123' should be kept at the bottom of the commit message and definitely not in the title
.PP
.PP
Most commits should have a longer description in the body\&.
.PP
.SS "Remote Branches"
.PP
To list all remote branches use: 
.PP
.nf
git branch -a

.fi
.PP
.PP
To checkout a remote branch initially use: 
.PP
.nf
git checkout -b <branchname> origin/<branchname>

.fi
.PP
.PP
Once you have done this, it will be a local branch, too\&. Following remote branches should exist: 
.PP
.nf
master

.fi
.PP
.PP
This is the development branch\&. Please try to not work directly on it, but instead you should use feature branches\&. So the only commits on master should be non-fastforward merges from features branches\&. Commits on master should always compile and all test cases should pass successfully\&. (see config option above) 
.PP
.nf
debian

.fi
.PP
.PP
Is the branch to be used to build debian packages\&. It additionally contains the debian folder\&. Only debian related commits should be on the debian branch - otherwise it should only contain --no-ff merges from master\&. (see config option above)
.PP
.SS "Local Branches"
.PP
You should always make your own feature branch with: 
.PP
.nf
git checkout -b <feature-branch-name>

.fi
.PP
.PP
On this branch it is not so important that every commit compiles or all test cases run\&.
.PP
To merge a branch use (no-fastforward): 
.PP
.nf
git merge --no-ff <branchname>

.fi
.PP
.PP
If you already did some commits, but want them in a branch, you can do: 
.PP
.nf
git branch foo
git reset HEAD^^  (for 2 commits back)
git reset origin/master

git-ref-log # recover
.fi
.PP
 
