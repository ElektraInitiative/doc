.TH "doc_decisions_4_decided_private_api_md" 3elektra "Fri Mar 3 2023" "Version 0.9.12" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_4_decided_private_api_md \- Private API 
 
.SH "Problem"
.PP
Only \fClibelektra-core\fP is supposed to access private data, but this contradicts the goal to keep the library minimal\&. \fC\fBkdbprivate\&.h\fP\fP was too generic, it contained many other parts next to the struct definitions of Key/KeySet\&. Theoretically everything in \fC\fBkdbprivate\&.h\fP\fP is supposed to be private, but lots of code still uses it when it shouldn't\&. \fCkdb\&.h\fP is also the only header that is definitely public\&. All other headers are anybody's guess\&.
.SH "Constraints"
.PP
.IP "\(bu" 2
The \fCC99 standard, section 5\&.2\&.4\&.1\fP gives following limit: 4095 external identifiers in one translation unit
.PP
.SH "Assumptions"
.PP
.SH "Considered Alternatives"
.PP
.IP "\(bu" 2
keep current situation, as described above
.PP
.SH "Decision"
.PP
.IP "\(bu" 2
Also allow other libraries (e\&.g\&. a new \fClibelektra-operations\fP) to access to non-public API\&. Such libraries need to have a good reason (e\&.g\&. performance, impossible otherwise, etc\&.) why they access non-public API and they need to be kept up-to-date\&. If a library cannot provide a stable API on top of the unstable non-public API, it clearly needs to state which APIs are not stable\&.
.IP "\(bu" 2
Put struct definitions of Key/KeySet in a separate header file, which gets included by parts that need it (see also \fBHeader File Structure\fP)\&.
.PP
.SH "Rationale"
.PP
.IP "\(bu" 2
allows various users (plugins, applications) to link to (more or less) exactly what they need
.IP "\(bu" 2
allows alternative implementation of parts of Elektra, e\&.g\&. a libcore written in Rust
.IP "\(bu" 2
facilitates code reuse between plugins
.IP "\(bu" 2
The \fCextern const\fP version constant(s) can be used for compatibility checks\&. In most cases, compatibility should be ensured via package management systems or manually by the user\&. Sometimes it may be possible to write code (e\&.g\&. in a third-party library) such that it is compatible with multiple versions of Elektra\&. In those cases, we need to know what version of Elektra is installed, so that the correct code can be executed\&. For example, if a new version accepts an argument to \fCfoo()\fP that previously wasn't allowed\&. An external library may be able to use this when available and use other code as a fallback in older versions\&.
.PP
.SH "Implications"
.PP
.IP "\(bu" 2
Any library that uses non-public API, but itself exposes a public API, must either
.IP "  \(bu" 4
hide breaking changes of the underlying non-public API
.IP "  \(bu" 4
increment it's major version, if an underlying non-public API causes an incompatible change
.PP

.IP "\(bu" 2
For some libraries (e\&.g\&. \fClibelektra-operations\fP) it might be easiest to require a specific version of \fClibelektra-core\fP\&. This cannot easily be enforced, so it must be well documented\&.
.IP "\(bu" 2
Plugins can safely be used as before, but loading may fail if there is a version mismatch (only important for third-party plugins)\&.
.PP
.SH "Related Decisions"
.PP
.IP "\(bu" 2
\fBHeader File Structure\fP
.PP
.SH "Notes"
.PP

