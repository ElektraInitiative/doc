.TH "md_src_plugins_enum_README" 3elektra "Tue Feb 16 2016" "Version 0.8.15" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_enum_README \- Plugin: enum 

.IP "\(bu" 2
infos = Information about the enum plugin is in keys below
.IP "\(bu" 2
infos/author = Thomas Waser thomas.waser@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = check
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = presetstorage
.IP "\(bu" 2
infos/status = productive maintained tested nodep libc nodoc
.IP "\(bu" 2
infos/metadata = check/enum
.IP "\(bu" 2
infos/description =
.PP
.PP
The Enum plugin checks string values of Keys by comparing it against a list of valid values\&.
.PP
.SS "Usage"
.PP
The plugin checks every Key in the Keyset for the Metakey \fCcheck/enum\fP containing a list with the syntax `'string1', 'string2', 'string3', \&.\&.\&., 'stringN'` and compares each value with the string value of the Key\&. If no match is found an error is returned\&.
.PP
.SS "Example"
.PP
.PP
.nf
    kdb mount enum.ecf /example/enum enum
    kdb set user/example/enum/value middle # init to something valid
    kdb setmeta user/example/enum/value check/enum "'low', 'middle', 'high'"
    kdb set user/example/enum/value low # success
    kdb set user/example/enum/value no  # fail.fi
.PP
 
