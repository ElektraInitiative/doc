.TH "highlevel" 3elektra "Tue Feb 26 2019" "Version 0.8.26" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
highlevel
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBELEKTRA_TAG_DECLARATIONS\fP(cType,  typeName)"
.br
.RI "Inserts the necessary declarations for a new Elektra Tag that can be used in combination with the generic getter and setter macros\&. "
.ti -1c
.RI "#define \fBELEKTRA_TAG_DEFINITIONS\fP(cType,  typeName,  KDB_TYPE,  VALUE_TO_STRING,  KEY_TO_VALUE)"
.br
.RI "Inserts the necessary definitions for an Elektra Tag declared with \fBELEKTRA_TAG_DECLARATIONS\fP\&. "
.ti -1c
.RI "#define \fBELEKTRA_TAG_VALUE\fP(tagName,  keyname,  typeName)"
.br
.RI "Inserts a new static instance of an Elektra Tag\&. "
.ti -1c
.RI "#define \fBelektraGet\fP(elektra,  tag)   ((tag)\&.get (elektra, &(tag)))"
.br
.ti -1c
.RI "#define \fBelektraGetArrayElement\fP(elektra,  tag,  index)   ((tag)\&.getArrayElement (elektra, &(tag), index))"
.br
.ti -1c
.RI "#define \fBelektraSet\fP(elektra,  tag,  value,  error)   ((tag)\&.set (elektra, &(tag), value, error))"
.br
.ti -1c
.RI "#define \fBelektraSetArrayElement\fP(elektra,  tag,  index,  value,  error)   ((tag)\&.setArrayElement (elektra, &(tag), index, value, error))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBelektraFatalError\fP (Elektra *elektra, ElektraError *fatalError)"
.br
.RI "Promote an ElektraError to fatal and call the fatal error handler\&. "
.ti -1c
.RI "void \fBelektraFatalErrorHandler\fP (Elektra *elektra, ElektraErrorHandler fatalErrorHandler)"
.br
.RI "Sets the fatal error handler that will be called, whenever a fatal error occurs\&. "
.ti -1c
.RI "void \fBelektraClose\fP (Elektra *elektra)"
.br
.RI "Releases all resources used by the given elektra instance\&. "
.ti -1c
.RI "kdb_long_long_t \fBelektraArraySize\fP (Elektra *elektra, const char *name)"
.br
.RI "Gets the size of an array\&. "
.ti -1c
.RI "Key * \fBelektraFindArrayElementKey\fP (Elektra *elektra, const char *name, kdb_long_long_t index, KDBType type)"
.br
.RI "Helper function for code generation\&. "
.ti -1c
.RI "KDBType \fBelektraGetArrayElementType\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Reads the type metadata of a given array element\&. "
.ti -1c
.RI "const char * \fBelektraGetRawStringArrayElement\fP (Elektra *elektra, const char *name, kdb_long_long_t index)"
.br
.RI "Get the raw string value of an array element key\&. "
.ti -1c
.RI "void \fBelektraSetRawStringArrayElement\fP (Elektra *elektra, const char *name, kdb_long_long_t index, const char *value, KDBType type, ElektraError **error)"
.br
.RI "Set the raw string value of an array element key\&. "
.ti -1c
.RI "const char * \fBelektraGetStringArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a string value array element\&. "
.ti -1c
.RI "kdb_boolean_t \fBelektraGetBooleanArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a boolean value array element\&. "
.ti -1c
.RI "kdb_char_t \fBelektraGetCharArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a char value array element\&. "
.ti -1c
.RI "kdb_octet_t \fBelektraGetOctetArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a octet value array element\&. "
.ti -1c
.RI "kdb_short_t \fBelektraGetShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a short value array element\&. "
.ti -1c
.RI "kdb_unsigned_short_t \fBelektraGetUnsignedShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a unsigned short value array element\&. "
.ti -1c
.RI "kdb_long_t \fBelektraGetLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a long value array element\&. "
.ti -1c
.RI "kdb_unsigned_long_t \fBelektraGetUnsignedLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a unsigned long value array element\&. "
.ti -1c
.RI "kdb_long_long_t \fBelektraGetLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a long long value array element\&. "
.ti -1c
.RI "kdb_unsigned_long_long_t \fBelektraGetUnsignedLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a unsigned long long value array element\&. "
.ti -1c
.RI "kdb_float_t \fBelektraGetFloatArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a float value array element\&. "
.ti -1c
.RI "kdb_double_t \fBelektraGetDoubleArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index)"
.br
.RI "Gets a double value array element\&. "
.ti -1c
.RI "void \fBelektraSetStringArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, const char *value, ElektraError **error)"
.br
.RI "Sets a string value array element\&. "
.ti -1c
.RI "void \fBelektraSetBooleanArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_boolean_t value, ElektraError **error)"
.br
.RI "Sets a boolean value array element\&. "
.ti -1c
.RI "void \fBelektraSetCharArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_char_t value, ElektraError **error)"
.br
.RI "Sets a char value array element\&. "
.ti -1c
.RI "void \fBelektraSetOctetArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_octet_t value, ElektraError **error)"
.br
.RI "Sets a octet value array element\&. "
.ti -1c
.RI "void \fBelektraSetShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_short_t value, ElektraError **error)"
.br
.RI "Sets a short value array element\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedShortArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_unsigned_short_t value, ElektraError **error)"
.br
.RI "Sets a unsigned short value array element\&. "
.ti -1c
.RI "void \fBelektraSetLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_long_t value, ElektraError **error)"
.br
.RI "Sets a long value array element\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_unsigned_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long value array element\&. "
.ti -1c
.RI "void \fBelektraSetLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_long_long_t value, ElektraError **error)"
.br
.RI "Sets a long long value array element\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLongLongArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_unsigned_long_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long long value array element\&. "
.ti -1c
.RI "void \fBelektraSetFloatArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_float_t value, ElektraError **error)"
.br
.RI "Sets a float value array element\&. "
.ti -1c
.RI "void \fBelektraSetDoubleArrayElement\fP (Elektra *elektra, const char *keyname, kdb_long_long_t index, kdb_double_t value, ElektraError **error)"
.br
.RI "Sets a double value array element\&. "
.ti -1c
.RI "ElektraErrorCode \fBelektraErrorCode\fP (const ElektraError *error)"
.br
.ti -1c
.RI "const char * \fBelektraErrorDescription\fP (const ElektraError *error)"
.br
.ti -1c
.RI "\fBElektraErrorSeverity\fP \fBelektraErrorSeverity\fP (const ElektraError *error)"
.br
.ti -1c
.RI "int \fBelektraKDBErrorCode\fP (const ElektraError *error)"
.br
.ti -1c
.RI "const char * \fBelektraKDBErrorDescription\fP (const ElektraError *error)"
.br
.ti -1c
.RI "\fBElektraErrorSeverity\fP \fBelektraKDBErrorSeverity\fP (const ElektraError *error)"
.br
.ti -1c
.RI "ElektraKDBErrorGroup \fBelektraKDBErrorGroup\fP (const ElektraError *error)"
.br
.ti -1c
.RI "ElektraKDBErrorModule \fBelektraKDBErrorModule\fP (const ElektraError *error)"
.br
.ti -1c
.RI "const char * \fBelektraKDBErrorReason\fP (const ElektraError *error)"
.br
.ti -1c
.RI "int \fBelektraKDBErrorWarningCount\fP (const ElektraError *error)"
.br
.ti -1c
.RI "ElektraError * \fBelektraKDBErrorGetWarning\fP (const ElektraError *error, int index)"
.br
.ti -1c
.RI "Key * \fBelektraKDBErrorKey\fP (const ElektraError *error)"
.br
.ti -1c
.RI "void \fBelektraErrorReset\fP (ElektraError **error)"
.br
.RI "Frees the memory used by the error and sets the referenced error variable to NULL\&. "
.ti -1c
.RI "Key * \fBelektraFindKey\fP (Elektra *elektra, const char *name, KDBType type)"
.br
.RI "Helper function for code generation\&. "
.ti -1c
.RI "KDBType \fBelektraGetType\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Reads the type metadata of a given key\&. "
.ti -1c
.RI "const char * \fBelektraGetRawString\fP (Elektra *elektra, const char *name)"
.br
.RI "Get the raw string value of a key\&. "
.ti -1c
.RI "void \fBelektraSetRawString\fP (Elektra *elektra, const char *name, const char *value, KDBType type, ElektraError **error)"
.br
.RI "Set the raw string value of a key\&. "
.ti -1c
.RI "const char * \fBelektraGetString\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a string value\&. "
.ti -1c
.RI "kdb_boolean_t \fBelektraGetBoolean\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a boolean value\&. "
.ti -1c
.RI "kdb_char_t \fBelektraGetChar\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a char value\&. "
.ti -1c
.RI "kdb_octet_t \fBelektraGetOctet\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a octet value\&. "
.ti -1c
.RI "kdb_short_t \fBelektraGetShort\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a short value\&. "
.ti -1c
.RI "kdb_unsigned_short_t \fBelektraGetUnsignedShort\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a unsigned short value\&. "
.ti -1c
.RI "kdb_long_t \fBelektraGetLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a long value\&. "
.ti -1c
.RI "kdb_unsigned_long_t \fBelektraGetUnsignedLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a unsigned long value\&. "
.ti -1c
.RI "kdb_long_long_t \fBelektraGetLongLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a long long value\&. "
.ti -1c
.RI "kdb_unsigned_long_long_t \fBelektraGetUnsignedLongLong\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a long long value\&. "
.ti -1c
.RI "kdb_float_t \fBelektraGetFloat\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a float value\&. "
.ti -1c
.RI "kdb_double_t \fBelektraGetDouble\fP (Elektra *elektra, const char *keyname)"
.br
.RI "Gets a double value\&. "
.ti -1c
.RI "void \fBelektraSetString\fP (Elektra *elektra, const char *keyname, const char *value, ElektraError **error)"
.br
.RI "Sets a string value\&. "
.ti -1c
.RI "void \fBelektraSetBoolean\fP (Elektra *elektra, const char *keyname, kdb_boolean_t value, ElektraError **error)"
.br
.RI "Sets a boolean value\&. "
.ti -1c
.RI "void \fBelektraSetChar\fP (Elektra *elektra, const char *keyname, kdb_char_t value, ElektraError **error)"
.br
.RI "Sets a char value\&. "
.ti -1c
.RI "void \fBelektraSetOctet\fP (Elektra *elektra, const char *keyname, kdb_octet_t value, ElektraError **error)"
.br
.RI "Sets a octet value\&. "
.ti -1c
.RI "void \fBelektraSetShort\fP (Elektra *elektra, const char *keyname, kdb_short_t value, ElektraError **error)"
.br
.RI "Sets a short value\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedShort\fP (Elektra *elektra, const char *keyname, kdb_unsigned_short_t value, ElektraError **error)"
.br
.RI "Sets a unsigned short value\&. "
.ti -1c
.RI "void \fBelektraSetLong\fP (Elektra *elektra, const char *keyname, kdb_long_t value, ElektraError **error)"
.br
.RI "Sets a long value\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLong\fP (Elektra *elektra, const char *keyname, kdb_unsigned_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long value\&. "
.ti -1c
.RI "void \fBelektraSetLongLong\fP (Elektra *elektra, const char *keyname, kdb_long_long_t value, ElektraError **error)"
.br
.RI "Sets a long long value\&. "
.ti -1c
.RI "void \fBelektraSetUnsignedLongLong\fP (Elektra *elektra, const char *keyname, kdb_unsigned_long_long_t value, ElektraError **error)"
.br
.RI "Sets a unsigned long long value\&. "
.ti -1c
.RI "void \fBelektraSetFloat\fP (Elektra *elektra, const char *keyname, kdb_float_t value, ElektraError **error)"
.br
.RI "Sets a float value\&. "
.ti -1c
.RI "void \fBelektraSetDouble\fP (Elektra *elektra, const char *keyname, kdb_double_t value, ElektraError **error)"
.br
.RI "Sets a double value\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define ELEKTRA_TAG_DECLARATIONS(cType, typeName)"
\fBValue:\fP
.PP
.nf
ELEKTRA_TAG (typeName)                                                                                                             \
        {                                                                                                                                  \
                const char * keyName;                                                                                                      \
                cType (*get) ELEKTRA_GET_BY_TAG_PARAMS (typeName);                                                                         \
                cType (*getArrayElement) ELEKTRA_GET_ARRAY_ELEMENT_BY_TAG_PARAMS (typeName);                                               \
                void(*set) ELEKTRA_SET_BY_TAG_PARAMS (cType, typeName);                                                                    \
                void(*setArrayElement) ELEKTRA_SET_ARRAY_ELEMENT_BY_TAG_PARAMS (cType, typeName);                                          \
        };                                                                                                                                 \
                                                                                                                                           \
        ELEKTRA_GET_BY_TAG_SIGNATURE (cType, typeName);                                                                                    \
        ELEKTRA_GET_ARRAY_ELEMENT_BY_TAG_SIGNATURE (cType, typeName);                                                                      \
                                                                                                                                           \
        ELEKTRA_SET_BY_TAG_SIGNATURE (cType, typeName);                                                                                    \
        ELEKTRA_SET_ARRAY_ELEMENT_BY_TAG_SIGNATURE (cType, typeName);
.fi
.PP
Inserts the necessary declarations for a new Elektra Tag that can be used in combination with the generic getter and setter macros\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcType\fP The C-Type of the value described by the tag\&. 
.br
\fItypeName\fP The unique identifier of this type that can be used as part of a C identifier\&. 
.RE
.PP

.SS "#define ELEKTRA_TAG_DEFINITIONS(cType, typeName, KDB_TYPE, VALUE_TO_STRING, KEY_TO_VALUE)"

.PP
Inserts the necessary definitions for an Elektra Tag declared with \fBELEKTRA_TAG_DECLARATIONS\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcType\fP Exact same value as in \fBELEKTRA_TAG_DECLARATIONS\fP 
.br
\fItypeName\fP Exact same value as in \fBELEKTRA_TAG_DECLARATIONS\fP 
.br
\fIKDB_TYPE\fP The KDBType used in the type metadata of a Key\&. 
.br
\fIVALUE_TO_STRING\fP A function which converts a value of type \fCcType\fP into a string\&. The string must be allocated with \fBelektraMalloc()\fP, so that it can be freed with \fBelektraFree()\fP\&. 
.br
\fIKEY_TO_VALUE\fP A function which takes a Key an pointer to a variable of type \fCcType\fP and tries to convert the Key into \fCcType\fP\&. The function must return 1 on success and 0 otherwise\&. The supermacro 'macros/type_create_to_value\&.h' may be used to create such a function\&. 
.RE
.PP

.SS "#define ELEKTRA_TAG_VALUE(tagName, keyname, typeName)"
\fBValue:\fP
.PP
.nf
static const ELEKTRA_TAG (typeName) ELEKTRA_TAG_NAME (tagName) = {                                                                 \
                (keyname),                                                                                                                 \
                ELEKTRA_GET_BY_TAG (typeName),                                                                                             \
                ELEKTRA_GET_ARRAY_ELEMENT_BY_TAG (typeName),                                                                               \
                ELEKTRA_SET_BY_TAG (typeName),                                                                                             \
                ELEKTRA_SET_ARRAY_ELEMENT_BY_TAG (typeName),                                                                               \
        };
.fi
.PP
Inserts a new static instance of an Elektra Tag\&. 
.PP
\fBParameters:\fP
.RS 4
\fItagName\fP The name of the new Tag instance\&. Will be prefixed with \fCELEKTRA_TAG_\fP\&. 
.br
\fIkeyname\fP The name of the key this Tag instance corresponds to\&. 
.br
\fItypeName\fP Exact same value as in \fBELEKTRA_TAG_DECLARATIONS\fP\&. This value is used to identify which kind of tag should be created\&. 
.RE
.PP

.SS "#define elektraGet(elektra, tag)   ((tag)\&.get (elektra, &(tag)))"

.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance initialized with the parent key\&. 
.br
\fIname\fP The keyname to look up\&. The keyname is appended to the parent key\&. 
.br
\fIindex\fP The array index of the desired element, starting with 0\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value stored at the given key and index\&. 
.RE
.PP

.SS "#define elektraGetArrayElement(elektra, tag, index)   ((tag)\&.getArrayElement (elektra, &(tag), index))"

.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance initialized with the parent key\&. 
.br
\fIkeyName\fP The keyname (or a codegenerated Tag) to look up\&. The keyname is appended to the parent key\&. 
.br
\fIvalue\fP The new value\&. 
.br
\fIindex\fP The array index of the desired element, starting with 0\&. \\ 
.RE
.PP
\fBReturns:\fP
.RS 4
The value stored at the given key and index\&. 
.RE
.PP

.SS "#define elektraSet(elektra, tag, value, error)   ((tag)\&.set (elektra, &(tag), value, error))"

.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance initialized with the parent key\&. 
.br
\fItag\fP The codegenerated Tag to write to\&. 
.br
\fIvalue\fP The new value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. 
.RE
.PP

.SS "#define elektraSetArrayElement(elektra, tag, index, value, error)   ((tag)\&.setArrayElement (elektra, &(tag), index, value, error))"

.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance initialized with the parent key\&. 
.br
\fItag\fP The code-generated tag to write to\&. 
.br
\fIvalue\fP The new value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "kdb_long_long_t elektraArraySize (Elektra * elektra, const char * name)"

.PP
Gets the size of an array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the size of the array, 0 is returned if the array is empty or doesn't exist 
.RE
.PP

.SS "void elektraClose (Elektra * elektra)"

.PP
Releases all resources used by the given elektra instance\&. The elektra instance must not be used anymore after calling this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.RE
.PP

.SS "ElektraErrorCode elektraErrorCode (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the error code of the given error 
.RE
.PP

.SS "const char* elektraErrorDescription (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the description for the given error 
.RE
.PP

.SS "\fBElektraErrorSeverity\fP elektraErrorSeverity (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the severity of the given error 
.RE
.PP

.SS "void elektraFatalError (Elektra * elektra, ElektraError * fatalError)"

.PP
Promote an ElektraError to fatal and call the fatal error handler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP Elektra instance whose fatal error handler shall be used\&. 
.br
\fIfatalError\fP The error that will be raised\&. 
.RE
.PP

.SS "void elektraFatalErrorHandler (Elektra * elektra, ElektraErrorHandler fatalErrorHandler)"

.PP
Sets the fatal error handler that will be called, whenever a fatal error occurs\&. Errors occurring in a function, which does not take a pointer to ElektraError, are always considered fatal\&.
.PP
If this function returns, i\&.e\&. it does not call exit() or interrupt the thread of execution in some other way, the behaviour of the function from which the error originated is generally undefined\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.br
\fIfatalErrorHandler\fP The error handler that will be used henceforth\&. 
.RE
.PP

.SS "Key * elektraFindArrayElementKey (Elektra * elektra, const char * name, kdb_long_long_t index, KDBType type)"

.PP
Helper function for code generation\&. Finds an array element Key from its relative name and index\&. Also checks type metadata, if \fCtype\fP is not NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The relative name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.br
\fItype\fP The expected type metadata value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the Key referenced by \fCname\fP or NULL, if a fatal error occurs and the fatal error handler returns to this function 
.RE
.PP

.SS "Key * elektraFindKey (Elektra * elektra, const char * name, KDBType type)"

.PP
Helper function for code generation\&. Finds a Key from its relative name\&. Also checks type metadata, if \fCtype\fP is not NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The relative name of the key\&. 
.br
\fItype\fP The expected type metadata value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the Key referenced by \fCname\fP or NULL, if a fatal error occurs and the fatal error handler returns to this function 
.RE
.PP

.SS "KDBType elektraGetArrayElementType (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Reads the type metadata of a given array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.br
\fIname\fP The name of the array\&. 
.br
\fIindex\fP The index of the array element whose type information shall be read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the KDBType of the key 
.RE
.PP

.SS "kdb_boolean_t elektraGetBoolean (Elektra * elektra, const char * keyname)"

.PP
Gets a boolean value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the boolean stored at the given key 
.RE
.PP

.SS "kdb_boolean_t elektraGetBooleanArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a boolean value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the boolean stored at the given array element 
.RE
.PP

.SS "kdb_char_t elektraGetChar (Elektra * elektra, const char * keyname)"

.PP
Gets a char value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the char stored at the given key 
.RE
.PP

.SS "kdb_char_t elektraGetCharArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a char value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the char stored at the given array element 
.RE
.PP

.SS "kdb_double_t elektraGetDouble (Elektra * elektra, const char * keyname)"

.PP
Gets a double value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the double stored at the given key 
.RE
.PP

.SS "kdb_double_t elektraGetDoubleArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a double value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the double stored at the given array element 
.RE
.PP

.SS "kdb_float_t elektraGetFloat (Elektra * elektra, const char * keyname)"

.PP
Gets a float value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the float stored at the given key 
.RE
.PP

.SS "kdb_float_t elektraGetFloatArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a float value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the float stored at the given array element 
.RE
.PP

.SS "kdb_long_t elektraGetLong (Elektra * elektra, const char * keyname)"

.PP
Gets a long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long stored at the given key 
.RE
.PP

.SS "kdb_long_t elektraGetLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long stored at the given array element 
.RE
.PP

.SS "kdb_long_long_t elektraGetLongLong (Elektra * elektra, const char * keyname)"

.PP
Gets a long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long long stored at the given key 
.RE
.PP

.SS "kdb_long_long_t elektraGetLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the long long stored at the given array element 
.RE
.PP

.SS "kdb_octet_t elektraGetOctet (Elektra * elektra, const char * keyname)"

.PP
Gets a octet value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the octet stored at the given key 
.RE
.PP

.SS "kdb_octet_t elektraGetOctetArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a octet value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the octet stored at the given array element 
.RE
.PP

.SS "const char * elektraGetRawString (Elektra * elektra, const char * name)"

.PP
Get the raw string value of a key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the key\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the raw value of the specified key or NULL, if the key was not found 
.RE
.PP

.SS "const char * elektraGetRawStringArrayElement (Elektra * elektra, const char * name, kdb_long_long_t index)"

.PP
Get the raw string value of an array element key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the raw value of the specified key, or NULL if the key was not found 
.RE
.PP

.SS "kdb_short_t elektraGetShort (Elektra * elektra, const char * keyname)"

.PP
Gets a short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the short stored at the given key 
.RE
.PP

.SS "kdb_short_t elektraGetShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the short stored at the given array element 
.RE
.PP

.SS "const char * elektraGetString (Elektra * elektra, const char * keyname)"

.PP
Gets a string value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the string stored at the given key 
.RE
.PP

.SS "const char * elektraGetStringArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a string value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the string stored at the given array element 
.RE
.PP

.SS "KDBType elektraGetType (Elektra * elektra, const char * keyname)"

.PP
Reads the type metadata of a given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP An Elektra instance\&. 
.br
\fIkeyname\fP The name of the key whose type information shall be read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the KDBType of the key 
.RE
.PP

.SS "kdb_unsigned_long_t elektraGetUnsignedLong (Elektra * elektra, const char * keyname)"

.PP
Gets a unsigned long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long stored at the given key 
.RE
.PP

.SS "kdb_unsigned_long_t elektraGetUnsignedLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a unsigned long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long stored at the given array element 
.RE
.PP

.SS "kdb_unsigned_long_long_t elektraGetUnsignedLongLong (Elektra * elektra, const char * keyname)"

.PP
Gets a long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long long stored at the given key 
.RE
.PP

.SS "kdb_unsigned_long_long_t elektraGetUnsignedLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a unsigned long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned long long stored at the given array element 
.RE
.PP

.SS "kdb_unsigned_short_t elektraGetUnsignedShort (Elektra * elektra, const char * keyname)"

.PP
Gets a unsigned short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the key to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned short stored at the given key 
.RE
.PP

.SS "kdb_unsigned_short_t elektraGetUnsignedShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index)"

.PP
Gets a unsigned short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to look up\&. 
.br
\fIindex\fP The index of the array element to look up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the unsigned short stored at the given array element 
.RE
.PP

.SS "int elektraKDBErrorCode (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the error code of the attached low-level error, or -1 if no low-level error is attached 
.RE
.PP

.SS "const char* elektraKDBErrorDescription (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the description for the attached low-level error, or -1 if no low-level error is attached 
.RE
.PP

.SS "ElektraError* elektraKDBErrorGetWarning (const ElektraError * error, int index)"

.PP
\fBReturns:\fP
.RS 4
a newly allocated ElektraError representing the warning at the given index, or NULL if the index is out of range
.RE
.PP
the returned error will always have the following properties:
.IP "\(bu" 2
error code is #ELEKTRA_ERROR_CODE_LOW_LEVEL
.IP "\(bu" 2
description is ''
.IP "\(bu" 2
severity is #ELEKTRA_ERROR_SEVERITY_WARNING
.IP "\(bu" 2
the attached low-level error represents the warning in question
.PP
.PP
NOTE: you have to free the memory allocated by this function using \fBelektraFree()\fP 
.SS "ElektraKDBErrorGroup elektraKDBErrorGroup (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the group from which the attached low-level error originated, or NULL if no low-level error is attached 
.RE
.PP

.SS "Key* elektraKDBErrorKey (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the Key from which the given kdb error was extracted, or NULL if no low-level error is attached 
.RE
.PP

.SS "ElektraKDBErrorModule elektraKDBErrorModule (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the module from which the attached low-level error originated, or NULL if no low-level error is attached 
.RE
.PP

.SS "const char* elektraKDBErrorReason (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the reason for the attached low-level error, or NULL if no low-level error is attached 
.RE
.PP

.SS "\fBElektraErrorSeverity\fP elektraKDBErrorSeverity (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the severity of the attached low-level error, or \fBELEKTRA_ERROR_SEVERITY_FATAL\fP if no low-level error is attached 
.RE
.PP

.SS "int elektraKDBErrorWarningCount (const ElektraError * error)"

.PP
\fBReturns:\fP
.RS 4
the number of warnings associated with the attached low-level error, or -1 if no low-level error is attached 
.RE
.PP

.SS "void elektraSetBoolean (Elektra * elektra, const char * keyname, kdb_boolean_t value, ElektraError ** error)"

.PP
Sets a boolean value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new boolean value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetBooleanArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_boolean_t value, ElektraError ** error)"

.PP
Sets a boolean value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new boolean value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetChar (Elektra * elektra, const char * keyname, kdb_char_t value, ElektraError ** error)"

.PP
Sets a char value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new char value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetCharArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_char_t value, ElektraError ** error)"

.PP
Sets a char value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new char value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetDouble (Elektra * elektra, const char * keyname, kdb_double_t value, ElektraError ** error)"

.PP
Sets a double value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new double value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetDoubleArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_double_t value, ElektraError ** error)"

.PP
Sets a double value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new double value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetFloat (Elektra * elektra, const char * keyname, kdb_float_t value, ElektraError ** error)"

.PP
Sets a float value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new float value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetFloatArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_float_t value, ElektraError ** error)"

.PP
Sets a float value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new float value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLong (Elektra * elektra, const char * keyname, kdb_long_t value, ElektraError ** error)"

.PP
Sets a long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_long_t value, ElektraError ** error)"

.PP
Sets a long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLongLong (Elektra * elektra, const char * keyname, kdb_long_long_t value, ElektraError ** error)"

.PP
Sets a long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_long_long_t value, ElektraError ** error)"

.PP
Sets a long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetOctet (Elektra * elektra, const char * keyname, kdb_octet_t value, ElektraError ** error)"

.PP
Sets a octet value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new octet value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetOctetArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_octet_t value, ElektraError ** error)"

.PP
Sets a octet value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new octet value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetRawString (Elektra * elektra, const char * name, const char * value, KDBType type, ElektraError ** error)"

.PP
Set the raw string value of a key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the key\&. 
.br
\fIvalue\fP The raw value to set\&. 
.br
\fItype\fP The type to set in the metadata of the key\&. 
.br
\fIerror\fP Pointer to an ElektraError\&. Will be set in case saving fails\&. 
.RE
.PP

.SS "void elektraSetRawStringArrayElement (Elektra * elektra, const char * name, kdb_long_long_t index, const char * value, KDBType type, ElektraError ** error)"

.PP
Set the raw string value of an array element key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The Elektra instance to use\&. 
.br
\fIname\fP The (relative) name of the array\&. 
.br
\fIindex\fP The index of the array element\&. 
.br
\fIvalue\fP The raw value to set\&. 
.br
\fItype\fP The type to set in the metadata of the (array element) key\&. 
.br
\fIerror\fP Pointer to an ElektraError\&. Will be set in case saving fails\&. 
.RE
.PP

.SS "void elektraSetShort (Elektra * elektra, const char * keyname, kdb_short_t value, ElektraError ** error)"

.PP
Sets a short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_short_t value, ElektraError ** error)"

.PP
Sets a short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetString (Elektra * elektra, const char * keyname, const char * value, ElektraError ** error)"

.PP
Sets a string value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new string value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetStringArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, const char * value, ElektraError ** error)"

.PP
Sets a string value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new string value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLong (Elektra * elektra, const char * keyname, kdb_unsigned_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new unsigned long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_unsigned_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new unsigned long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLongLong (Elektra * elektra, const char * keyname, kdb_unsigned_long_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long long value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new unsigned long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedLongLongArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_unsigned_long_long_t value, ElektraError ** error)"

.PP
Sets a unsigned long long value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new unsigned long long value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedShort (Elektra * elektra, const char * keyname, kdb_unsigned_short_t value, ElektraError ** error)"

.PP
Sets a unsigned short value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name to write to\&. 
.br
\fIvalue\fP The new unsigned short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SS "void elektraSetUnsignedShortArrayElement (Elektra * elektra, const char * keyname, kdb_long_long_t index, kdb_unsigned_short_t value, ElektraError ** error)"

.PP
Sets a unsigned short value array element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelektra\fP The elektra instance to use\&. 
.br
\fIkeyname\fP The (relative) name of the array to write to\&. 
.br
\fIindex\fP The index of the array element to write to\&. 
.br
\fIvalue\fP The new unsigned short value\&. 
.br
\fIerror\fP Pass a reference to an ElektraError pointer\&. Will only be set in case of an error\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
