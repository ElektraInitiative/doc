.TH "org.libelektra.KeySet" 3elektra "Mon Jun 7 2021" "Version 0.9.6" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.KeySet \- Java representation of a native \fBElektra\fP key set, a container for keys\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits Iterable< Key >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Clean-up method to release key set reference by trying to free the native reference
.br
 
.br
 Call this method if you have obtained a \fBKeySet\fP via any of its public methods or \fBKDB#get(Key)\fP and you do not longer need it\&. "
.ti -1c
.RI "Iterator< \fBKey\fP > \fBiterator\fP ()"
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.RI "Iterates though all keys in this key set and appends their representation to the output\&. "
.ti -1c
.RI "\fBKeySet\fP \fBdup\fP ()"
.br
.RI "Duplicates the key set\&. "
.ti -1c
.RI "\fBKeySet\fP \fBcopy\fP (\fBKeySet\fP source)"
.br
.RI "Copies key references from\&. "
.ti -1c
.RI "int \fBsize\fP ()"
.br
.RI "Indicates the key set size\&. "
.ti -1c
.RI "\fBKeySet\fP \fBappend\fP (\fBKey\fP key)"
.br
.RI "Append key to key set\&. "
.ti -1c
.RI "\fBKeySet\fP \fBappend\fP (\fBKeySet\fP source)"
.br
.RI "Appends keys from key set\&. "
.ti -1c
.RI "\fBKeySet\fP \fBcut\fP (\fBKey\fP cutpoint)"
.br
.RI "Creates new key set with help of a cut point\&. "
.ti -1c
.RI "\fBKey\fP \fBremove\fP (int cursor)"
.br
.RI "Returns key from key set and also removes it from the set\&. "
.ti -1c
.RI "\fBKey\fP \fBfirst\fP ()"
.br
.RI "Gets the key set head key\&. "
.ti -1c
.RI "\fBKey\fP \fBlast\fP ()"
.br
.RI "Gets the key set tail key\&. "
.ti -1c
.RI "\fBKey\fP \fBat\fP (int cursor)"
.br
.RI "Gets the key at the given cursor position\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBlookup\fP (\fBKey\fP find)"
.br
.RI "Search for a key in the key set\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBlookup\fP (\fBKey\fP find, int options)"
.br
.RI "Search for a key in the key set\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBlookup\fP (String find)"
.br
.RI "Search for a key in the key set\&. "
.ti -1c
.RI "Optional< \fBKey\fP > \fBlookup\fP (String find, int options)"
.br
.RI "Search for a key in the key set\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBKeySet\fP \fBcreate\fP (Key\&.\&.\&. keys)"
.br
.RI "Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(\fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. "
.ti -1c
.RI "static \fBKeySet\fP \fBcreate\fP (int allocationHint, Key\&.\&.\&. keys)"
.br
.RI "Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(10, \fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. "
.ti -1c
.RI "static \fBKeySet\fP \fBcreate\fP ()"
.br
.RI "Constructs an empty \fBKeySet\fP with a default allocation hint of 16\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBKeySet\fP (long nativePointer)"
.br
.RI "Constructor associating a new \fBKeySet\fP instance with a native pointer in long format\&. "
.ti -1c
.RI "\fBKeySet\fP (long nativePointer, boolean suppressCleanUp)"
.br
.RI "Constructor associating a new \fBKeySet\fP instance with a native pointer in long format
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. "
.ti -1c
.RI "\fBKeySet\fP (Pointer pointer)"
.br
.RI "Constructor associating a new \fBKeySet\fP instance with a JNA pointer\&. "
.ti -1c
.RI "Pointer \fBgetPointer\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Java representation of a native \fBElektra\fP key set, a container for keys\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.libelektra\&.KeySet\&.KeySet (long nativePointer)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKeySet\fP instance with a native pointer in long format\&. 
.PP
\fBParameters\fP
.RS 4
\fInativePointer\fP Native pointer to key set in long format 
.RE
.PP

.SS "org\&.libelektra\&.KeySet\&.KeySet (long nativePointer, boolean suppressCleanUp)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKeySet\fP instance with a native pointer in long format
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. 
.PP
\fBParameters\fP
.RS 4
\fInativePointer\fP Native pointer to key set in long format 
.br
\fIsuppressCleanUp\fP True to suppress native reference clean-up as soon as this \fBKeySet\fP instance becomes phantom reachable, false otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "org\&.libelektra\&.KeySet\&.KeySet (Pointer pointer)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKeySet\fP instance with a JNA pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP JNA \fBPointer\fP to key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP if
.PP
.nf
pointer 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.append (\fBKey\fP key)\fC [inline]\fP"

.PP
Append key to key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP \fBKey\fP to append 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKeySet\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalArgumentException\fP if
.PP
.nf
key 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.append (\fBKeySet\fP source)\fC [inline]\fP"

.PP
Appends keys from key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Source \fBKeySet\fP to append all of its \fBkeys\fP 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKeySet\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP or the specified 
.PP
.nf
source 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeySetAppendException\fP if appending the
.PP
.nf
source 

.fi
.PP
 failed 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.at (int cursor)\fC [inline]\fP"

.PP
Gets the key at the given cursor position\&. 
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP Cursor position used to fetch key; starting from 0 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP found at specified cursor position 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIndexOutOfBoundsException\fP if position is out of bounds 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.copy (\fBKeySet\fP source)\fC [inline]\fP"

.PP
Copies key references from\&. 
.PP
.nf
source 

.fi
.PP
 to \fBthis\fP \fBKeySet\fP
.PP
\fBParameters\fP
.RS 4
\fIsource\fP \fBKey\fP set that is used as source 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKeySet\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP or the specified 
.PP
.nf
source 

.fi
.PP
 has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "static \fBKeySet\fP org\&.libelektra\&.KeySet\&.create ()\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs an empty \fBKeySet\fP with a default allocation hint of 16\&. 
.PP
\fBReturns\fP
.RS 4
Newly allocated key set 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static \fBKeySet\fP org\&.libelektra\&.KeySet\&.create (int allocationHint, Key\&.\&.\&. keys)\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(10, \fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. 
.PP
\fBParameters\fP
.RS 4
\fIallocationHint\fP Hint indicating the expected size of the key set 
.br
\fIkeys\fP List of initial keys for the key set 
.RE
.PP
\fBReturns\fP
.RS 4
New key set containing the specified initial keys 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static \fBKeySet\fP org\&.libelektra\&.KeySet\&.create (Key\&.\&.\&. keys)\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs a new \fBKeySet\fP containing the specified \fBkeys\fP
.br
 
.br
 Example: \fBKeySet\fP keySet = \fBKeySet\&.create\fP(\fBKey\&.create\fP('A'), \fBKey\&.create\fP('B'));\&. 
.PP
\fBParameters\fP
.RS 4
\fIkeys\fP List of initial keys for the key set 
.RE
.PP
\fBReturns\fP
.RS 4
New key set containing the specified initial keys 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.cut (\fBKey\fP cutpoint)\fC [inline]\fP"

.PP
Creates new key set with help of a cut point\&. 
.PP
\fBParameters\fP
.RS 4
\fIcutpoint\fP \fBKey\fP that is used as cutting point 
.RE
.PP
\fBReturns\fP
.RS 4
New \fBKeySet\fP containing all keys until the cutting point, this if null was provided 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
cutpoint 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "\fBKeySet\fP org\&.libelektra\&.KeySet\&.dup ()\fC [inline]\fP"

.PP
Duplicates the key set\&. 
.PP
\fBReturns\fP
.RS 4
New \fBKeySet\fP containing the same key references as this \fBKeySet\fP does 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.first ()\fC [inline]\fP"

.PP
Gets the key set head key\&. 
.PP
\fBReturns\fP
.RS 4
First element of the key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fINoSuchElementException\fP if key set is empty 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "Pointer org\&.libelektra\&.KeySet\&.getPointer ()\fC [inline]\fP, \fC [protected]\fP"

.PP
\fBReturns\fP
.RS 4
JNA pointer to the native pointer for this key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "Iterator<\fBKey\fP> org\&.libelektra\&.KeySet\&.iterator ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
New \fBKeySetIterator\fP backed by this \fBKeySet\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.last ()\fC [inline]\fP"

.PP
Gets the key set tail key\&. 
.PP
\fBReturns\fP
.RS 4
Last element of the key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fINoSuchElementException\fP if key set is empty 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.lookup (\fBKey\fP find)\fC [inline]\fP"

.PP
Search for a key in the key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP \fBKey\fP used in search 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP if search successful, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
key 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.lookup (\fBKey\fP find, int options)\fC [inline]\fP"

.PP
Search for a key in the key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP \fBKey\fP used in search 
.br
\fIoptions\fP Custom search options; concatenation of flags 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP if search successful, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
find 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.lookup (String find)\fC [inline]\fP"

.PP
Search for a key in the key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP \fBKey\fP name used in search 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP if search successful, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
find 

.fi
.PP
 is \fBblank\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "Optional<\fBKey\fP> org\&.libelektra\&.KeySet\&.lookup (String find, int options)\fC [inline]\fP"

.PP
Search for a key in the key set\&. 
.PP
\fBParameters\fP
.RS 4
\fIfind\fP \fBKey\fP name used in search 
.br
\fIoptions\fP Custom search options; concatenation of flags 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP if search successful, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
find 

.fi
.PP
 is \fBblank\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "void org\&.libelektra\&.KeySet\&.release ()\fC [inline]\fP"

.PP
Clean-up method to release key set reference by trying to free the native reference
.br
 
.br
 Call this method if you have obtained a \fBKeySet\fP via any of its public methods or \fBKDB#get(Key)\fP and you do not longer need it\&. If you do not manually release such \fBkey sets\fP, they will get cleaned up by garbage collection as soon as they get phantom reachable\&. Therefore its encouraged to release \fBkey set instances\fP as soon as you do not use them anymore\&. 
.SS "\fBKey\fP org\&.libelektra\&.KeySet\&.remove (int cursor)\fC [inline]\fP"

.PP
Returns key from key set and also removes it from the set\&. 
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP Cursor position of the key to remove; starting from 0 
.RE
.PP
\fBReturns\fP
.RS 4
\fBKey\fP found at given cursor position 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.br
\fIIndexOutOfBoundsException\fP if position is out of bounds 
.RE
.PP
\fBSee also\fP
.RS 4
\fBKey::release()\fP 
.RE
.PP

.SS "int org\&.libelektra\&.KeySet\&.size ()\fC [inline]\fP"

.PP
Indicates the key set size\&. 
.PP
\fBReturns\fP
.RS 4
Number of keys contained by this key set 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeySetReleasedException\fP if this \fBKeySet\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.KeySet\&.toString ()\fC [inline]\fP"

.PP
Iterates though all keys in this key set and appends their representation to the output\&. Uses the \fBtoString()\fP function of the \fBKey\fP objects\&.
.PP
\fBReturns\fP
.RS 4
Represents this \fBKeySet\fP as string 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
