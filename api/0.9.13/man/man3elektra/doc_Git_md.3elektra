.TH "doc_Git_md" 3elektra "Tue Mar 14 2023" "Version 0.9.13" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_Git_md \- Git 
 
.SH "Cheat Sheet: Basic Git Commands"
.PP
.PP
.nf
git add readme\&.md   # adds the changes of the file `readme\&.md` to the staging area
git add \&.           # adds all changes of files in the current directory (recursively) to the staging area
git add --all       # adds all changes of files in the repository to the staging area
git commit -a       # executes a commit that automatically stages all changed and deleted files before
git checkout -b     # Create a new local branch based on the current branch
git pull            # Pull changes from the current remote branch
git push            # Push changes to the current remote branch
git stash           # Puts all changes in an dirty wirkling directory aside
git stash apply     # Reapplies stashed changes on the current branch
.fi
.PP
.SH "Installation"
.PP
.IP "\(bu" 2
\fCWindows\fP
.IP "\(bu" 2
\fCmacOS\fP
.IP "\(bu" 2
\fCLinux\fP
.PP
.PP
If you are uncomfortable with command line interfaces, there are also \fCplenty of GUI options available\fP\&.
.SH "Basic Configuration"
.PP
To configure git, you can use the \fCgit config\fP command\&. You can configure each project individually, just by running \fCgit config <setting> <value>\fP anywhere within a checked out repository, or for all projects for a user on the local machine using \fCgit config --global <setting> <value>\fP\&. We recommend you set the following configuration options, when using git:
.PP
.PP
.nf
git config merge\&.ff false # Git will always create a commit, when trying to merge
git config pull\&.rebase true # Automatically rebase when pulling
.fi
.PP
.PP
Also ensure that you have your username and e-mail configured, so your work can be attributed to you:
.PP
.PP
.nf
git config --global user\&.name "Your Name"
git config --global user\&.email "yourname@yourdomain\&.com"
.fi
.PP
.SH "The Commit Message"
.PP
A commit message should have the following syntax: \fCcomponent: short change description\fP
.PP
For a clean and meaningful log the commit message should fulfill the following:
.PP
.IP "\(bu" 2
use imperative in the subject line
.IP "\(bu" 2
the subject line should not be longer than 50 characters
.IP "\(bu" 2
start the subject line with the module name (e\&.g\&. resolver:, cpp bindings:)
.IP "\(bu" 2
separate subject from body with a blank line
.IP "\(bu" 2
in the body describe in detail what you did, and possibly why
.IP "\(bu" 2
metadata like 'Fixes #123' should be kept at the bottom of the commit message and definitely not in the title
.PP
.PP
Most commits should have a longer description in the body\&.
.SS "GitHub: Attributing Co-Authors"
If multiple people worked on a commit, GitHub, supports a nice way to represent this\&. You can attribute them by leaving two blank lines at the end and then add a single line of \fCCo-authored-by: NAME <NAME@EXAMPLE\&.COM>\fP for every other person that worked on it\&. \fCMore Details here\fP
.SH "Remote Branches"
.PP
To list all remote branches use:
.PP
.PP
.nf
git branch -a
.fi
.PP
.PP
To checkout a remote branch initially use:
.PP
.PP
.nf
git checkout -b <branchname> origin/<branchname>
.fi
.PP
.PP
Once you have done this, it will be a local branch, too\&. Following remote branches should exist: 
.PP
.nf
master

.fi
.PP
 This is the development branch\&. Please try to not work directly on it, but instead you should use feature branches\&. So the only commits on master should be non-fastforward merges from features branches\&. Commits on master should always compile, and all test cases should pass successfully\&. (see config option above)
.SS "Communication Methods"
To communicate with remote branches, Git supports the file protocol (acessible through the local file system), http and ssh\&. We generally recommend ssh, as it is encrypted and authentication with ssh-keys is simple and secure\&.
.SS "GitHub: Adding/creating an SSH Key"
GitHub supports both HTTP and SSH for communication\&. Using SSH, you can remove the annoyance of having to enter your password every time\&. To learn how to add an SSH-Key follow \fCthis guide provided by GitHub\fP\&.
.SH "Local Branches"
.PP
You should always make your own feature branch with:
.PP
.PP
.nf
git checkout -b <feature-branch-name>
.fi
.PP
.PP
On this branch it is not so important that every commit compiles or all test cases run\&.
.PP
To merge a branch use (no-fastforward):
.PP
.PP
.nf
git merge --no-ff <branchname>
.fi
.PP
.PP
If you already did some commits, but want them in a branch, you can do:
.PP
.PP
.nf
git branch foo
git reset HEAD^^  # for 2 commits back
git reset origin/master

git-ref-log # recover
.fi
.PP
.SH "Working with forks"
.PP
We recommend you use your own fork of the main \fClibelektra\fP repository, if you want to contribute\&. For more information on creating a fork, please take a look at \fCGitHub's tutorial\fP\&.
.PP
Once you have set up and cloned your fork, you need to keep it in sync with the main repository\&. To do that, we recommend you never directly commit anything to your fork's \fCmaster\fP branch\&. You also need to add a remote for the main repository:
.PP
.PP
.nf
# We assume the remote for your fork is called `origin` (the default)\&.
git remote add upstream https://github\&.com/ElektraInitiative/libelektra\&.git
.fi
.PP
.PP
When you want to sync changes from the main repository into your fork, you can use these commands:
.PP
.PP
.nf
git fetch upstream master:master
git push orign master:master
.fi
.PP
.PP
.RS 4
\fBNote\fP: These commands work with any branch checked out\&. You don't need to switch to the \fCmaster\fP branch first\&. However, this only works, if you have not modified your \fCmaster\fP branch, i\&.e\&. the latest commit in your forked \fCmaster\fP branch was once the latest commit in the main \fCmaster\fP branch\&. 
.RE
.PP
.SH "Rebasing branches"
.PP
When you work on a local feature branch, it might happen that a change occurs within the master branch, that introduces merge conflicts\&. I\&.e\&. if you create a pull request, it cannot be merged into master automatically anymore\&. In these cases, we expect you to rebase your feature branch, so it can be merged automatically once again\&.
.PP
To achieve this, make sure you have your master branch synced up\&. Then switch to the feature branch you want to update using \fCgit checkout <feature-branch-name>\fP and then type \fCgit rebase master\fP\&. Sometimes, this will result in a merge conflict\&.
.PP
If you already have pushed changes from your feature branch to a remote branch, you'll need to either overwrite it using \fCgit push --force\fP or push to a new remote branch\&.
.SS "Resolving merge conflicts"
To resolve merge conflicts, edit the files that need to be merged manually\&. You can check which files need to be merged using \fCgit status\fP\&. After you are done merging a file manually, you can use \fCgit add <path-to-file>\fP and when you have merged all files, continue with \fCgit rebase --continue\fP\&.
.PP
.RS 4
\fBNote\fP: Keep in mind that manual merges within a rebase are potentially destructive\&. If you accidentally remove changes you've done in your feature branch, you might be able to recover them using \fCgit-reflog\fP, but they could also be deleted by the \fCgit-gc\fP\&. If you're new to manually merging files, consider creating a new branch from your feature branch using \fCgit checkout -b <new-branch-name>\fP on which you can perform the merge without risk\&. When you're stuck on a manual merge, you can also always abort the rebase using \fCgit rebase --abort\fP 
.RE
.PP
.SH "Further resources"
.PP
.IP "\(bu" 2
\fCGit Book\fP
.IP "\(bu" 2
\fCGitHub Docs\fP 
.PP

