.TH "keytest" 3elektra "Wed Oct 5 2022" "Version 0.9.11" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
keytest \- Methods for Making Tests
.PP
 \- Methods to do various tests on Keys\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBkeyCmp\fP (const Key *k1, const Key *k2)"
.br
.RI "Compare the name of two Keys\&. "
.ti -1c
.RI "int \fBkeyNeedSync\fP (const Key *key)"
.br
.RI "Test if a key needs to be synced to backend storage\&. "
.ti -1c
.RI "int \fBkeyIsBelow\fP (const Key *key, const Key *check)"
.br
.RI "Check if the Key \fCcheck\fP is below the Key \fCkey\fP or not\&. "
.ti -1c
.RI "int \fBkeyIsDirectlyBelow\fP (const Key *key, const Key *check)"
.br
.RI "Check whether the Key \fCcheck\fP is directly below the Key \fCkey\fP\&. "
.ti -1c
.RI "int \fBkeyIsBinary\fP (const Key *key)"
.br
.RI "Check if the value of a \fCkey\fP is of binary type\&. "
.ti -1c
.RI "int \fBkeyIsString\fP (const Key *key)"
.br
.RI "Check if the value of \fCkey\fP is of string type\&. "
.in -1c
.SH "Detailed Description"
.PP 
Methods to do various tests on Keys\&. 

With exception of the parameters of \fBkeyCmp()\fP, the following contract holds for all parameters of type Key: 
.PP
\fBPrecondition\fP
.RS 4
The Key has been properly initialized via \fBkeyNew()\fP 
.RE
.PP
\fBInvariant\fP
.RS 4
All parts of the Key remain unchanged 
.RE
.PP
\fBPostcondition\fP
.RS 4
All parts of the Key are unchanged
.RE
.PP
To use them: 
.PP
.nf
#include <kdb\&.h>

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "int keyCmp (const Key * k1, const Key * k2)"

.PP
Compare the name of two Keys\&. The comparison is based on a memcmp of the Key's names\&. If the names match, the Keys are found to be exactly the same and 0 is returned\&. These two keys can't be used in the same KeySet\&.
.PP
\fBkeyCmp()\fP defines the sorting order for a KeySet\&.
.PP
The following 3 points are the rules for NULL values:
.PP
.IP "\(bu" 2
A NULL pointer will be found to be smaller than every other Key\&. If both are NULL pointers, 0 is returned\&.
.IP "\(bu" 2
A NULL name will be found to be smaller than every other name\&. If both are NULL names, 0 is returned\&.
.PP
.PP
If the name is equal then:
.PP
.IP "\(bu" 2
No owner will be found to be smaller than every other owner\&. If both don't have an owner, 0 is returned\&.
.PP
.PP
\fBNote\fP
.RS 4
the owner will only be used if the names are equal\&.
.RE
.PP
Given any Keys k1 and k2 constructed with \fBkeyNew()\fP, following equation hold true:
.PP
.PP
.nf
     succeed_if (keyCmp (0, 0) == 0, "all null pointers same");
        succeed_if (keyCmp (k1, 0) == 1, "null pointer is smaller");
        succeed_if (keyCmp (0, k2) == -1, "null pointer is smaller");
.fi
.PP
 Here are some more examples: 
.PP
.nf
Key *k1 = keyNew("user:/a", KEY_END);
Key *k2 = keyNew("user:/b", KEY_END);

// keyCmp(k1,k2) < 0
// keyCmp(k2,k1) > 0

.fi
.PP
.PP
Do not strcmp the \fBkeyName()\fP yourself, because the result differs from simple ascii comparison\&.
.PP
\fBPrecondition\fP
.RS 4
The Keys \fCk1\fP and \fCk2\fP have been properly initialized via \fBkeyNew()\fP or are NULL 
.RE
.PP
\fBInvariant\fP
.RS 4
All parts of the Keys remain unchanged 
.RE
.PP
\fBPostcondition\fP
.RS 4
If the result is 0, \fCk1\fP and \fCk2\fP cannot be used in the same KeySet
.RE
.PP
\fBParameters\fP
.RS 4
\fIk1\fP the first Key to be compared 
.br
\fIk2\fP the second Key to be compared
.RE
.PP
\fBReturn values\fP
.RS 4
\fI<0\fP if k1 < k2 
.br
\fI0\fP if k1 == k2 
.br
\fI>0\fP if k1 > k2
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBksAppendKey()\fP, \fBksAppend()\fP will compare Keys via \fBkeyCmp()\fP when appending 
.PP
\fBksLookup()\fP will compare Keys via \fBkeyCmp()\fP during searching 
.RE
.PP

.SS "int keyIsBelow (const Key * key, const Key * check)"

.PP
Check if the Key \fCcheck\fP is below the Key \fCkey\fP or not\&. Example: 
.PP
.nf
key user:/sw/app
check user:/sw/app/key

.fi
.PP
.PP
returns true because \fCcheck\fP is below \fCkey\fP 
.PP
Example: 
.PP
.nf
key user:/sw/app
check user:/sw/app/folder/key

.fi
.PP
.PP
returns also true because \fCcheck\fP is indirectly below \fCkey\fP 
.PP
Obviously, there is no Key above a namespace (e\&.g\&. user, system, /):
.PP
.PP
.nf
key *
check user
.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIkey\fP the Key object to check against 
.br
\fIcheck\fP the Key object for which it should be checked whether it is below \fCkey\fP 
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if \fCcheck\fP is below \fCkey\fP 
.br
\fI0\fP if it is not below or if it is the same key 
.br
\fI-1\fP if key or check is null
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkeyIsDirectlyBelow()\fP for checking whether a Key is directly below another 
.PP
\fBkeyGetName()\fP, \fBkeySetName()\fP for getting / setting the Key's name 
.RE
.PP

.SS "int keyIsBinary (const Key * key)"

.PP
Check if the value of a \fCkey\fP is of binary type\&. The function checks if the value of \fCkey\fP is binary\&. Contrary to string values binary values can have '\\0' inside the value and may not be terminated by a null character\&. Their disadvantage is that you need to pass their size\&.
.PP
Make sure to use this function and don't test the binary type another way to ensure compatibility and to write less error prone programs\&.
.PP
\fBParameters\fP
.RS 4
\fIkey\fP the Key to check
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if the value of \fCkey\fP is binary 
.br
\fI0\fP if the value of \fCkey\fP is not binary 
.br
\fI-1\fP on NULL pointer
.RE
.PP
\fBSee also\fP
.RS 4
\fBkeyGetBinary()\fP, \fBkeySetBinary()\fP for getting / setting a Key's value as binary 
.RE
.PP

.SS "int keyIsDirectlyBelow (const Key * key, const Key * check)"

.PP
Check whether the Key \fCcheck\fP is directly below the Key \fCkey\fP\&. 
.PP
.nf
Example:
key user:/sw/app
check user:/sw/app/key
.fi
.PP
.PP
returns true because check is directly below key
.PP
.PP
.nf
Example:
key user:/sw/app
check user:/sw/app/folder/key.fi
.PP
.PP
does not return true, because it is only indirectly below
.PP
\fBParameters\fP
.RS 4
\fIkey\fP the Key object to check against 
.br
\fIcheck\fP the Key object for which it should be checked whether it is directly below \fCkey\fP 
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if \fCcheck\fP is directly below \fCkey\fP 
.br
\fI0\fP if \fCcheck\fP is not directly below \fCkey\fP or if it is the same 
.br
\fI-1\fP on null pointer
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkeyIsBelow()\fP for checking whether a Key is below another 
.PP
\fBkeyGetName()\fP, \fBkeySetName()\fP for getting / setting the Key's name 
.RE
.PP

.SS "int keyIsString (const Key * key)"

.PP
Check if the value of \fCkey\fP is of string type\&. String values are null terminated and are not allowed to have any '\\0' characters inside the string\&.
.PP
Make sure to use this function and don't test the string type another way to ensure compatibility and to write less error prone programs\&.
.PP
\fBParameters\fP
.RS 4
\fIkey\fP the Key to check
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if the value of \fCkey\fP is string 
.br
\fI0\fP if the value of \fCkey\fP is not string 
.br
\fI-1\fP on NULL pointer
.RE
.PP
\fBSee also\fP
.RS 4
\fBkeyGetString()\fP, \fBkeySetString()\fP for getting / setting a Key's value as string 
.RE
.PP

.SS "int keyNeedSync (const Key * key)"

.PP
Test if a key needs to be synced to backend storage\&. If any Key modification took place the Key will be flagged so that \fBkdbSet()\fP knows which keys were modified and which not\&.
.PP
After \fBkeyNew()\fP the flag will normally be set, but after \fBkdbGet()\fP and \fBkdbSet()\fP the flag will be removed\&. When you modify the key the flag will be set again\&.
.PP
In your application you can make use of that flag to know if you changed something in a key after a \fBkdbGet()\fP or \fBkdbSet()\fP\&.
.PP
\fBNote\fP
.RS 4
Note that the sync status will be updated on any change, including metadata\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
The handling of synchronization is done internally and does not need to be checked by neither application nor plugins\&.
.RE
.PP
.PP
\fBParameters\fP
.RS 4
\fIkey\fP the Key which should be checked
.RE
.PP
\fBReturn values\fP
.RS 4
\fI1\fP if \fCkey\fP was changed in memory 
.br
\fI0\fP if \fCkey\fP wasn't changed 
.br
\fI-1\fP on NULL pointer
.RE
.PP
\fBSince\fP
.RS 4
1\&.0\&.0
.RE
.PP
\fBSee also\fP
.RS 4
\fBkeyNew()\fP, keyDup() Keys need to be synced after calling those functions 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
