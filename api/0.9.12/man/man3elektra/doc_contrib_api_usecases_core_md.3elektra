.TH "doc_contrib_api_usecases_core_md" 3elektra "Fri Mar 3 2023" "Version 0.9.12" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_contrib_api_usecases_core_md \- API based on use cases for \fClibelektra-core\fP 
 
.SH "Create <tt>Key</tt>"
.PP
This use case is implemented as \fC\fBkeyNew()\fP\fP\&.
.SH "<tt>Key</tt> Name"
.PP
The name of a \fCKey\fP is stored in two forms: escaped and unescaped\&.
.PP
The escaped from can be accessed via \fC\fBkeyName()\fP\fP and the unescaped form via \fC\fBkeyUnescapedName()\fP\fP\&.
.PP
Manipulating the name is possible via the \fC\fBkeySetName()\fP\fP, \fC\fBkeySetBaseName()\fP\fP, \fC\fBkeyAddName()\fP\fP and \fC\fBkeyAddBaseName()\fP\fP functions, which allow various kinds of manipulation\&.
.SH "<tt>Key</tt> Namespace"
.PP
This use case implemented via the \fC\fBkeyGetNamespace()\fP\fP and \fC\fBkeySetNamespace()\fP\fP functions\&.
.SH "<tt>Key</tt> Value"
.PP
The value of a \fCKey\fP can be accessed via \fC\fBkeyValue()\fP\fP and \fC\fBkeyString()\fP\fP\&. It can be changed via \fC\fBkeySetString()\fP\fP and \fC\fBkeySetBinary()\fP\fP\&.
.SH "<tt>Key</tt> Metadata"
.PP
This use case is implemented as the \fC\fBkeyMeta()\fP\fP function\&.
.SS "<tt>Key</tt> Ordering"
This use case is implemented as the \fC\fBkeyCmp()\fP\fP function\&.
.SH "<tt>Key</tt> Hierarchy"
.PP
This use case is currently implemented via the \fC\fBkeyIsBelow()\fP\fP, \fC\fBkeyIsBelowOrSame()\fP\fP and \fC\fBkeyIsDirectlyBelow()\fP\fP functions, instead of being a single function\&.
.SH "Create <tt>KeySet</tt>"
.PP
This use case is implemented as \fC\fBksNew()\fP\fP\&. Beyond the described use case, the \fC\fBksNew()\fP\fP function also supports creating a \fCKeySet\fP with predefined contents\&.
.SH "Insert <tt>Key</tt> into <tt>KeySet</tt>"
.PP
This use case is implemented as \fC\fBksAppendKey()\fP\fP and \fC\fBksAppend()\fP\fP\&.
.SH "Remove <tt>Key</tt> from <tt>KeySet</tt>"
.PP
This use case is implemented via \fC\fBksLookup()\fP\fP with the \fCKDB_O_POP\fP option\&.
.SH "Direct lookup in <tt>KeySet</tt>"
.PP
This use case is implemented via \fC\fBksLookup()\fP\fP\&.
.SH "Cascading Lookup in <tt>KeySet</tt>"
.PP
This use case is implemented via \fC\fBksLookup()\fP\fP\&.
.SH "Index access to <tt>KeySet</tt>"
.PP
This use case is implemented as \fC\fBksAtCursor()\fP\fP\&.
.SH "Cut <tt>Key</tt> hierarchy from <tt>KeySet</tt>"
.PP
This use case is implemented as \fC\fBksCut()\fP\fP\&. 
