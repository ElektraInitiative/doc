.TH "md_src_plugins_reference_README" 3elektra "Tue Feb 26 2019" "Version 0.8.26" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_reference_READMEPlugin: reference 
 \- 
.IP "\(bu" 2
infos = Information about the reference plugin is in keys below
.IP "\(bu" 2
infos/author = Klemens BÃ¶swirth k.boeswirth+git@gmail.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = presetstorage
.IP "\(bu" 2
infos/status = maintained unittest libc writeonly
.IP "\(bu" 2
infos/metadata = check/reference check/reference/restrict
.IP "\(bu" 2
infos/description = Plugin for validating singular or recursive references
.PP
.PP
This plugin serves one single purpose: the validation of references from key to another inside the KDB\&.
.PP
To specify a key as a reference add the metakey \fCcheck/reference\fP\&. Currently the metakey supports the three values \fCsingle\fP, \fCrecursive\fP and \fCalternative\fP\&. While the value \fCalternative\fP only makes sense in a certain context inside the \fCrecursive\fP mode, the other two values define to different modes of operation for the plugin\&.
.PP
If a key has the metakey \fCcheck/reference\fP with value \fCsingle\fP, the plugin reads the value of the key and produces an error, if the value is not a valid (i\&.e\&. resolvable) reference\&.
.PP
If a key has metakey \fCcheck/reference\fP with value \fCrecursive\fP, the plugin constructs a reference graph starting with the marked key\&. (for the exact construction see below) In this reference graph each node corresponds to a key in the KDB, while each edge represents a reference between to keys\&. The plugin will produce an error, if this graph is not a directed acyclic graph or contains any invalid references\&.
.PP
.SS "Resolution of references"
.PP
The plugin will try to resolve all keys marked with the metakey \fCcheck/reference\fP as references\&. The only exception to this rule is, if the value of such a key is a valid array name (i\&.e\&. \fC#0\fP, \fC#_10\fP, \&.\&.\&.)\&. In that case, the plugin will try to resolve the values of the array elements, directly below the marked key\&. And treats the marked key as referencing multiple other keys\&.
.PP
The resolution of the references into key names goes as follows:
.PP
.IP "\(bu" 2
If the reference value starts with \fC\&./\fP or \fC\&.\&./\fP, it will be interpreted as relative to the current key or the parent of the current key\&.
.IP "\(bu" 2
If the reference value starts with \fC@/\fP, it will be relative to the parent-key used in the call to \fCkdbGet\fP\&.
.IP "\(bu" 2
All other values are treated as absolute and interpreted as a keyname directly\&.
.IP "\(bu" 2
\fC\&.\fP and \fC\&.\&.\fP will be treated the same way as in Unix paths\&. However, the plugin will emit warnings, if \fC\&.\fP is used anywhere other than before the first slash\&. Equally using \fC\&.\&.\fP after a path segment other than \fC\&.\&.\fP itself, will result in a warning\&. This is because these use cases are redundant and might be (or result in) mistakes\&. Here are a few examples of what results in warnings, and what doesn't:
.IP "  \(bu" 4
\fC\&./system/key\fP no warning
.IP "  \(bu" 4
\fCsystem/key\fP no warning
.IP "  \(bu" 4
\fCsystem/\&./key\fP warning, redundant use of \fC\&.\fP
.IP "  \(bu" 4
\fC\&.\&./\&.\&./\&.\&./key\fP no warning
.IP "  \(bu" 4
\fC\&.\&./key/\&.\&./otherkey\fPwarning, redundant use of \fC\&.\fP
.PP

.PP
.PP
.SS "Construction of the reference graph"
.PP
The process starts with a key \fCX\fP, which has the metakey \fCcheck/reference\fP set to the value \fCrecursive\fP\&. This key \fCX\fP must be an array key\&. The basename of \fCX\fP will be called the \fCrefname\fP\&. For each element in the array run the following process:
.PP
.IP "1." 4
Interpret the current key \fCK\fPs value as a reference and throw an error, if the reference is not valid\&.
.IP "2." 4
If there is no node for \fCK\fP in the reference graph create one\&. If there is no node for \fCR\fP in the reference graph create one\&. Insert an edge from \fCK\fP to \fCR\fP into the graph\&.
.IP "3." 4
Find a key \fCK1\fP directly below \fCR\fP that has the \fCrefname\fP as its basename\&. Interpret this key as an array if found\&. For each array element, start the process recursively from 1 and then continue with 4\&.
.IP "4." 4
Find any key \fCK2\fP directly below \fCR\fP that has the metakey \fCcheck/reference\fP set to \fCalternative\fP\&. Interpret any such key as an array\&. For each array element, start the process recursively from 1, but this time using the basename of \fCK2\fP (the of the array) as the \fCrefname\fP\&.
.PP
.PP
Once the whole process is finished, we will have a graph of the whole reference structure stemming from \fCX\fP\&. This graph can then be check for acyclicity\&.
.PP
.SS "Restriction of references"
.PP
Without any additional intervention, the plugin accepts the name of any existing key as valid reference value\&. Existing in this context means, the key either has a value or metadata associated with it\&. In recursive mode a key is also said to exist, if a key with the current \fCrefname\fP as a basename exists (has value or metadata) directly below the key in question\&. If, however, the key containing the reference value has the \fCcheck/reference/restrict\fP metakey set (even if the value is empty), its value has to be taken into account\&.
.PP
If the value \fCcheck/reference/restrict\fP is anything but a valid array-element-name, i\&.e\&. a \fC#\fP followed by \fCn\fP underscores (\fC_\fP) and \fCn+1\fP digits (\fC0-9\fP), its value will be used directly\&. Otherwise \fCcheck/reference/restrict\fP has to be a valid array and its elements will be treated as alternative restriction\&. Only one of these restriction has to be fulfilled for a reference to be valid\&.
.PP
Each restriction is first resolved as if it was a reference itself (see \fCResolution of references\fP)\&. The resolved value is then used as an Elektra-style globbing pattern\&. For the supported see \fBelektra-globbing\fP\&.
.PP
If a keyname matches the globbing expression it will be considered a valid reference (as long as the key actually exists)\&.
.PP
Note: If the restriction is the empty string \fC''\fP \fBno\fP keyname will match, meaning the reference key annotated with this metadata has to be a leaf node in the reference graph, and therefore cannot have a value (other than the empty string \fC''\fP)\&.
.PP
.SS "Usage"
.PP
.PP
.nf
# Mount the plugin
sudo kdb mount referencetest\&.dump user/tests/reference dump reference

# Mark a key as a single reference
kdb setmeta user/tests/reference/singleref check/reference single

# Try setting an invalid reference
kdb set user/tests/reference/singleref user/tests/reference/referred1
# RET: 5
# STDERR: \&.*Reason: Reference 'user/tests/reference/referred1', set in key 'user/tests/reference/singleref', does not reference an existing key\&.*

# Create referred key \&.\&.\&.
kdb set user/tests/reference/referred1 ""
#> Create a new key user/tests/reference/referred1 with string ""

# \&.\&.\&. and try again
kdb set user/tests/reference/singleref user/tests/reference/referred1
#> Set string to "user/tests/reference/referred1"

# Cleanup
kdb rm user/tests/reference/singleref
kdb rm user/tests/reference/referred1

# Unmount the plugin
sudo kdb umount user/tests/reference
.fi
.PP
.PP
.SS "Examples"
.PP
The \fBexamples\fP directory contains a few examples:
.PP
.IP "\(bu" 2
\fBalternative\fP shows how the \fCalternative\fP value of \fCcheck/reference\fP gets processed\&.
.IP "\(bu" 2
\fBcomplex\fP shows how the plugin can be used together with the spec plugin, to validate complex recursive structures\&. 
.PP

