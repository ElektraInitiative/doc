.TH "md_src_plugins_yamlcpp_README" 3elektra "Tue Oct 31 2017" "Version 0.8.20" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_yamlcpp_READMEPlugin: yamlcpp 
 \- 
.IP "\(bu" 2
infos = Information about the yamlcpp plugin is in keys below
.IP "\(bu" 2
infos/author = René Schwaiger sanssecours@me.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs = base64
.IP "\(bu" 2
infos/provides = storage/yaml
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = getstorage setstorage
.IP "\(bu" 2
infos/status = maintained preview experimental unfinished concept discouraged
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = This storage plugin reads and writes data in the YAML format
.PP
.SH "YAML CPP"
.PP
.SS "Introduction"
.PP
The YAML CPP plugin reads and writes configuration data via the \fCyaml-cpp\fP library\&.
.PP
.SS "Usage"
.PP
You can mount this plugin via \fCkdb mount\fP:
.PP
.PP
.nf
sudo kdb mount config\&.yaml /examples/yamlcpp yamlcpp
.fi
.PP
.PP
\&. To unmount the plugin use \fCkdb umount\fP:
.PP
.PP
.nf
sudo kdb umount /examples/yamlcpp
.fi
.PP
.PP
\&. The following examples show how you can store and retrieve data via \fCyamlcpp\fP\&.
.PP
``\fC <h1>Mount yamlcpp plugin to cascading namespace\fP/examples/yamlcpp` sudo kdb mount config\&.yaml /examples/yamlcpp yamlcpp
.PP
.SH "Manually add a mapping to the database"
.PP
.PP
echo '🔑 : 🐳' > \fCkdb file /examples/yamlcpp\fP 
.SH "Retrieve the value of the manually added key"
.PP
.PP
kdb get /examples/yamlcpp/🔑 #> 🐳
.PP
.SH "Manually add syntactically incorrect data"
.PP
.PP
echo 'some key: @some  value' >> \fCkdb file /examples/yamlcpp\fP kdb get '/examples/yamlcpp/some key' 
.SH "STDERR: \&.*Sorry, the error \&.#10\&. occurred\&.*⏎"
.PP
.PP
.SH "Description: Parsing failed⏎"
.PP
.PP
.SH "\&.*yaml-cpp: error at line 1, column 11: unknown token\&.*"
.PP
.PP
.SH "RET: 5"
.PP
.PP
.SH "Overwrite incorrect data"
.PP
.PP
echo '🔑: value' > \fCkdb file /examples/yamlcpp\fP
.PP
.SH "Add some values via \fCkdb set\fP"
.PP
.PP
kdb set /examples/yamlcpp/fleetwood mac kdb set /examples/yamlcpp/the chain
.PP
.SH "Retrieve the new values"
.PP
.PP
kdb get /examples/yamlcpp/the #> chain kdb get /examples/yamlcpp/fleetwood #> mac
.PP
.SH "Undo modifications"
.PP
.PP
kdb rm -r /examples/yamlcpp sudo kdb umount /examples/yamlcpp 
.PP
.nf
## Arrays

YAML CPP provides basic support for Elektra’s array data type\&.

.fi
.PP
 
.SH "Mount yamlcpp plugin to cascading namespace \fC/examples/yamlcpp\fP"
.PP
.PP
sudo kdb mount config\&.yaml /examples/yamlcpp yamlcpp
.PP
.SH "Manually add an array to the database"
.PP
.PP
echo 'sunny:' > \fCkdb file /examples/yamlcpp\fP echo ' - Charlie' >> \fCkdb file /examples/yamlcpp\fP echo ' - Dee' >> \fCkdb file /examples/yamlcpp\fP
.PP
.SH "List the array entries"
.PP
.PP
kdb ls /examples/yamlcpp #> user/examples/yamlcpp/sunny #> user/examples/yamlcpp/sunny/#0 #> user/examples/yamlcpp/sunny/#1
.PP
.SH "Read an array entry"
.PP
.PP
kdb get user/examples/yamlcpp/sunny/#1 #> Dee
.PP
.SH "You can retrieve the last index of an array by reading the metakey \fCarray\fP"
.PP
.PP
kdb getmeta /examples/yamlcpp/sunny array 
.SH "1"
.PP
.PP
.SH "Extend the array"
.PP
.PP
kdb set user/examples/yamlcpp/sunny/#2 Dennis kdb set user/examples/yamlcpp/sunny/#3 Frank kdb set user/examples/yamlcpp/sunny/#4 Mac
.PP
.SH "Retrieve the last array entry"
.PP
.PP
kdb get user/examples/yamlcpp/sunny/$(kdb getmeta user/examples/yamlcpp/sunny array) #> Mac
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r /examples/yamlcpp sudo kdb umount /examples/yamlcpp 
.PP
.nf
The plugin also supports nested arrays\&.

.fi
.PP
 
.SH "Mount yamlcpp plugin to cascading namespace \fC/examples/yamlcpp\fP"
.PP
.PP
sudo kdb mount config\&.yaml /examples/yamlcpp yamlcpp
.PP
.SH "Add some key value pairs"
.PP
.PP
kdb set /examples/yamlcpp/key value kdb set /examples/yamlcpp/array/#0 scalar kdb set /examples/yamlcpp/array/#1/key value kdb set /examples/yamlcpp/array/#1/🔑 🙈
.PP
kdb ls /examples/yamlcpp #> user/examples/yamlcpp/array #> user/examples/yamlcpp/array/#0 #> user/examples/yamlcpp/array/#1 #> user/examples/yamlcpp/array/#1/key #> user/examples/yamlcpp/array/#1/🔑 #> user/examples/yamlcpp/key
.PP
.SH "Retrieve part of an array value"
.PP
.PP
kdb get /examples/yamlcpp/array/#1/key #> value
.PP
.SH "Since an array saves a list of values, an array parent"
.PP
.PP
.SH "- which represent the array - does not store a value!"
.PP
.PP
echo '/examples/yamlcpp/array: “`kdb get /examples/yamlcpp/array`”' #> /examples/yamlcpp/array: “” kdb get /examples/yamlcpp/array/#1 echo '/examples/yamlcpp/array/#1: “`kdb get /examples/yamlcpp/array/#1`”' #> /examples/yamlcpp/array/#1: “”
.PP
.SH "Remove part of an array value"
.PP
.PP
kdb rm /examples/yamlcpp/array/#1/key
.PP
kdb ls /examples/yamlcpp #> user/examples/yamlcpp/array #> user/examples/yamlcpp/array/#0 #> user/examples/yamlcpp/array/#1 #> user/examples/yamlcpp/array/#1/🔑 #> user/examples/yamlcpp/key
.PP
.SH "The plugin stores array keys using YAML sequences\&."
.PP
.PP
.SH "Since yaml-cpp stores keys in arbitrary order -"
.PP
.PP
.SH "either \fCkey\fP or \fCarray\fP could be the “first” key -"
.PP
.PP
.SH "we remove \fCkey\fP before we retrieve the data\&. This way"
.PP
.PP
.SH "we make sure that the output below will always look"
.PP
.PP
.SH "the same\&."
.PP
.PP
kdb rm /examples/yamlcpp/key kdb file /examples/yamlcpp | xargs cat #> array: #> - scalar #> - 🔑: 🙈
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r /examples/yamlcpp sudo kdb umount /examples/yamlcpp 
.PP
.nf
## Metadata

The plugin supports metadata\&. The example below shows how a basic `Key` including some metadata, looks inside the YAML configuration file:

```yaml
key without metadata: value
key with metadata:
  !elektra/meta
    - value2
    - metakey: metavalue
      empty metakey:
      another metakey: another metavalue

.fi
.PP
.PP
\&. As we can see above the value containing metadata is marked by the tag handle \fC!elektra/meta\fP\&. The data type contains a list with two elements\&. The first element of this list specifies the value of the key, while the second element contains a map saving the metadata for the key\&. The data above represents the following key set in Elektra if we mount the file directly to the namespace \fCuser\fP:
.PP
Name Value Metaname Metavalue  user/key without metadata value1 — — user/key with metadata value2 metakey metavalue empty metakey — another metakey another metavalue \&. The example below shows how we can read and write metadata using the \fCyamlcpp\fP plugin via \fCkdb\fP\&.
.PP
``\fC <h1>Mount yamlcpp plugin to cascading namespace\fP/examples/yamlcpp` sudo kdb mount config\&.yaml /examples/yamlcpp yamlcpp
.PP
.SH "Manually add a key including metadata to the database"
.PP
.PP
echo '🔑: !elektra/meta [🦄, {comment: Unicorn}]' > \fCkdb file /examples/yamlcpp\fP kdb lsmeta /examples/yamlcpp/🔑 #> comment kdb getmeta /examples/yamlcpp/🔑 comment #> Unicorn
.PP
.SH "Add a new key and add some metadata to the new key"
.PP
.PP
kdb set /examples/yamlcpp/brand new kdb setmeta /examples/yamlcpp/brand comment 'The Devil And God Are Raging Inside Me' kdb setmeta /examples/yamlcpp/brand rationale 'Because I Love It'
.PP
.SH "Retrieve metadata"
.PP
.PP
kdb lsmeta /examples/yamlcpp/brand #> comment #> rationale kdb getmeta /examples/yamlcpp/brand rationale #> Because I Love It
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r /examples/yamlcpp sudo kdb umount /examples/yamlcpp 
.PP
.nf
We can also invoke additional plugins that use metadata like `type`\&.

.fi
.PP
 sudo kdb mount config\&.yaml /examples/yamlcpp yamlcpp type kdb set /examples/yamlcpp/typetest/number 21 kdb setmeta /examples/yamlcpp/typetest/number check/type short
.PP
kdb set /examples/yamlcpp/typetest/number 'One' 
.SH "RET: 5"
.PP
.PP
.SH "STDERR: \&.*Sorry, the error \&.#52\&. occurred\&.*⏎"
.PP
.PP
.SH "Description: could not type check value of key⏎"
.PP
.PP
.SH "\&.*Reason: The type long failed to match for \&.*/number with string: One\&.*"
.PP
.PP
kdb get /examples/yamlcpp/typetest/number #> 21
.PP
.SH "Undo modifications to the key database"
.PP
.PP
kdb rm -r /examples/yamlcpp sudo kdb umount /examples/yamlcpp 
.PP
.nf
## Binary Data

YAML CPP also supports [base64](https://tools\&.ietf\&.org/html/rfc4648) encoded data via the [Base64](@ref src_plugins_base64_README_md) plugin\&.

.fi
.PP
 
.SH "Mount YAML CPP plugin at cascading namespace \fC/examples/binary\fP"
.PP
.PP
sudo kdb mount test\&.yaml /examples/binary yamlcpp 
.SH "Manually add binary data"
.PP
.PP
echo 'bin: !!binary aGk=' > \fCkdb file /examples/binary\fP
.PP
.SH "Base 64 decodes the data \fCaGk=\fP to \fChi\fP and stores the value in binary form\&."
.PP
.PP
.SH "The command \fCkdb get\fP prints the data as hexadecimal byte values\&."
.PP
.PP
kdb get /examples/binary/bin #> 
.PP
.SH "We can use \fCruby\fP to convert the hexadecimal value returned by \fCkdb get\fP"
.PP
.PP
.SH "to its ASCII representation\&. If you use \fCbash\fP or \fCfish\fP as shell then"
.PP
.PP
.SH "printf \fCkdb get /examples/binary/bin\fP # Bash"
.PP
.PP
.SH "or"
.PP
.PP
.SH "printf (kdb get /examples/binary/bin) # fish"
.PP
.PP
.SH "should work too\&."
.PP
.PP
ruby -e 'print ARGV[0]\&.split('\\x')[1\&.\&.-1]\&.map {|byte| byte\&.to_i(16)\&.chr }\&.join' \fCkdb get /examples/binary/bin\fP #> hi
.PP
.SH "Add a string value to the database"
.PP
.PP
kdb set /examples/binary/text mate 
.SH "Base 64 does not modify textual values"
.PP
.PP
kdb get /examples/binary/text #> mate
.PP
.SH "The Base 64 plugin re-encodes binary data before YAML CPP stores the key set\&. Hence the"
.PP
.PP
.SH "configuration file contains the value \fCaGk=\fP even after YAML CPP wrote a new configuration\&."
.PP
.PP
grep -q 'bin: !\&.* aGk=' \fCkdb file user/examples/binary\fP 
.SH "RET: 0"
.PP
.PP
.SH "Undo modifications to the database"
.PP
.PP
kdb rm -r /examples/binary sudo kdb umount /examples/binary 
.PP
.nf
## Dependencies

This plugin requires [yaml-cpp][]\&. On a Debian based OS the package for the library is called `libyaml-cpp-dev` \&. On macOS you can install the package `yaml-cpp` via [HomeBrew](https://brew\&.sh)\&.

## Limitations

### Leaf Values

One of the limitations of this plugin is, that it only supports values inside [leaf nodes](https://github\&.com/ElektraInitiative/libelektra/issues/106)\&. Let us look at an example to show what that means\&. The YAML file below:

```yaml
root:
  subtree:    🍂
  below root: leaf
level 1:
  level 2:
    level 3:  🍁

.fi
.PP
.PP
stores all of the values (\fC🍂\fP, \fCleaf\fP and \fC🍁\fP) in the leaves of the mapping\&. The drawing below makes this situation a little bit clearer\&.
.PP
.PP
The key set that this plugin creates using the data above looks like this (assuming we mount the plugin to \fCuser/examples/yamlcpp\fP):
.PP
Name Value  user/examples/yamlcpp/level user/examples/yamlcpp/level 1/level 2 user/examples/yamlcpp/level 1/level 2/level 3 🍁 user/examples/yamlcpp/root user/examples/yamlcpp/root/below root leaf user/examples/yamlcpp/root/subtree 🍂 \&. Now why is this plugin unable to store values outside leaf nodes? For example, why can we not store a value inside \fCuser/examples/yamlcpp/level 1/level 2\fP? To answer this question we need to look at the YAML representation:
.PP
.PP
.nf
level 1:
  level 2:
    level 3:  🍁
.fi
.PP
.PP
\&. In a naive approach we might just try to add a value e\&.g\&. \fC🙈\fP right next to level 2:
.PP
.PP
.nf
level 1:
  level 2: 🙈
    level 3:  🍁
.fi
.PP
.PP
\&. This however would be not correct, since then the YAML node \fClevel 2\fP would contain both a scalar value (\fC🙈\fP) and a mapping (\fC{ level 3: 🍁 }\fP)\&. We could solve this dilemma using a list:
.PP
.PP
.nf
level 1:
  level 2:
    - 🙈
    - level 3:  🍁
.fi
.PP
.PP
\&. However, if we use this approach we are not able to support Elektra’s array type properly\&.
.PP
.SS "Other Limitations"
.PP
.IP "\(bu" 2
Adding and removing keys does remove \fBcomments\fP inside the configuration file
.IP "\(bu" 2
The plugin currently lacks proper \fBtype support\fP for scalars\&. For example, YAML CPP saves binary keys directly as string\&. Ideally the plugin should \fCbase64\fP-encode binary data and then save the result using the tag \fCtag:yaml\&.org,2002:binary\fP (shorthand: \fC!!binary\fP)\&. 
.PP

