.TH "org.libelektra.Key" 3elektra "Sun May 13 2018" "Version 0.8.23" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.Key \- \fBKey\fP is an essential class that encapsulates key name , value and metainfo\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits Iterable< String >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Clean-up method to release key reference\&. "
.ti -1c
.RI "boolean \fBisNull\fP ()"
.br
.RI "Helper function that does null comparison\&. "
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.RI "Basic java function that represents object as String\&. "
.ti -1c
.RI "java\&.util\&.Iterator< String > \fBiterator\fP ()"
.br
.RI "Iterable interface function\&. "
.ti -1c
.RI "boolean \fBgetBoolean\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "byte \fBgetByte\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "short \fBgetShort\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "int \fBgetInteger\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "long \fBgetLong\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "float \fBgetFloat\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "double \fBgetDouble\fP ()"
.br
.RI "Data type specific accessor function\&. "
.ti -1c
.RI "void \fBsetBoolean\fP (final boolean v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetByte\fP (final byte v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetShort\fP (final short v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetInteger\fP (final int v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetLong\fP (final long v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetFloat\fP (final float v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetDouble\fP (final double v)"
.br
.RI "Data type specific setter function\&. "
.ti -1c
.RI "void \fBsetError\fP (final String text, final Object\&.\&.\&. args)"
.br
.RI "Helper function to set proper error meta for key\&. "
.ti -1c
.RI "void \fBaddWarning\fP (final String text, final Object\&.\&.\&. args)"
.br
.RI "Helper function to add warning meta for key\&. "
.ti -1c
.RI "\fBKey\fP \fBdup\fP ()"
.br
.RI "Duplicates the key\&. "
.ti -1c
.RI "void \fBcopy\fP (final \fBKey\fP source)"
.br
.RI "Copies the information from the source key into this key\&. "
.ti -1c
.RI "int \fBgetRef\fP ()"
.br
.RI "Gets the reference counter for this key\&. "
.ti -1c
.RI "int \fBrewindMeta\fP ()"
.br
.RI "Tries to rewind the meta information for this key\&. "
.ti -1c
.RI "\fBKey\fP \fBnextMeta\fP ()"
.br
.RI "Gets the next meta information for this key\&. "
.ti -1c
.RI "\fBKey\fP \fBcurrentMeta\fP ()"
.br
.RI "Gets the current meta information for this key\&. "
.ti -1c
.RI "int \fBcopyMeta\fP (final \fBKey\fP source, final String metaName)"
.br
.RI "Helper function to copy some meta information from a source \fBKey\fP to this key\&. "
.ti -1c
.RI "int \fBcopyAllMeta\fP (final \fBKey\fP source)"
.br
.RI "Helper function to copy all meta information from a source key to this key\&. "
.ti -1c
.RI "\fBKey\fP \fBgetMeta\fP (final String metaName)"
.br
.RI "Getter for meta information\&. "
.ti -1c
.RI "int \fBsetMeta\fP (final String metaName, final String newMetaString)"
.br
.RI "Setter for meta information\&. "
.ti -1c
.RI "int \fBcmp\fP (final \fBKey\fP other)"
.br
.RI "Helper function to compare two keys\&. "
.ti -1c
.RI "int \fBrel\fP (final \fBKey\fP other)"
.br
.RI "Helper function to check for relation between keys\&. "
.ti -1c
.RI "int \fBneedsSync\fP ()"
.br
.RI "Helper function to check if synchronization is necessary\&. "
.ti -1c
.RI "boolean \fBisBelow\fP (final \fBKey\fP other)"
.br
.RI "Helper function to check if key is sub-key of other key\&. "
.ti -1c
.RI "boolean \fBisBelowOrSame\fP (final \fBKey\fP other)"
.br
.RI "Helper function to check if key is other key or sub-key of other key\&. "
.ti -1c
.RI "boolean \fBisDirectBelow\fP (final \fBKey\fP other)"
.br
.RI "Helper function to check if key is direct sub-key of other key\&. "
.ti -1c
.RI "boolean \fBisInactive\fP ()"
.br
.RI "Helper function to check if key is set to inactive\&. "
.ti -1c
.RI "boolean \fBisBinary\fP ()"
.br
.RI "Helper function to check if key is binary key\&. "
.ti -1c
.RI "boolean \fBisString\fP ()"
.br
.RI "Helper function to check if key is string key\&. "
.ti -1c
.RI "String \fBgetName\fP ()"
.br
.RI "Helper function to get key name (key part of 'key-value' pair) "
.ti -1c
.RI "int \fBgetNameSize\fP ()"
.br
.RI "Helper function to get key name size\&. "
.ti -1c
.RI "void \fBsetName\fP (final String name)  throws KeyInvalidName "
.br
.RI "Helper function to set key name\&. "
.ti -1c
.RI "String \fBgetBaseName\fP ()"
.br
.RI "Helper function to get key base name\&. "
.ti -1c
.RI "int \fBgetBaseNameSize\fP ()"
.br
.RI "Helper function to get key base name length\&. "
.ti -1c
.RI "void \fBsetBaseName\fP (final String baseName)  throws KeyInvalidName "
.br
.RI "Helper function to set key base name; will replace current base name with new base name\&. "
.ti -1c
.RI "void \fBaddBaseName\fP (final String baseName)  throws KeyInvalidName "
.br
.RI "Helper function to add key base name; will add given base name to current key so that new key is sub key of current key\&. "
.ti -1c
.RI "int \fBgetValueSize\fP ()"
.br
.RI "Helper function to get key value size/length\&. "
.ti -1c
.RI "String \fBgetString\fP ()  throws KeyTypeMismatch "
.br
.RI "Helper function to get representation of key value\&. "
.ti -1c
.RI "int \fBsetString\fP (final String newString)"
.br
.RI "Helper function to set new key value\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP (final String name, final Object value, final Key\&.\&.\&. meta)"
.br
.RI "Basic constructor of key class\&. "
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP (final String name, final Key\&.\&.\&. meta)"
.br
.RI "Basic constructor of key class\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBKey\fP (final long p)"
.br
.RI "Helper constructor for duplication by pointer in long format\&. "
.ti -1c
.RI "\fBKey\fP (final Pointer p)"
.br
.RI "Helper constructor for duplication by pointer\&. "
.ti -1c
.RI "void \fBfinalize\fP ()  throws Throwable "
.br
.RI "Clean-up method to inform underlying c-library about the release of the key reference in jna-binding\&. "
.ti -1c
.RI "void \fBincRef\fP ()"
.br
.RI "Increments the reference counter for this key\&. "
.ti -1c
.RI "void \fBdecRef\fP ()"
.br
.RI "Decrements the reference counter for this key\&. "
.ti -1c
.RI "Pointer \fBget\fP ()"
.br
.RI "Native pointer used by JNA\&. "
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP (final String name, final Object\&.\&.\&. args)"
.br
.RI "Basic constructor of key class\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBKey\fP is an essential class that encapsulates key name , value and metainfo\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.libelektra\&.Key\&.Key (final long p)\fC [inline]\fP, \fC [protected]\fP"

.PP
Helper constructor for duplication by pointer in long format\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Pointer in long format 
.RE
.PP

.SS "org\&.libelektra\&.Key\&.Key (final Pointer p)\fC [inline]\fP, \fC [protected]\fP"

.PP
Helper constructor for duplication by pointer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Pointer as Pointer object 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void org\&.libelektra\&.Key\&.addBaseName (final String baseName) throws KeyInvalidName\fC [inline]\fP"

.PP
Helper function to add key base name; will add given base name to current key so that new key is sub key of current key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbaseName\fP New key base name to add 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKeyInvalidName\fP 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.addWarning (final String text, final Object\&.\&.\&. args)\fC [inline]\fP"

.PP
Helper function to add warning meta for key\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP Reason for the warning 
.br
\fIargs\fP Custom arguments 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.cmp (final \fBKey\fP other)\fC [inline]\fP"

.PP
Helper function to compare two keys\&. Compares the key name with normal String comparison\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Other \fBKey\fP object that is used in comparison 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if key name is equal; -1 if this key name has lower alphabetical order than the other key; 1 if this key has higher alphabetical order 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.copy (final \fBKey\fP source)\fC [inline]\fP"

.PP
Copies the information from the source key into this key\&. Does nothing if null is provided\&.
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP Source \fBKey\fP object containing the information to copy 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.copyAllMeta (final \fBKey\fP source)\fC [inline]\fP"

.PP
Helper function to copy all meta information from a source key to this key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP \fBKey\fP object that is used as source 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if meta was successfully copied, 0 if source doesn't contain any meta and nothing had to be done, -1 in case of an error or if the source parameter was null 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.copyMeta (final \fBKey\fP source, final String metaName)\fC [inline]\fP"

.PP
Helper function to copy some meta information from a source \fBKey\fP to this key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP \fBKey\fP object that is used as source 
.br
\fImetaName\fP \fBKey\fP name of the meta to be copied 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if meta was successfully copied, 0 if source doesn't contain the required meta and nothing had to be done, -1 in case of an error or if the source parameter was null 
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create (final String name, final Object\&.\&.\&. args)\fC [inline]\fP, \fC [static]\fP, \fC [protected]\fP"

.PP
Basic constructor of key class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP \fBKey\fP name; first part of key-value pair 
.br
\fIargs\fP Arguments used for key value\&. Example:
.br
 Key\&.KEY_VALUE, 'custom key value', Key\&.KEY_END 
.RE
.PP
\fBReturns:\fP
.RS 4
New key object 
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create (final String name, final Object value, final Key\&.\&.\&. meta)\fC [inline]\fP, \fC [static]\fP"

.PP
Basic constructor of key class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP \fBKey\fP name; first part of key-value pair 
.br
\fIvalue\fP \fBKey\fP value; will be determine from the object by calling \fBObject#toString()\fP, null is supported too 
.br
\fImeta\fP Metadata that should be added to this key, null keys will be filtered away 
.RE
.PP
\fBReturns:\fP
.RS 4
New key object 
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create (final String name, final Key\&.\&.\&. meta)\fC [inline]\fP, \fC [static]\fP"

.PP
Basic constructor of key class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP \fBKey\fP name; first part of key-value pair 
.br
\fImeta\fP Metadata that should be added to this key\&. Will filter null values\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
New key object 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.currentMeta ()\fC [inline]\fP"

.PP
Gets the current meta information for this key\&. 
.PP
\fBReturns:\fP
.RS 4
new \fBKey\fP object containing the current meta information 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.dup ()\fC [inline]\fP"

.PP
Duplicates the key\&. 
.PP
\fBReturns:\fP
.RS 4
New \fBKey\fP object containing the same information as this key 
.RE
.PP

.SS "Pointer org\&.libelektra\&.Key\&.get ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Native pointer used by JNA\&. 
.PP
\fBReturns:\fP
.RS 4
Native pointer object for this key 
.RE
.PP

.SS "String org\&.libelektra\&.Key\&.getBaseName ()\fC [inline]\fP"

.PP
Helper function to get key base name\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP base name as String 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.getBaseNameSize ()\fC [inline]\fP"

.PP
Helper function to get key base name length\&. 
.PP
\fBReturns:\fP
.RS 4
Length of key base name 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.getBoolean ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in boolean format 
.RE
.PP

.SS "byte org\&.libelektra\&.Key\&.getByte ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in byte format 
.RE
.PP

.SS "double org\&.libelektra\&.Key\&.getDouble ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in double format 
.RE
.PP

.SS "float org\&.libelektra\&.Key\&.getFloat ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in float format 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.getInteger ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in integer format 
.RE
.PP

.SS "long org\&.libelektra\&.Key\&.getLong ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in long integer format 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.getMeta (final String metaName)\fC [inline]\fP"

.PP
Getter for meta information\&. 
.PP
\fBParameters:\fP
.RS 4
\fImetaName\fP \fBKey\fP name of meta information to be fetched 
.RE
.PP
\fBReturns:\fP
.RS 4
New \fBKey\fP object containing the requested meta information 
.RE
.PP

.SS "String org\&.libelektra\&.Key\&.getName ()\fC [inline]\fP"

.PP
Helper function to get key name (key part of 'key-value' pair) 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP name as String 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.getNameSize ()\fC [inline]\fP"

.PP
Helper function to get key name size\&. 
.PP
\fBReturns:\fP
.RS 4
Length of key name 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.getRef ()\fC [inline]\fP"

.PP
Gets the reference counter for this key\&. 
.PP
\fBReturns:\fP
.RS 4
Reference counter as integer 
.RE
.PP

.SS "short org\&.libelektra\&.Key\&.getShort ()\fC [inline]\fP"

.PP
Data type specific accessor function\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in short integer format 
.RE
.PP

.SS "String org\&.libelektra\&.Key\&.getString () throws KeyTypeMismatch\fC [inline]\fP"

.PP
Helper function to get representation of key value\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP value in String format 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKeyTypeMismatch\fP 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.getValueSize ()\fC [inline]\fP"

.PP
Helper function to get key value size/length\&. 
.PP
\fBReturns:\fP
.RS 4
Length of key value 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isBelow (final \fBKey\fP other)\fC [inline]\fP"

.PP
Helper function to check if key is sub-key of other key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBKey\fP that is used in check as parent key 
.RE
.PP
\fBReturns:\fP
.RS 4
Boolean if this key is (non-direct) sub-key of other-key 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isBelowOrSame (final \fBKey\fP other)\fC [inline]\fP"

.PP
Helper function to check if key is other key or sub-key of other key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBKey\fP that is used in check as parent key 
.RE
.PP
\fBReturns:\fP
.RS 4
Boolean if this key is other key or (non-direct) sub-key of other-key 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isBinary ()\fC [inline]\fP"

.PP
Helper function to check if key is binary key\&. 
.PP
\fBReturns:\fP
.RS 4
Boolean if this key is a binary key 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isDirectBelow (final \fBKey\fP other)\fC [inline]\fP"

.PP
Helper function to check if key is direct sub-key of other key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBKey\fP that is used in check as parent key 
.RE
.PP
\fBReturns:\fP
.RS 4
Boolean if this key is direct sub-key of other key ('child') 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isInactive ()\fC [inline]\fP"

.PP
Helper function to check if key is set to inactive\&. 
.PP
\fBReturns:\fP
.RS 4
Boolean if this key is inactive 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isNull ()\fC [inline]\fP"

.PP
Helper function that does null comparison\&. 
.PP
\fBReturns:\fP
.RS 4
Boolean if key is null 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.isString ()\fC [inline]\fP"

.PP
Helper function to check if key is string key\&. 
.PP
\fBReturns:\fP
.RS 4
Boolean if this key is a string key 
.RE
.PP

.SS "java\&.util\&.Iterator<String> org\&.libelektra\&.Key\&.iterator ()\fC [inline]\fP"

.PP
Iterable interface function\&. 
.PP
\fBReturns:\fP
.RS 4
Custom \fBKeyNameIterator\fP 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.needsSync ()\fC [inline]\fP"

.PP
Helper function to check if synchronization is necessary\&. 
.PP
\fBReturns:\fP
.RS 4
1 if needs sync, 0 if no change done and -1 in case of a null pointer 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.nextMeta ()\fC [inline]\fP"

.PP
Gets the next meta information for this key\&. 
.PP
\fBReturns:\fP
.RS 4
new \fBKey\fP object containing the next meta information 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.rel (final \fBKey\fP other)\fC [inline]\fP"

.PP
Helper function to check for relation between keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Other \fBKey\fP object that is used in relation check 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if other is equal to this; > 0 if other is sub-key of this key; < 0 otherwise or in case of an error 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.rewindMeta ()\fC [inline]\fP"

.PP
Tries to rewind the meta information for this key\&. 
.PP
\fBReturns:\fP
.RS 4
0 in case of no errors; 1 if key is not found; 2 if metakey is not found 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setBaseName (final String baseName) throws KeyInvalidName\fC [inline]\fP"

.PP
Helper function to set key base name; will replace current base name with new base name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbaseName\fP New key base name to use 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKeyInvalidName\fP 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setBoolean (final boolean v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Boolean value to set 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setByte (final byte v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Byte value to set 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setDouble (final double v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Double value to set 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setError (final String text, final Object\&.\&.\&. args)\fC [inline]\fP"

.PP
Helper function to set proper error meta for key\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP Reason for the error 
.br
\fIargs\fP Custom arguments 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setFloat (final float v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Float value to set 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setInteger (final int v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Integer value to set 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setLong (final long v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Long integer value to set 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.setMeta (final String metaName, final String newMetaString)\fC [inline]\fP"

.PP
Setter for meta information\&. 
.PP
\fBParameters:\fP
.RS 4
\fImetaName\fP \fBKey\fP name of meta information to be set 
.br
\fInewMetaString\fP Meta value to be set 
.RE
.PP
\fBReturns:\fP
.RS 4
-1 in case of an error, 0 if no meta with given name is available for the key and value > 0 representing the size of newMetaString if update successful 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setName (final String name) throws KeyInvalidName\fC [inline]\fP"

.PP
Helper function to set key name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP New key name to use 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKeyInvalidName\fP 
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.setShort (final short v)\fC [inline]\fP"

.PP
Data type specific setter function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP Short integer value to set 
.RE
.PP

.SS "int org\&.libelektra\&.Key\&.setString (final String newString)\fC [inline]\fP"

.PP
Helper function to set new key value\&. 
.PP
\fBParameters:\fP
.RS 4
\fInewString\fP New key value to set 
.RE
.PP
\fBReturns:\fP
.RS 4
value > 0 representing saved bytes (+null byte), -1 in case of an error (null key) 
.RE
.PP

.SS "String org\&.libelektra\&.Key\&.toString ()\fC [inline]\fP"

.PP
Basic java function that represents object as String\&. 
.PP
\fBReturns:\fP
.RS 4
\fBKey\fP name in String format 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
