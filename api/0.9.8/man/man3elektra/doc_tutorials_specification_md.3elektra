.TH "doc_tutorials_specification_md" 3elektra "Mon Oct 4 2021" "Version 0.9.8" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_specification_md \- How to Write a Specification in Elektra 
 
.SH "Overview"
.PP
.SS "Introduction"
In this tutorial you will learn how to interactively use the \fCSpecElektra\fP specification language and \fCkdb\fP to write a configuration specification for an example application\&.
.SS "What you should already know"
.IP "\(bu" 2
how to install Elektra
.IP "\(bu" 2
basic Elektra commands and concepts (kdb get, kdb set, kdb ls)
.IP "\(bu" 2
how to open and use a terminal
.PP
.SS "What youâ€™ll Learn"
.IP "\(bu" 2
how to create and mount a specification using \fCkdb\fP
.IP "\(bu" 2
how to add keys with different types, defaults and examples to your specification and how to validate them
.IP "\(bu" 2
the benefits of using \fCkdb\fP to generate a specification, instead of writing one by hand
.PP
.SS "What you'll do"
.IP "\(bu" 2
use \fCkdb\fP to create and mount a specification for an example CRUD (Create, Read, Update, Delete) application
.IP "\(bu" 2
define defaults, examples and checks for keys in the validation
.PP
.SH "Example App Overview"
.PP
For this tutorial you will write a specification for a simple CRUD backend application\&. You need to configure a \fCport\fP and a \fCsecure\fP property, that toggles SSL usage, for the REST server\&. An \fCip\fP and a SQL \fCdialect\fP for the database server the app will connect to and finally a \fCdate\fP where all the data will be saved to a backup\&.
.PP
So the application will need the following configuration options:
.PP
.IP "\(bu" 2
a server port
.IP "\(bu" 2
server secure
.IP "\(bu" 2
a database ip
.IP "\(bu" 2
a database dialect
.IP "\(bu" 2
a backup date
.PP
.SH "Getting Started"
.PP
Make sure you have \fCElektra\fP installed on your local machine:
.PP
.PP
.nf
kdb --version

KDB_VERSION: 0\&.9\&.6
SO_VERSION: 5
.fi
.PP
.PP
Otherwise refer to the \fCgetting started guide\fP to install it\&.
.SH "Mounting the Specification"
.PP
.SS "Step 1: Mount a Specification File"
First you need to mount a specification file, in this case \fCspec\&.ni\fP to the \fCspec:/\fP namespace\&. You can define the path inside the \fCspec:/\fP namespace as \fC/sw/org/app/#0/current\fP, refer to \fCthe documentation\fP to find out more about constructing the name\&.
.PP
You will also be using the profile \fCcurrent\fP, you can find out more about profiles in \fCthe documentation\fP aswell\&.
.PP
You also need the specify the plugin you will use for writing to the file in the correct format\&. In this case you can choose the \fCni\fP plugin to write to the specification file\&.
.PP
.PP
.nf
sudo kdb mount `pwd`/spec\&.ni spec:/sw/org/app/\#0/current ni
.fi
.PP
.PP
Using the command below you can list the directory of the concrete file that is used by Elektra\&.
.PP
.PP
.nf
kdb file spec:/sw/org/app/\#0/current
.fi
.PP
.SS "Step 2: Define a mountpoint"
Next you can define, that this specification defines a specific mountpoint for a concrete application configuration\&. So you can say the concrete configuraion should be written to \fCapp\&.ni\fP\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current mountpoint app\&.ni
.fi
.PP
.PP
Your \fCspec\&.ni\fP file should now look something like this:
.PP
.PP
.nf
cat $(kdb file spec:/sw/org/app/\#0/current)

;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

 =

[]
 meta:/mountpoint = app\&.ni
.fi
.PP
.SS "Step 3: Do a specification mount"
.PP
.nf
kdb spec-mount /sw/org/app/\#0/current ni
.fi
.PP
.PP
This specification mount makes sure that the paths where the concrete configuration should be, in this case \fCapp\&.ni\fP, are ready to fulfill or specification, in this case \fCspec\&.ni\fP\&.
.SH "Adding your first key to the specification"
.PP
.SS "Step 1: Adding the server port"
The first key you will add to our specification will be the port of the server\&. You add it using the following command below\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/server/port type short
.fi
.PP
.PP
What you also specified in the command above is the type of the configuration key\&. Elektra uses the \fCCORBA type system\fP and will check that keys conform to the type specified\&.
.PP
So after adding the initial key your specification should look something like this:
.PP
.PP
.nf
cat $(kdb file spec:/sw/org/app/\#0/current)


;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

 =
server/port =

[]
 meta:/mountpoint = app\&.ni

[server/port]
 meta:/type = short
.fi
.PP
.SS "Step 2: Adding more metadata"
So with your first key added, you of course want to specify more information for the port\&. There surely is more information to a port than just the type\&. What about a \fCdefault\fP, or what about an \fCexample\fP for a usable port? Maybe a \fCdescription\fP what the port really is for? Let's add that next!
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/server/port default 8080
kdb meta-set spec:/sw/org/app/\#0/current/server/port example 8080
kdb meta-set spec:/sw/org/app/\#0/current/server/port description "port of the REST server that runs the application"
.fi
.PP
.PP
Beautiful! Your specification is starting to look like something useful\&. But wait! Shouldn't a port just use values between \fC1\fP and \fC65535\fP?
.PP
Of course Elektra also has a plugin for that\&. You can just use the \fCnetwork\fP checker plugin\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/server/port check/port ''
.fi
.PP
.PP
Nice! You just have to do one more thing when using a new plugin\&. Elektra needs to remount the spec to use the new plugin\&. Use the command from before:
.PP
.PP
.nf
kdb spec-mount /sw/org/app/\#0/current ni
.fi
.PP
.PP
Your final specification after adding the port should now look something like this
.PP
.PP
.nf
cat $(kdb file spec:/sw/org/app/\#0/current)

;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

 =
server/port =

[]
 meta:/mountpoint = app\&.ni

[server/port]
 meta:/check/port =
 meta:/type = short
 meta:/example = 8080
 meta:/description = port of the REST server that runs the application
 meta:/default = 8080
.fi
.PP
.PP
You can now try to read the value of the newly created configuration\&. Since you did not set the value to anything yet, you will get the default value back\&.
.PP
.PP
.nf
kdb get /sw/org/app/\#0/current/server/port

#>8080
.fi
.PP
.PP
Try to set the port to \fC123456\fP now\&.
.PP
.PP
.nf
kdb set /sw/org/app/\#0/current/server/port 123456
# STDERR: Port 123456 on key /server/port was not within 0 - 65535
.fi
.PP
.PP
Did it work? I hope not\&. The validation plugin you specified will now correctly validate the port you enter and give you an error\&.
.SS "Step 3: Adding boolean keys"
Next up you will configure the \fCsecure\fP property of our server\&. This boolean key will toggle if your server encrypts the communication via SSL\&.
.PP
So we will add the key and some metadata for it:
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/server/secure type boolean
kdb meta-set spec:/sw/org/app/\#0/current/server/secure default 1
kdb meta-set spec:/sw/org/app/\#0/current/server/secure example 0
kdb meta-set spec:/sw/org/app/\#0/current/server/secure description "true if the REST server uses SSL for communication"
.fi
.PP
.PP
By default the \fCtype\fP plugin will normalize boolean values when setting them, before storing them\&. This only works for the concrete config, so when setting the values for the spec you have to use the unnormalized values\&. In the case it uses \fC1\fP for boolean \fCtrue\fP and \fC0\fP for boolean \fCfalse\fP\&.
.PP
You can read more about this in the documentation for the \fCtype plugin\fP\&.
.SH "Adding the database keys to the specification"
.PP
.SS "Step 1: Adding the database ip"
Next up you will add a key for the database \fCip\fP address\&. Like with the key before, you will add a \fCtype\fP, \fCdefault\fP, \fCexample\fP and a \fCdescription\fP so that the configuration will be easily usable\&.
.PP
Don't forget the most important rule of configurations: \fBAlways add sensible defaults!\fP
.PP
Now let's try something different\&. What if you change the file manually? Will Elektra pick up on the changes? And save you from writing \fBa lot\fP of \fCkdb\fP commands?
.PP
\fIof course\fP
.PP
So just open your file using good old \fCvim\fP and add the following lines to specify configuration for the \fCip\fP address\&.
.PP
.PP
.nf
vim $(kdb file spec:/sw/org/app/\#0/current)

;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

database/ip =
 =
server/port =
server/secure =

[database/ip]
 meta:/check/ipaddr =
 meta:/type = string
 meta:/example = 127\&.0\&.0\&.1
 meta:/description = ip address of the database server, that the application will connect to
 meta:/default = 127\&.0\&.0\&.1

[]
 meta:/mountpoint = app\&.ni

[server/port]
 meta:/check/port =
 meta:/type = short
 meta:/example = 8080
 meta:/description = port of the REST server that runs the application
 meta:/default = 8080

[server/secure]
 meta:/type = boolean
 meta:/example = 0
 meta:/description = true if the REST server uses SSL for communication
 meta:/default = 1
.fi
.PP
.PP
Alternatively you can of course use \fCkdb\fP again to set the configuration values that way\&. Here are the commands to do that\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/database/ip type string
kdb meta-set spec:/sw/org/app/\#0/current/database/ip default 127\&.0\&.0\&.1
kdb meta-set spec:/sw/org/app/\#0/current/database/ip example 127\&.0\&.0\&.1
kdb meta-set spec:/sw/org/app/\#0/current/database/ip description "ip address of the database server, that the application will connect to"
kdb meta-set spec:/sw/org/app/\#0/current/database/ip check/ipaddr ''
.fi
.PP
.SS "Step 2: Adding the database dialect"
Next up you will add a key for the SQL \fCdialect\fP the database will use\&. Since there are only a few databases your application will support, you can define the possible dialects via an \fCenum\fP type\&. This allows us to prohibit all other possible dialects that are not SQL\&.
.PP
First you define the size of the \fCenum\fP type, and then you can add the different \fCenum\fP values\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect type enum
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect check/enum "#4"
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect check/enum/\#0 postgresql
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect check/enum/\#1 mysql
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect check/enum/\#2 mssql
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect check/enum/\#3 mariadb
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect check/enum/\#4 sqlite
.fi
.PP
.PP
Afterwards you define all the other parameters, just as before\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect default sqlite
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect example mysql
kdb meta-set spec:/sw/org/app/\#0/current/database/dialect description "SQL dialect of the database server, that the application will connect to"
.fi
.PP
.PP
After this meta-setting bonanza your specification file should look something like this:
.PP
.PP
.nf
cat $(kdb file spec:/sw/org/app/\#0/current)

;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

database/ip =
 =
server/port =
server/secure =
database/dialect =

[database/ip]
 meta:/check/ipaddr =
 meta:/type = string
 meta:/example = 127\&.0\&.0\&.1
 meta:/description = ip address of the database server, that the application will connect to
 meta:/default = 127\&.0\&.0\&.1

[]
 meta:/mountpoint = app\&.ni

[server/port]
 meta:/check/port =
 meta:/type = short
 meta:/example = 8080
 meta:/description = port of the REST server that runs the application
 meta:/default = 8080

[server/secure]
 meta:/type = boolean
 meta:/example = 0
 meta:/description = true if the REST server uses SSL for communication
 meta:/default = 1

[database/dialect]
 meta:/check/enum/#2 = mssql
 meta:/check/enum/\#0 = postgresql
 meta:/type = enum
 meta:/check/enum/#1 = mysql
 meta:/example = mysql
 meta:/description = SQL dialect of the database server, that the application will connect to
 meta:/check/enum/#4 = sqlite
 meta:/check/enum/#3 = mariadb
 meta:/default = sqlite
 meta:/check/enum = #4
.fi
.PP
.SH "Adding the backup date"
.PP
The last key you will add to our application is a \fCdate\fP key for the annual backup and restart (this should probably not be annually in a real application)\&. Here you use the \fCcheck/date\fP plugin with the \fCISO8601\fP format\&. You also specify a \fCcheck/date/format\fP\&. You can find all possible date formats on the \fCplugin page\fP\&. For this you can use the following commands:
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/backup/date type string
kdb meta-set spec:/sw/org/app/\#0/current/backup/date check/date ISO8601
kdb meta-set spec:/sw/org/app/\#0/current/backup/date check/date/format "calendardate complete extended"
.fi
.PP
.PP
Then just add examples, defaults and description as always\&.
.PP
.PP
.nf
kdb meta-set spec:/sw/org/app/\#0/current/backup/date default 2021-11-01
kdb meta-set spec:/sw/org/app/\#0/current/backup/date example 2021-01-12
kdb meta-set spec:/sw/org/app/\#0/current/backup/date description "date of the annual server and database backup"
.fi
.PP
.PP
Your specification looks to be complete now! Make sure it look something like the one below and you are good to go using it and configuring the heck out of it!
.PP
.PP
.nf
cat $(kdb file spec:/sw/org/app/\#0/current)

;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

backup/date =
database/ip =
 =
server/port =
server/secure =
database/dialect =

[backup/date]
 meta:/check/date/format = calendardate complete extended
 meta:/type = string
 meta:/example = 2021-01-12
 meta:/description = date of the annual server and database backup
 meta:/default = 2021-11-01
 meta:/check/date = ISO8601

[database/ip]
 meta:/check/ipaddr =
 meta:/type = string
 meta:/example = 127\&.0\&.0\&.1
 meta:/description = ip address of the database server, that the application will connect to
 meta:/default = 127\&.0\&.0\&.1

[]
 meta:/mountpoint = app\&.ni

[server/port]
 meta:/check/port =
 meta:/type = short
 meta:/example = 8080
 meta:/description = port of the REST server that runs the application
 meta:/default = 8080

[server/secure]
 meta:/type = boolean
 meta:/example = 0
 meta:/description = true if the REST server uses SSL for communication
 meta:/default = 1

[database/dialect]
 meta:/check/enum/#2 = mssql
 meta:/check/enum/\#0 = postgresql
 meta:/type = enum
 meta:/check/enum/#1 = mysql
 meta:/example = mysql
 meta:/description = SQL dialect of the database server, that the application will connect to
 meta:/check/enum/#4 = sqlite
 meta:/check/enum/#3 = mariadb
 meta:/default = sqlite
 meta:/check/enum = #4
.fi
.PP
.SH "Final specification code"
.PP
After adding all the keys that are necessary for our application to the server, your specification should look something like this:
.PP
.PP
.nf
cat $(kdb file spec:/sw/org/app/\#0/current)

;Ni1
; Generated by the ni plugin using Elektra (see libelektra\&.org)\&.

backup/date =
database/ip =
 =
server/port =
server/secure =
database/dialect =

[backup/date]
 meta:/check/date/format = calendardate complete extended
 meta:/type = string
 meta:/example = 2021-01-12
 meta:/description = date of the annual server and database backup
 meta:/default = 2021-11-01
 meta:/check/date = ISO8601

[database/ip]
 meta:/check/ipaddr =
 meta:/type = string
 meta:/example = 127\&.0\&.0\&.1
 meta:/description = ip address of the database server, that the application will connect to
 meta:/default = 127\&.0\&.0\&.1

[]
 meta:/mountpoint = app\&.ni

[server/port]
 meta:/check/port =
 meta:/type = short
 meta:/example = 0
 meta:/description = port of the REST server that runs the application
 meta:/default = 1

[server/secure]
 meta:/type = boolean
 meta:/example = false
 meta:/description = true if the REST server uses SSL for communication
 meta:/default = false

[database/dialect]
 meta:/check/enum/#2 = mssql
 meta:/check/enum/\#0 = postgresql
 meta:/type = enum
 meta:/check/enum/#1 = mysql
 meta:/example = mysql
 meta:/description = SQL dialect of the database server, that the application will connect to
 meta:/check/enum/#4 = sqlite
 meta:/check/enum/#3 = mariadb
 meta:/default = sqlite
 meta:/check/enum = #4
.fi
.PP
.SH "Summary"
.PP
.IP "\(bu" 2
You setup and mounted a specification using \fCkdb mount\fP and \fCkdb spec-mount\fP
.IP "\(bu" 2
You added keys the specification using \fCkdb meta-set\fP
.IP "\(bu" 2
You added different types of keys with \fCtype string\fP, \fCtype boolean\fP or \fCtype short\fP
.IP "\(bu" 2
You added keys with enum types, to get specific configuration values, with `\fC\fP
.IP "\(bu" 2
\fCYou added default parameters, examples and descriptions with\fPexample\fC,\fPdefault\fC,\fPdescription\fC\fP
.IP "\(bu" 2
\fCYou also added validation checks using different plugins, like\fPcheck/port\fCor\fPcheck/ipaddr`
.PP
.SH "Learn more"
.PP
.IP "\(bu" 2
\fCTutorial Overview\fP 
.PP

