.TH "doc_api_review_core_keySetName_md" 3elektra "Mon Apr 12 2021" "Version 0.9.5" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_api_review_core_keySetName_mdkeySetName 
 \- 
.IP "\(bu" 2
start = 2021-02-14 03:30
.IP "\(bu" 2
end = 2021-02-14 03:50
.IP "\(bu" 2
reviewer = Stefan Hanreich stefanhani@gmail.com
.PP
.PP
\fCssize_t \fBkeySetName(Key *key, const char *newname)\fP\fP
.PP
(bullet points are in order of appearance)
.PP
.IP "\(bu" 2
[x] First line explains briefly what the function does
.IP "\(bu" 2
[ ] Simple example or snippet how to use the function
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[ ] Longer description of function containing common use cases
.IP "\(bu" 2
[ ] Description of functions reads nicely
.IP "\(bu" 2
[ ] \fC@pre\fP
.IP "  \(bu" 4
[ ] 
.PP
\fBPrecondition:\fP
.RS 4
newName must be a valid name
.RE
.PP

.IP "  \(bu" 4
[ ] 
.PP
\fBPrecondition:\fP
.RS 4
must not be a read-only key
.RE
.PP

.IP "  \(bu" 4
[ ] 
.PP
\fBPrecondition:\fP
.RS 4
must not have been inserted before
.RE
.PP

.PP

.IP "\(bu" 2
[ ] \fC@post\fP
.IP "  \(bu" 4
[ ] 
.PP
\fBPostcondition:\fP
.RS 4
Key has (possibly modified) newName as name
.RE
.PP

.PP

.IP "\(bu" 2
[ ] \fC@invariant\fP
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[x] \fC@param\fP for every parameter
.IP "\(bu" 2
[ ] \fC@return\fP / \fC@retval\fP
.IP "  \(bu" 4
[ ] add \fC@retval\fP -1 if key is read-only
.PP

.IP "\(bu" 2
[ ] \fC@since\fP
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[x] `\fC\fP
.IP "\(bu" 2
\fC[ ]\fP
.PP
\fBSee also:\fP
.RS 4
\fC
.IP "  \(bu" 4
[ ] addkeySetNameSpace()`
.PP
\fP
.RE
.PP

.PP
.PP
\fC
.IP "\(bu" 2
[x] Abbreviations used in function names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Function names should neither be too long, nor too short
.IP "\(bu" 2
[x] Function name should be clear and unambiguous
.IP "\(bu" 2
[x] Abbreviations used in parameter names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Parameter names should neither be too long, nor too short
.IP "\(bu" 2
[x] Parameter names should be clear and unambiguous
.PP
\fP
.PP
\fC\fP
.PP
\fC (only in PRs)\fP
.PP
\fC
.IP "\(bu" 2
\fBSymbol versioning\fP is correct for breaking changes
.IP "\(bu" 2
ABI/API changes are forward-compatible (breaking backwards-compatibility to add additional symbols is fine)
.PP
\fP
.PP
\fC\fP
.PP
\fC
.IP "\(bu" 2
[x] Function parameters should use enum types instead of boolean types wherever sensible
.IP "\(bu" 2
[x] Wherever possible, function parameters should be \fCconst\fP
.IP "\(bu" 2
[ ] Wherever possible, return types should be \fCconst\fP
.IP "  \(bu" 4
[ ] might be possible to make it \fCconst\fP
.PP

.IP "\(bu" 2
[x] Functions should have the least amount of parameters feasible
.PP
\fP
.PP
\fC\fP
.PP
\fC
.IP "\(bu" 2
[x] Functions should do exactly one thing
.IP "\(bu" 2
[x] Function name has the appropriate prefix
.IP "\(bu" 2
[ ] Order of signatures in kdb\&.h\&.in is the same as Doxygen
.IP "  \(bu" 4
[ ] swapped with functions for unescaped
.PP

.IP "\(bu" 2
[x] No functions with similar purpose exist
.PP
\fP
.PP
\fC\fP
.PP
\fC
.IP "\(bu" 2
[x] Memory Management should be handled by the function wherever possible
.PP
\fP
.PP
\fC\fP
.PP
\fC
.IP "\(bu" 2
[x] Function is easily extensible, e\&.g\&., with flags
.IP "\(bu" 2
[ ] Documentation does not impose limits, that would hinder further extensions
.IP "  \(bu" 4
[ ] behavior on invalid names
.PP

.PP
\fP
.PP
\fC\fP
.PP
\fC
.IP "\(bu" 2
[ ] Function code is fully covered by tests
.IP "  \(bu" 4
[ ] test_bit 'CANNOT' fail, so might not be necessary to cover this for now should be made more resistant to future changes
.PP

.IP "\(bu" 2
[ ] All possible error states are covered by tests
.IP "  \(bu" 4
[ ] test read-only keys
.PP

.IP "\(bu" 2
All possible enum values are covered by tests
.IP "\(bu" 2
[ ] No inconsistencies between tests and documentation
.IP "  \(bu" 4
[ ] https://github.com/ElektraInitiative/libelektra/blob/master/tests/abi/testabi_key.c#L357 checks for -1 if null pointer is provided documentation says 0 will be returned
.IP "  \(bu" 4
[ ] Documentation says name will be \fC''\fP after an invalid name Tests show that name stays unchanged https://github.com/ElektraInitiative/libelektra/blob/master/tests/abi/testabi_key.c#L601
.IP "  \(bu" 4
[ ] Documentations should include stripping trailing \fC/\fP
.PP

.PP
\fP
.PP
\fC\fP
.PP
\fC \fP
.PP
\fC\fP
