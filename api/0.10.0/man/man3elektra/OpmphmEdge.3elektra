.TH "OpmphmEdge" 3elektra "Tue May 23 2023" "Version 0.10.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
OpmphmEdge \- Order Preserving Minimal Perfect Hash Map\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <kdbopmphm\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "uint32_t \fBorder\fP"
.br
.ti -1c
.RI "uint32_t * \fBnextEdge\fP"
.br
.ti -1c
.RI "uint32_t * \fBvertices\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Order Preserving Minimal Perfect Hash Map\&. 

Based on the work of
.PP
Fabiano C\&. Botelho and Nivio Ziviani 'Near-Optimal Space Perfect Hashing Algorithms'
.PP
and
.PP
Zbigniew J\&. Czech, George Havas, and Bohdan S\&. Majewski 'An Optimal Algorithm for Generating Minimal Perfect Hash Functions' In: Information Processing Letters 43 (1992), pp\&. 257â€“264
.PP
For usage look in \fBdatastructures\&.md\fP
.PP
Theoretical limit of elements:
.PP
The whole OPMPHM is limited to the opmphmHashfunction (\&.\&.\&.) that returns a uint32_t\&. The limit of elements is than ((2^32) - 1) * r / c, since (2^32) - 1 is the maximum component size of the r-uniform r-partite hypergraph\&.
.PP
To save space the limit of elements is set to (2^32) - 1\&. The r-uniform r-partite hypergraph 
.SH "Member Data Documentation"
.PP 
.SS "uint32_t* OpmphmEdge::nextEdge"
arary with Opmphm->rUniPar indices of the next edge in the lists 
.SS "uint32_t OpmphmEdge::order"
desired hash map return value 
.SS "uint32_t* OpmphmEdge::vertices"
array with Opmphm->rUniPar indices of vertices that the edge connects 

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
