.TH "doc_contrib_api_reviews_core_keySetString_md" 3elektra "Tue Mar 14 2023" "Version 0.9.13" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_contrib_api_reviews_core_keySetString_md \- keySetString 

.IP "\(bu" 2
start = 2021-02-21 12:20
.IP "\(bu" 2
end = 2021-02-21 18:10
.IP "\(bu" 2
moderator = Stefan Hanreich stefanhani@gmail.com
.IP "\(bu" 2
reviewer = Dominic JÃ¤ger
.PP
.SH "Signature"
.PP
\fCssize_t \fBkeySetString(Key *key, const char *newString)\fP\fP
.SH "Checklist"
.PP
.SS "Doxygen"
(bullet points are in order of appearance)
.PP
.IP "\(bu" 2
[x] First line explains briefly what the function does
.IP "\(bu" 2
[ ] Simple example or snippet how to use the function 
.br
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
Longer description of function containing common use cases
.IP "  \(bu" 4
All uses cases covered by brief description
.PP

.IP "\(bu" 2
[ ] Description of functions reads nicely 
.br
.IP "  \(bu" 4
[ ] 'as new string value' seems strange 
.br

.IP "  \(bu" 4
[ ] 'private copy' is unclear
.PP

.IP "\(bu" 2
[ ] \fC@pre\fP 
.br
.IP "  \(bu" 4
[x] add
.PP

.IP "\(bu" 2
[ ] \fC@post\fP 
.br
.IP "  \(bu" 4
[x] add 
.br

.IP "  \(bu" 4
[x] string saved as UTF-8 in backend
.PP

.IP "\(bu" 2
[ ] \fC@invariant\fP 
.br
.IP "  \(bu" 4
[x] add
.PP

.IP "\(bu" 2
[ ] \fC@param\fP for every parameter 
.br
.IP "  \(bu" 4
[ ] 'text string' maybe redundant?
.PP

.IP "\(bu" 2
[x] \fC@return\fP / \fC@retval\fP
.IP "\(bu" 2
[ ] \fC@since\fP 
.br
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[x] \fC@ingroup\fP
.IP "\(bu" 2
[ ] \fC@see\fP 
.br
.IP "  \(bu" 4
[ ] split to multiple lines 
.br

.IP "  \(bu" 4
[ ] shortly explain differences between \fCkeyString\fP \fCkeyGetString\fP 
.br

.IP "  \(bu" 4
[ ] add \fCkeySetBinary\fP ? 
.br

.IP "  \(bu" 4
[ ] remove \fCkeyValue\fP, as it is not related to string
.PP

.PP
.SS "Naming"
.IP "\(bu" 2
Abbreviations used in function names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Function names should neither be too long, nor too short
.IP "\(bu" 2
[x] Function name should be clear and unambiguous
.IP "\(bu" 2
Abbreviations used in parameter names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[ ] Parameter names should neither be too long, nor too short 
.br
.IP "  \(bu" 4
[ ] \fCnewStringValue\fP - remove Value?
.PP

.IP "\(bu" 2
[x] Parameter names should be clear and unambiguous
.PP
.SS "Compatibility"
(only in PRs)
.PP
.IP "\(bu" 2
\fBSymbol versioning\fP is correct for breaking changes
.IP "\(bu" 2
ABI/API changes are forward-compatible (breaking backwards-compatibility to add additional symbols is fine)
.PP
.SS "Parameter & Return Types"
.IP "\(bu" 2
Function parameters should use enum types instead of boolean types wherever sensible
.IP "\(bu" 2
[x] Wherever possible, function parameters should be \fCconst\fP
.IP "\(bu" 2
[x] Wherever possible, return types should be \fCconst\fP
.IP "\(bu" 2
[x] Functions should have the least amount of parameters feasible
.PP
.SS "Structural Clarity"
.IP "\(bu" 2
[x] Functions should do exactly one thing
.IP "\(bu" 2
[x] Function name has the appropriate prefix
.IP "\(bu" 2
[x] Order of signatures in kdb\&.h\&.in is the same as Doxygen
.IP "\(bu" 2
[x] No functions with similar purpose exist
.PP
.SS "Memory Management"
.IP "\(bu" 2
[x] Memory Management should be handled by the function wherever possible
.PP
.SS "Extensibility"
.IP "\(bu" 2
[x] Function is easily extensible, e\&.g\&., with flags
.IP "\(bu" 2
[ ] Documentation does not impose limits, that would hinder further extensions 
.br
.IP "  \(bu" 4
[ ] iconv-Plugin 
.br

.IP "  \(bu" 4
[ ] UTF-8 
.br

.IP "  \(bu" 4
[ ] Return Value on NULL
.PP

.PP
.SS "Tests"
.IP "\(bu" 2
[x] Function code is fully covered by tests
.IP "\(bu" 2
[x] All possible error states are covered by tests
.IP "\(bu" 2
All possible enum values are covered by tests
.IP "\(bu" 2
[x] No inconsistencies between tests and documentation
.PP
.SH "Summary"
.PP
Behavior when \fCnewStringValue\fP is a NULL pointer seems strange
.SH "Other Issues discovered (unrelated to function)"
.PP
Exact difference keyString keyGetString ? 
