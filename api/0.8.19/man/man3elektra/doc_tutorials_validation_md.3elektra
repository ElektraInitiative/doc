.TH "doc_tutorials_validation_md" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_validation_md \- Validation 

.SS "Introduction"
.PP
Configuration in FLOSS unfortunately is often stored completely without validation\&. Notable exceptions are sudo (\fCsudoedit\fP), or user accounts (\fCadduser\fP) but in most cases you only get feedback of non-validating configuration when the application fails to start\&.
.PP
Elektra provides a generic way to validate any configuration file before it is written to disc\&.
.PP
.SS "User Interfaces"
.PP
Any of Elektra's user interfaces will work with the technique described in this tutorial, e\&.g\&.:
.PP
1\&.) \fCkdb qt-gui\fP: graphical user interface
.PP
2\&.) \fCkdb editor\fP: starts up your favourite text editor and allows you to edit configuration in any syntax\&. (generalization of \fCsudoedit\fP)
.PP
3\&.) \fCkdb set\fP: manipulate or add individual configuration entries\&. (generalization of \fCadduser\fP)
.PP
4\&.) Any other tool using Elektra to store configuration (e\&.g\&. if the application itself has capabilities to modify its configuration)
.PP
.SS "Metadata together with keys"
.PP
The most direct way to validate keys is
.PP
``` 
.PP
.RS 4
kdb mount validation\&.dump user/tutorial/together dump validation kdb vset user/tutorial/together/test 123 '[1-9][0-9]*' 'Not a number' kdb set user/tutorial/together/test abc 
.RE
.PP
Error (#42) occurred! Description: Key Value failed to validate Reason: Not a number ```
.PP
For all other plugins (except \fCvalidation\fP) the convenience tool \fCkdb vset\fP is missing\&. Let us see what \fCkdb vset\fP actually did:
.PP
``` 
.PP
.RS 4
kdb lsmeta user/tutorial/together/test 
.RE
.PP
check/validation check/validation/match check/validation/message ```
.PP
So it only appended some metadata (data describing the data) next to the key, which we also could do by:
.PP
``` 
.SH "Following lines are (except for error conditions) identical to"
.PP
.PP
.SH "> kdb vset user/tutorial/together/test 123 '[1-9][0-9]*' 'Not a number'"
.PP
.PP
.RS 4
kdb setmeta user/tutorial/together/test check/validation '[1-9][0-9]*' kdb setmeta user/tutorial/together/test check/validation/match LINE kdb setmeta user/tutorial/together/test check/validation/message 'Not a number' kdb set user/tutorial/together/test 123 
.RE
.PP
```
.PP
The approach is not limited to validation via regular expressions, but any values-validation plugin can be used, e\&.g\&. \fBenum\fP\&. For a full list refer to the section 'Value Validation' in the \fBlist of all plugins\fP\&.
.PP
Note that it also easy \fBto write your own (value validation) plugin\fP\&.
.PP
The drawbacks of this approach are:
.PP
.IP "\(bu" 2
The administrator needs to take care that the validation plugins are available where needed\&.
.IP "\(bu" 2
Some metadata (in this case \fCcheck/validation\fP) needs to be stored next to the key which won't work with most configuration files\&. This is the reason why we explicitly used \fCdump\fP as storage in \fCkdb mount\fP\&.
.IP "\(bu" 2
After the key is removed, the validation information is gone, too\&.
.IP "\(bu" 2
It only works for the \fBnamespace\fP where \fCvset\fP was used\&. In the example above we could override the cascading key \fC/tutorial/together/test\fP with the unvalidated key \fCdir/tutorial/together/test\fP\&.
.IP "\(bu" 2
You cannot validate structure of which keys must be present or absent\&.
.PP
.PP
.SS "Get started with spec"
.PP
These issues are resolved straightforward by separation of schemata (describing the configuration) and the configuration itself\&. The purpose of the \fBspec namespace\fP is to hold the schemata, the description of how to validate the keys of all other namespaces\&.
.PP
To make this work, we need a plugin that applies all metadata found in the \fCspec\fP-namespace to all other namespaces\&. This plugin is called \fCspec\fP and needs to be mounted globally (will be added by default with \fCkdb global-mount\fP):
.PP
``` 
.PP
.RS 4
kdb global-mount 
.RE
.PP
```
.PP
Then we can write metadata to \fCspec\fP and see it for every cascading key:
.PP
``` 
.PP
.RS 4
kdb setmeta spec/tutorial/spec/test hello world kdb set user/tutorial/spec/test value kdb lsmeta /tutorial/spec/test 
.RE
.PP
hello ```
.PP
But it also supports globbing (\fC_\fP for any key, \fC?\fP for any char, \fC[]\fP for character classes):
.PP
``` 
.PP
.RS 4
kdb setmeta 'spec/tutorial/spec/_' new meta kdb lsmeta /tutorial/spec/test 
.RE
.PP
hello new ```
.PP
So let us combine this functionality with validation plugins\&. So we would specify:
.PP
``` 
.PP
.RS 4
kdb setmeta spec/tutorial/spec/test check/validation '[1-9][0-9]*' kdb setmeta spec/tutorial/spec/test check/validation/match LINE kdb setmeta spec/tutorial/spec/test check/validation/message 'Not a number' 
.RE
.PP
```
.PP
Alternatively, we could mount a plugin that supports metadata, e\&.g\&. the \fCni\fP plugin, and specify the configuration using a text editor (or \fCcat\fP):
.PP
``` 
.PP
.RS 4
kdb mount spec\&.ini spec/tutorial/spec ni cat << HERE > \fCkdb file spec/tutorial/spec\fP 
.RE
.PP
[test] check/validation = [1-9][0-9]* check/validation/match = LINE check/validation/message = Not a number HERE 
.PP
.RS 4
kdb lsmeta /tutorial/spec/test 
.RE
.PP
check/validation check/validation/match check/validation/message ```
.PP
As next step we need to correctly mount all validation plugins to \fC/tutorial/spec\fP\&. Because we have an extra specification of the validation, we can use this specification to assemble the plugins\&. We only have to specify where the mountpoint is (and which file name should be used), then we can mount the file according the specification and have validation for all namespaces:
.PP
``` 
.PP
.RS 4
kdb setmeta spec/tutorial/spec mountpoint spec-tutorial\&.dump kdb spec-mount /tutorial/spec kdb set /tutorial/spec/test wrong 
.RE
.PP
Using name user/tutorial/spec/test Error (#42) occurred! Description: Key Value failed to validate Reason: Not a number ```
.PP
.SS "Rejecting Configuration Keys"
.PP
Up to now we only discussed how to reject keys that have unwanted values\&. Sometimes, however, applications require the presence or absence of keys\&. There are many ways to do so directly supported by \fBthe spec plugin\fP\&. Another way is to trigger errors with the \fBerror plugin\fP:
.PP
``` 
.PP
.RS 4
kdb setmeta /tutorial/spec/should_not_be_here trigger/error 10 kdb spec-mount /tutorial/spec kdb set /tutorial/spec/should_not_be_here abc 
.RE
.PP
Error (#10) occurred! 
.PP
.RS 4
kdb get /tutorial/spec/should_not_be_here 
.RE
.PP
Did not find key ```
.PP
If we want to reject every optional key (and only want to allow required keys) we can use the plugin \fCrequired\fP as further discussed below\&.
.PP
.SS "Customized schemas"
.PP
Sometimes we already have configuration specifications given in some other format which is more compact and more directed to the needs of an individual application\&. We can write a plugin that parses that format and transform the content to key/value \fIand\fP metadata (describing how to validate)\&.
.PP
For example, let us assume we have enum validations in the file \fCschema\&.txt\fP:
.PP
``` cat > $PWD/schema\&.txt << HERE %: notation TBD ? graph text semi %: tool-support* TBD ? none compiler ide %: applied-to TBD ? none small real-world mountpoint file\&.txt plugins required HERE ```
.PP
And by convention for keys ending with \fC*\fP, multiple values are allowed\&. So we want to transform above syntax to: %:notation TBD ? graph text semi %:tool-support* TBD ? none compiler ide %:applied-to TBD ? none small real-world
.PP
Lucky, we already have a plugin which allows us to so:
.PP
``` kdb mount $PWD/schema\&.txt spec/tutorial/schema simplespeclang keyword/enum=%:,keyword/assign=TBD kdb spec-mount /tutorial/schema ```
.PP
We configure the plugin \fCsimplespeclang\fP so that it conforms to our 'weird' syntax\&. Because in \fCschema\&.txt\fP we have the line \fCmountpoint file\&.txt\fP we can also mount the schema using \fCspec-mount\fP\&.
.PP
Now we have enforced that the 3 configuration options \fCnotation tool-support* applied-to\fP need to be present (and no other)\&. For example we can import:
.PP
``` kdb import -s validate -c 'format=% : %' /tutorial/schema simpleini << HERE notation : graph tool-support : ? none applied-to : small HERE ```
.PP
Or (afterwards) setting individual values:
.PP
``` kdb set /tutorial/schema/applied-to smal # fails, not a valid enum ```
.PP
Or (in \fCsudoedit\fP fashion):
.PP
``` kdb editor -s validate /tutorial/schema simpleini ``` 
