.TH "autotoc_md500" 3elektra "Tue Nov 26 2019" "Version 0.9.1" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
autotoc_md500 \- Plugin: ni 

.IP "\(bu" 2
infos = Information about ni plugin is in keys below
.IP "\(bu" 2
infos/author = Markus Raab elektra@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = storage/ini
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/placements = getstorage setstorage
.IP "\(bu" 2
infos/status = maintained unittest libc nodep
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = Reads and writes the nickel ini format
.PP
.PP
This plugin uses the nickel library in order to read/write \fBmetakeys\fP in the nickel ini format\&. It's purpose is to be used in the \fCspec\fP-namespace or when any metadata should be stored\&.
.PP
For other applications, e\&.g\&. modifying \fCsmb\&.conf\fP you should prefer the \fBini plugin\fP\&.
.PP
To mount the ni plugin you can simply use:
.PP
.PP
.nf
kdb mount file\&.ini spec/ni ni
.fi
.PP
.PP
The strength of this plugin is that it supports arbitrary meta data and the file format is still human readable\&. For example the following lines:
.PP
.PP
.nf
[key]
meta=foo
.fi
.PP
.PP
specify that \fCkey\fP has a metadata key \fCmeta\fP containing the metavalue \fCfoo\fP:
.PP
.PP
.nf
kdb meta-get user/ni/key meta
#> foo
.fi
.PP
.PP
For the metadata of the parent key use the following syntax:
.PP
.PP
.nf
[]
meta=foo
.fi
.PP
.PP
Line continuation works by ending the line with \fC\\\\\fP (a single backslash)\&. If you want a line break at the end of the line, use \fC\\\\n\\\\\fP\&.
.PP
To export a \fCKeySet\fP in the nickel format use:
.PP
.PP
.nf
kdb export spec/ni ni > example\&.ni
.fi
.PP
.PP
For in-detail explanation of the syntax (nested keys are not supported by the plugin) \fCsee /src/plugins/ni/nickel-1\&.1\&.0/include/bohr/ni\&.h\fP
.PP
``\fC @section autotoc_md503 Mount the\fPni\fCplugin at\fPspec/tests/ni` sudo kdb mount file\&.ini spec/tests/ni ni
.SH "Add some metadata"
.PP
kdb meta-set spec/tests/ni/key metakey metavalue kdb meta-set spec/tests/ni/key check/type char
.SH "Retrieve metadata"
.PP
kdb meta-ls spec/tests/ni/key #> check/type #> metakey kdb meta-get spec/tests/ni/key metakey #> metavalue
.SH "Add and retrieve key values"
.PP
kdb get spec/tests/ni/key #> kdb set spec/tests/ni/key value kdb set spec/tests/ni/key/to nothing kdb get spec/tests/ni/key #> value kdb get spec/tests/ni/key/to #> nothing
.SH "Undo modifications"
.PP
kdb rm -r spec/tests/ni sudo kdb umount spec/tests/ni ```
.SS "Limitations"
.IP "\(bu" 2
Supports most KeySets, but \fCkdb test\fP currently reports some errors (likely because of the UTF-8 handling happening within ni)\&.
.IP "\(bu" 2
Keys have a random order when written out\&.
.IP "\(bu" 2
Comments are not preserved, they are simply removed\&.
.IP "\(bu" 2
Parse errors simply result in ignoring (and removing) these parts\&.
.PP
.SS "Nickel"
This plugin is based on the Nickel Library written by author: charles@chaoslizard.org
.PP
Nickel (Ni) has its strength in building up a hierarchical recursive Node structure which is perfect for parsing and generating ini files\&. With them arbitrary deep nested hierarchy are possible, but limited in a keyname of a fixed size\&.
.PP
The API of nickel is very suited for elektra, it can use \fCFILE*\fP pointers (using that elektra could open and lock files), the node-hierarchy can be transformed to keysets, but it lacks many features like comments and types\&.
.PP
The format is more general than the kde-ini format, it can handle their configuration well, when the section names do not exceed the specified length\&. Nesting is only required in the first depth, any deeper is not understood by kde config parser\&.
.PP
The memory footprint is for a 190\&.000 (reduced to 35\&.000 when rewrote first ) line ini file with 1\&.1MB size is 16\&.88 MB\&. The sort order is not stable, even not with the same file rewritten again\&.
.PP
\fCbohr libraries\fP 
