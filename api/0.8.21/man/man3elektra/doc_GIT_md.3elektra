.TH "doc_GIT_md" 3elektra "Fri Dec 22 2017" "Version 0.8.21" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_GIT_mdGIT 
 \- 
.SS "Basic GIT Commands"
.PP
.PP
.nf
    git add readme.md   // adds the changes of the file `readme.md` to the staging area
    git add .           // adds all changes of files in the current directory (recursively) to the staging area
    git add --all       // adds all changes of files in the repository to the staging area
    git commit -a       // executes a commit that automatically stages all changed and deleted files before
.fi
.PP
.PP
.SS "Basic Configuration"
.PP
make sure to do: 
.PP
.nf
    git config --global merge.ff false
    git config merge.ff false

.fi
.PP
.PP
.SS "The Commit Message"
.PP
A commit message should have the following syntax: \fCcomponent: short change description\fP
.PP
For a clean and meaningful log the commit message should fulfil the following:
.PP
.IP "\(bu" 2
use imperative in the subject line
.IP "\(bu" 2
the subject line should not be longer than 50 characters
.IP "\(bu" 2
start the subject line with the module name (e\&.g\&. resolver:, cpp bindings:)
.IP "\(bu" 2
separate subject from body with a blank line
.IP "\(bu" 2
in the body describe in detail what you did, and possibly why
.IP "\(bu" 2
metadata like 'Fixes #123' should be kept at the bottom of the commit message and definitely not in the title
.PP
.PP
Most commits should have a longer description in the body\&.
.PP
.SS "Remote Branches"
.PP
To list all remote branches use: 
.PP
.nf
    git branch -a

.fi
.PP
.PP
To checkout a remote branch initially use: 
.PP
.nf
    git checkout -b <branchname> origin/<branchname>

.fi
.PP
.PP
Once you have done this, it will be a local branch, too\&. Following remote branches should exist: 
.PP
.nf
    master

.fi
.PP
.PP
This is the development branch\&. Please try to not work directly on it, but instead you should use feature branches\&. So the only commits on master should be non-fastforward merges from features branches\&. Commits on master should always compile and all test cases should pass successfully\&. (see config option above) 
.PP
.nf
    debian

.fi
.PP
.PP
Is the branch to be used to build debian packages\&. It additionally contains the debian folder\&. Only debian related commits should be on the debian branch - otherwise it should only contain --no-ff merges from master\&. (see config option above)
.PP
.SS "Local Branches"
.PP
You should always make your own feature branch with: 
.PP
.nf
    git checkout -b <feature-branch-name>

.fi
.PP
.PP
On this branch it is not so important that every commit compiles or all test cases run\&.
.PP
To merge a branch use (no-fastforward): 
.PP
.nf
    git merge --no-ff <branchname>

.fi
.PP
.PP
If you already did some commits, but want them in a branch, you can do: 
.PP
.nf
    git branch foo
    git reset HEAD^^  (for 2 commits back)
    git reset origin/master

    git-ref-log # recover

.fi
.PP
.PP
.SS "Github"
.PP
When doing merge requests our \fCbuildserver\fP will build authorized users\&. If you are not yet authorized, the following question will be asked (by user markus2330): 
.PP
.nf
    Can one of the admins verify if this patch should be build?

.fi
.PP
.PP
Then one of the admins:
.PP
.IP "\(bu" 2
fberlakovich
.IP "\(bu" 2
manuelm
.IP "\(bu" 2
markus2330
.IP "\(bu" 2
beku
.PP
.PP
need to confirm by saying: 
.PP
.nf
    .*add\W+to\W+whitelist.*

.fi
.PP
.PP
or if just the pull request should be checked: 
.PP
.nf
    .*build\W+allow.*

.fi
.PP
.PP
or if just a single build of the mergerequest should be started: 
.PP
.nf
    jenkins build please

.fi
.PP
.PP
or if specific jobs should be started:
.PP
.IP "\(bu" 2
jenkins build \fCbindings\fP please
.IP "\(bu" 2
jenkins build \fCclang\fP please
.IP "\(bu" 2
jenkins build \fCclang-asan\fP please
.IP "\(bu" 2
jenkins build \fCdoc\fP please
.IP "\(bu" 2
jenkins build \fCgcc-asan\fP please
.IP "\(bu" 2
jenkins build \fCfast\fP please
.IP "\(bu" 2
jenkins build \fCgcc\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-debug\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-intree\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-log\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-musl\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-nokdbtest\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-notest\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-shared\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-stretch\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-optimizations\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-wheezy\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-withspace\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-xdg\fP please
.IP "\(bu" 2
jenkins build \fCgcc-i386\fP please
.IP "\(bu" 2
jenkins build \fCgcc47-all\fP please
.IP "\(bu" 2
jenkins build \fCgit-buildpackage-jessie\fP please
.IP "\(bu" 2
jenkins build \fCgit-buildpackage-wheezy\fP please
.IP "\(bu" 2
jenkins build \fCicc\fP please
.IP "\(bu" 2
jenkins build \fCini\fP please
.IP "\(bu" 2
jenkins build \fClocal-installation\fP please
.IP "\(bu" 2
jenkins build \fCmingw64\fP please
.IP "\(bu" 2
jenkins build \fCmulticonfig-gcc-stable\fP please
.IP "\(bu" 2
jenkins build \fCmulticonfig-gcc47-cmake-options\fP please
.IP "\(bu" 2
jenkins build \fCsource-package-test\fP please
.IP "\(bu" 2
jenkins build \fCstable\fP please
.IP "\(bu" 2
jenkins build \fCunstable\fP please
.IP "\(bu" 2
jenkins build \fChomepage\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-stretch-minimal\fP please
.IP "\(bu" 2
jenkins build \fCgcc-configure-debian-jessie-minimal\fP please
.PP
.PP
If you want any configuration changes, please contact \fCMarkus Raab <elektra@markus-raab\&.org>\fP\&.
.PP
.SS "Run All Tests"
.PP
Before we merge a pull request we want to make sure, that all of the build jobs mentioned above still work\&. For this purpose we provide the phrase:
.PP
.PP
.nf
jenkins build all please
.fi
.PP
.PP
\&. If you add this phrase to a comment in your pull request, then Jenkins will run all jobs, except for
.PP
.IP "\(bu" 2
\fCelektra-git-buildpackage-jessie\fP,
.IP "\(bu" 2
\fCelektra-git-buildpackage-stretch\fP, and
.IP "\(bu" 2
\fCelektra-git-buildpackage-wheezy\fP,
.PP
.PP
\&. Since running all test jobs takes a lot of time, please use this phrase only if
.PP
.IP "\(bu" 2
all of the \fBstandard PR jobs\fP were already \fBsuccessful\fP, and
.IP "\(bu" 2
you are sure that you \fBdo not want change anything\fP in your PR anymore
.PP

