.TH "org.libelektra.Key" 3elektra "Thu Mar 10 2022" "Version 0.9.9" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.Key \- \fBKey\fP represents a native Elektra key providing access to its name, value and meta information\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBorg\&.libelektra\&.ReadableKey\fP, and Iterable< ReadableKey >\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBCreateArgumentTag\fP"
.br
.RI "Argument tags for use with \fBcreate(String, Object\&.\&.\&.)\fP\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Clean-up method to release key reference by first decrementing its reference counter and then trying to free the native reference
.br
 
.br
 Call this method if you do not longer need a \fBKey\fP and obtained it via any of its public methods or the public methods of \fBKeySet\fP\&. "
.ti -1c
.RI "byte[] \fBgetBinary\fP ()"
.br
.ti -1c
.RI "\fBKey\fP \fBsetBoolean\fP (boolean value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetByte\fP (byte value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetShort\fP (short value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetInt\fP (int value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetLong\fP (long value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetFloat\fP (float value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetDouble\fP (double value)"
.br
.RI "Sets the key's value by converting\&. "
.ti -1c
.RI "\fBKey\fP \fBsetString\fP (String value)"
.br
.RI "Sets the key's value\&. "
.ti -1c
.RI "\fBKey\fP \fBsetBinary\fP (byte[] value)"
.br
.RI "Sets the key's binary value\&. "
.ti -1c
.RI "\fBKey\fP \fBsetError\fP (ErrorCode code, String reason)"
.br
.RI "Sets proper error meta for key\&. "
.ti -1c
.RI "\fBKey\fP \fBaddWarning\fP (ErrorCode code, String reason)"
.br
.RI "Adds warning meta for key\&. "
.ti -1c
.RI "\fBKey\fP \fBcopy\fP (\fBKey\fP source, int flags)"
.br
.RI "Copies the information from the\&. "
.ti -1c
.RI "\fBKey\fP \fBrewindMeta\fP ()"
.br
.RI "Rewinds the internal iterator for meta information of this key\&. "
.ti -1c
.RI "Optional< \fBReadableKey\fP > \fBnextMeta\fP ()"
.br
.RI "Gets the next element of this key's internal meta information iterator\&. "
.ti -1c
.RI "\fBReadableKey\fP \fBcurrentMeta\fP ()"
.br
.RI "Gets the current element of this key's internal meta information iterator\&. "
.ti -1c
.RI "boolean \fBcopyMeta\fP (\fBKey\fP source, String metaName)"
.br
.RI "Copies some meta information from a\&. "
.ti -1c
.RI "boolean \fBcopyAllMeta\fP (\fBKey\fP source)"
.br
.RI "Copies all meta information from a\&. "
.ti -1c
.RI "Optional< \fBReadableKey\fP > \fBgetMeta\fP (String metaName)"
.br
.RI "Getter for meta information\&. "
.ti -1c
.RI "\fBKey\fP \fBsetMeta\fP (String metaName, String newMetaString)"
.br
.RI "Sets meta information\&. "
.ti -1c
.RI "\fBKey\fP \fBremoveMeta\fP (String metaName)"
.br
.RI "Removes meta information\&. "
.ti -1c
.RI "\fBKey\fP \fBsetName\fP (String name)"
.br
.RI "Sets the key's name\&. "
.ti -1c
.RI "\fBKey\fP \fBsetBaseName\fP (String baseName)  throws KeyNameException "
.br
.RI "Sets the key's base name; will replace current base name with new base name\&. "
.ti -1c
.RI "\fBKey\fP \fBaddBaseName\fP (String baseName)"
.br
.RI "Adds key base name; will add given base name to current key so that new key is sub key of current key\&. "
.ti -1c
.RI "Iterator< \fBReadableKey\fP > \fBiterator\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP ()"
.br
.RI "Constructs a temporary nameless \fBKey\fP which cannot be saved to the key data base but used for transferring warnings and error information\&. "
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP (String name, @Nullable Object value, Key\&.\&.\&. meta)"
.br
.RI "Constructs a new \fBKey\fP with the specified content and arguments
.br
 "
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP (String name, Key\&.\&.\&. meta)"
.br
.RI "Basic constructor of key class\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBKey\fP (long nativePointer, boolean suppressCleanUp)"
.br
.RI "Constructor associating a new \fBKey\fP instance with a native pointer in long format
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. "
.ti -1c
.RI "\fBKey\fP (Pointer pointer)"
.br
.RI "Constructor associating a new \fBKey\fP instance with a JNA pointer\&. "
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static Optional< \fBKey\fP > \fBcreate\fP (@Nullable Pointer pointer)"
.br
.RI "Constructs a new \fBKey\fP instance associated with a JNA pointer\&. "
.ti -1c
.RI "static \fBKey\fP \fBcreate\fP (String name, Object\&.\&.\&. args)"
.br
.RI "Constructs a new \fBKey\fP with the specified content and arguments
.br
 "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBKey\fP represents a native Elektra key providing access to its name, value and meta information\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.libelektra\&.Key\&.Key (long nativePointer, boolean suppressCleanUp)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKey\fP instance with a native pointer in long format
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. 
.PP
\fBParameters\fP
.RS 4
\fInativePointer\fP Native pointer to key in long format 
.br
\fIsuppressCleanUp\fP True to suppress native reference clean-up as soon as this \fBKey\fP instance becomes phantom reachable, false otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP @implNote Increased the native \fBKey\fP's reference counter, even if
.PP
.nf
suppressCleanUp 

.fi
.PP
 is 
.PP
.nf
true 

.fi
.PP
 
.RE
.PP

.SS "org\&.libelektra\&.Key\&.Key (Pointer pointer)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBKey\fP instance with a JNA pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP JNA \fBPointer\fP to key 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBKey\fP org\&.libelektra\&.Key\&.addBaseName (String baseName)\fC [inline]\fP"

.PP
Adds key base name; will add given base name to current key so that new key is sub key of current key\&. 
.PP
\fBParameters\fP
.RS 4
\fIbaseName\fP New key base name to add 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyNameException\fP if
.PP
.nf
baseName 

.fi
.PP
 is invalid, the key was inserted in a key set before or the key name is read-only 
.br
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
baseName 

.fi
.PP
 is \fBblank\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.addWarning (ErrorCode code, String reason)\fC [inline]\fP"

.PP
Adds warning meta for key\&. 
.PP
\fBParameters\fP
.RS 4
\fIcode\fP \fBErrorCode\fP of the warning 
.br
\fIreason\fP Reason for the error 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.copy (\fBKey\fP source, int flags)\fC [inline]\fP"

.PP
Copies the information from the\&. 
.PP
.nf
source 

.fi
.PP
 key into \fBthis\fP key\&.
.PP
\fBParameters\fP
.RS 4
\fIsource\fP Source \fBKey\fP object containing the information to copy 
.br
\fIflags\fP Flags indicating which parts of the key to copy
.br
 Example:
.br
 \fBKEY_CP_NAME\fP | \fBKEY_CP_VALUE\fP 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyException\fP if copying failed 
.br
\fIIllegalStateException\fP if this or the
.PP
.nf
source 

.fi
.PP
 \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBdup()\fP 
.PP
\fBdup(int)\fP 
.PP
\fBKEY_CP_ALL\fP 
.PP
\fBKEY_CP_META\fP 
.PP
\fBKEY_CP_NAME\fP 
.PP
\fBKEY_CP_STRING\fP 
.PP
\fBKEY_CP_VALUE\fP 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.copyAllMeta (\fBKey\fP source)\fC [inline]\fP"

.PP
Copies all meta information from a\&. 
.PP
.nf
source 

.fi
.PP
 key to this key
.PP
\fBParameters\fP
.RS 4
\fIsource\fP \fBKey\fP used as source 
.RE
.PP
\fBReturns\fP
.RS 4
True, if meta was successfully copied, false if
.PP
.nf
source 

.fi
.PP
 does not contain any meta and nothing had to be done 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyMetaException\fP if copying failed 
.br
\fIIllegalStateException\fP if this or the
.PP
.nf
source 

.fi
.PP
 \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP
\fBSee also\fP
.RS 4
\fBcopyMeta(Key, String)\fP 
.RE
.PP

.SS "boolean org\&.libelektra\&.Key\&.copyMeta (\fBKey\fP source, String metaName)\fC [inline]\fP"

.PP
Copies some meta information from a\&. 
.PP
.nf
source 

.fi
.PP
 key to this key
.PP
\fBParameters\fP
.RS 4
\fIsource\fP \fBKey\fP used as source 
.br
\fImetaName\fP \fBKey\fP name of the meta information to be copied 
.RE
.PP
\fBReturns\fP
.RS 4
True, if meta was successfully copied, false if source does not contain the specified meta information and nothing had to be done 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyMetaException\fP if this key's meta information is read-only of copying failed 
.br
\fIIllegalStateException\fP if this or the
.PP
.nf
source 

.fi
.PP
 \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
source 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 or
.PP
.nf
metaName 

.fi
.PP
 is \fBblank\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBcopyAllMeta(Key)\fP 
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create ()\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs a temporary nameless \fBKey\fP which cannot be saved to the key data base but used for transferring warnings and error information\&. 
.PP
\fBReturns\fP
.RS 4
New nameless key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyException\fP on allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static Optional<\fBKey\fP> org\&.libelektra\&.Key\&.create (@Nullable Pointer pointer)\fC [inline]\fP, \fC [static]\fP, \fC [protected]\fP"

.PP
Constructs a new \fBKey\fP instance associated with a JNA pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP Optional JNA \fBPointer\fP to key 
.RE
.PP
\fBReturns\fP
.RS 4
New \fBKey\fP instance if
.PP
.nf
pointer 

.fi
.PP
 is non-null, \fBOptional#empty()\fP otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create (String name, @Nullable Object value, Key\&.\&.\&. meta)\fC [inline]\fP, \fC [static]\fP"

.PP
Constructs a new \fBKey\fP with the specified content and arguments
.br
 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the key (first part of key-value pair) 
.br
\fIvalue\fP Optional Value of key\&. will be determine from the object by calling {\fB}\&. To set a binary value, please see  #setBinary(byte[])}\&.  meta Metadata that should be added to this key, null keys will be filtered away  New key  KeyException if the key name is invalid or there have been allocation problems  #release() \fP
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create (String name, Key\&.\&.\&. meta)\fC [inline]\fP, \fC [static]\fP"

.PP
Basic constructor of key class\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP \fBKey\fP name; first part of key-value pair 
.br
\fImeta\fP Metadata that should be added to this key\&. Will filter null values\&. 
.RE
.PP
\fBReturns\fP
.RS 4
New key object 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyException\fP if the key name is invalid or there have been allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "static \fBKey\fP org\&.libelektra\&.Key\&.create (String name, Object\&.\&.\&. args)\fC [inline]\fP, \fC [static]\fP, \fC [protected]\fP"

.PP
Constructs a new \fBKey\fP with the specified content and arguments
.br
 
.PP
\fBParameters\fP
.RS 4
\fIname\fP \fBKey\fP name; first part of key-value pair 
.br
\fIargs\fP Arguments used for key value
.br
 Example:
.br
 \fBCreateArgumentTag#KEY_VALUE\fP, 'custom key value', \fBCreateArgumentTag#KEY_END\fP 
.RE
.PP
\fBReturns\fP
.RS 4
New key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyException\fP if the key name is invalid or there have been allocation problems 
.RE
.PP
\fBSee also\fP
.RS 4
\fBCreateArgumentTag\fP 
.PP
\fBrelease()\fP 
.RE
.PP

.SS "\fBReadableKey\fP org\&.libelektra\&.Key\&.currentMeta ()\fC [inline]\fP"

.PP
Gets the current element of this key's internal meta information iterator\&. 
.PP
\fBReturns\fP
.RS 4
new \fBKey\fP object containing the current meta information 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fINoSuchElementException\fP if no current meta key is available or internal iterator has been reset 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrewindMeta()\fP 
.PP
\fBnextMeta()\fP 
.RE
.PP

.SS "byte [] org\&.libelektra\&.Key\&.getBinary ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
This key's value as string 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyBinaryValueException\fP if the underlying native key is not of type binary 
.br
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "Optional<\fBReadableKey\fP> org\&.libelektra\&.Key\&.getMeta (String metaName)\fC [inline]\fP"

.PP
Getter for meta information\&. 
.PP
\fBParameters\fP
.RS 4
\fImetaName\fP \fBKey\fP name of meta information to be fetched 
.RE
.PP
\fBReturns\fP
.RS 4
New \fBReadableKey\fP object containing the requested meta information or {\fB}, if metaName  was not found  IllegalStateException if this  Key} has already been released  IllegalArgumentException if metaName  is  String#isBlank() blank} \fP
.RE
.PP

.SS "Iterator<\fBReadableKey\fP> org\&.libelektra\&.Key\&.iterator ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBKeySetIterator\fP for the \fBmeta data\fP of this \fBKey\fP 
.RE
.PP

.SS "Optional<\fBReadableKey\fP> org\&.libelektra\&.Key\&.nextMeta ()\fC [inline]\fP"

.PP
Gets the next element of this key's internal meta information iterator\&. 
.PP
\fBReturns\fP
.RS 4
New \fBKey\fP object containing the requested meta information or {\fB}, if no next meta key is available  IllegalStateException if this  Key} has already been released  #rewindMeta()  #currentMeta() \fP
.RE
.PP

.SS "void org\&.libelektra\&.Key\&.release ()\fC [inline]\fP"

.PP
Clean-up method to release key reference by first decrementing its reference counter and then trying to free the native reference
.br
 
.br
 Call this method if you do not longer need a \fBKey\fP and obtained it via any of its public methods or the public methods of \fBKeySet\fP\&. If you do not manually release such \fBkeys\fP, they will get cleaned up by garbage collection as soon as they get phantom reachable\&. Therefore its encouraged to release \fBkey instances\fP as soon as you do not use them anymore\&. 
.PP
Reimplemented from \fBorg\&.libelektra\&.ReadableKey\fP\&.
.SS "\fBKey\fP org\&.libelektra\&.Key\&.removeMeta (String metaName)\fC [inline]\fP"

.PP
Removes meta information\&. 
.PP
\fBParameters\fP
.RS 4
\fImetaName\fP \fBKey\fP name of meta information to be removed 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyMetaException\fP if
.PP
.nf
metaName 

.fi
.PP
 is invalid 
.br
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
metaName 

.fi
.PP
 is \fBblank\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.rewindMeta ()\fC [inline]\fP"

.PP
Rewinds the internal iterator for meta information of this key\&. 
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBSee also\fP
.RS 4
\fBnextMeta()\fP 
.PP
\fBcurrentMeta()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setBaseName (String baseName) throws \fBKeyNameException\fP\fC [inline]\fP"

.PP
Sets the key's base name; will replace current base name with new base name\&. 
.PP
\fBParameters\fP
.RS 4
\fIbaseName\fP New key base name to use 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyNameException\fP if
.PP
.nf
baseName 

.fi
.PP
 is invalid, the key was inserted in a key set before or the key name is read-only 
.br
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
baseName 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setBinary (byte[] value)\fC [inline]\fP"

.PP
Sets the key's binary value\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
value 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeyException\fP if the key's value is read-only or there have been allocation problems 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setBoolean (boolean value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setByte (byte value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setDouble (double value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setError (ErrorCode code, String reason)\fC [inline]\fP"

.PP
Sets proper error meta for key\&. 
.PP
\fBParameters\fP
.RS 4
\fIcode\fP \fBErrorCode\fP of the error 
.br
\fIreason\fP Reason for the error 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setFloat (float value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setInt (int value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setLong (long value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setMeta (String metaName, String newMetaString)\fC [inline]\fP"

.PP
Sets meta information\&. 
.PP
\fBParameters\fP
.RS 4
\fImetaName\fP \fBKey\fP name of meta information to be set 
.br
\fInewMetaString\fP Meta value to be set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyMetaException\fP if
.PP
.nf
metaName 

.fi
.PP
 is invalid 
.br
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
metaName 

.fi
.PP
 is \fBblank\fP or 
.PP
.nf
newMetaString 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setName (String name)\fC [inline]\fP"

.PP
Sets the key's name\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP New key name to use 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyNameException\fP if
.PP
.nf
name 

.fi
.PP
 is invalid, the key was inserted in a key set before or the key name is read-only 
.br
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
baseName 

.fi
.PP
 is \fBblank\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setShort (short value)\fC [inline]\fP"

.PP
Sets the key's value by converting\&. 
.PP
.nf
value 

.fi
.PP
 to string
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.Key\&.setString (String value)\fC [inline]\fP"

.PP
Sets the key's value\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value to set 
.RE
.PP
\fBReturns\fP
.RS 4
This \fBKey\fP, enabling a fluent interface 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
value 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.br
\fIKeyException\fP if the key's value is read-only or there have been allocation problems 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
