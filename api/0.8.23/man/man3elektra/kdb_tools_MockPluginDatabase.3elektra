.TH "kdb::tools::MockPluginDatabase" 3elektra "Sun May 13 2018" "Version 0.8.23" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::tools::MockPluginDatabase \- A plugin database that works with added fake data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <plugindatabase\&.hpp>\fP
.PP
Inherits \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::vector< std::string > \fBlistAllPlugins\fP () const"
.br
.RI "list all plugins "
.ti -1c
.RI "std::string \fBlookupInfo\fP (\fBPluginSpec\fP const &spec, std::string const &which) const"
.br
.RI "lookup contract clauses or dynamic information "
.ti -1c
.RI "func_t \fBgetSymbol\fP (\fBPluginSpec\fP const &whichplugin, std::string const &which) const"
.br
.RI "get exported plugin symbol "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::unordered_map< \fBPluginSpec\fP, std::unordered_map< std::string, std::string >, \fBPluginSpecHash\fP, PluginSpecName > \fBdata\fP"
.br
.RI "only data from here will be returned "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A plugin database that works with added fake data\&. 
.SH "Member Function Documentation"
.PP 
.SS "PluginDatabase::func_t kdb::tools::MockPluginDatabase::getSymbol (\fBPluginSpec\fP const & whichplugin, std::string const & which) const\fC [virtual]\fP"

.PP
get exported plugin symbol 
.PP
\fBParameters:\fP
.RS 4
\fIwhichplugin\fP from which plugin? 
.br
\fIwhich\fP which symbol would you like to look up?
.RE
.PP
\fBReturns:\fP
.RS 4
the function pointer to the exported symbol or NULL if the symbol was not found 
.RE
.PP

.PP
Reimplemented from \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "std::vector< std::string > kdb::tools::MockPluginDatabase::listAllPlugins () const\fC [virtual]\fP"

.PP
list all plugins If Elektra is compiled with plugins, it will search for shared libraries\&. In any case, if no shared libraries were found it will fallback to an internal list (plugins that were compiled together with Elektra)\&.
.PP
\fBReturns:\fP
.RS 4
a list of all available plugins 
.RE
.PP

.PP
Reimplemented from \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SS "std::string kdb::tools::MockPluginDatabase::lookupInfo (\fBPluginSpec\fP const & whichplugin, std::string const & which) const\fC [virtual]\fP"

.PP
lookup contract clauses or dynamic information 
.PP
\fBParameters:\fP
.RS 4
\fIwhichplugin\fP about which plugin? 
.br
\fIwhich\fP about which clause in the contract?
.RE
.PP
\fBReturns:\fP
.RS 4
the clause of the contract 
.RE
.PP

.PP
Reimplemented from \fBkdb::tools::ModulesPluginDatabase\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::unordered_map<\fBPluginSpec\fP, std::unordered_map<std::string, std::string>, \fBPluginSpecHash\fP, PluginSpecName> kdb::tools::MockPluginDatabase::data\fC [mutable]\fP"

.PP
only data from here will be returned 
.PP
\fBNote:\fP
.RS 4
that it is ordered by name, i\&.e\&., different ref-names cannot be distinguished 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
