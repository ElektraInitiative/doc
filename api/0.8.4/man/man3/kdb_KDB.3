.TH "kdb::KDB" 3 "Sat Dec 21 2013" "Version 0.8.4" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::KDB \- 
.PP
Opens the session with the \fBKey\fP database\&.    

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <kdb\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKDB\fP ()"
.br
.RI "\fIOpens the session with the \fBKey\fP database\&.  \fP"
.ti -1c
.RI "\fBKDB\fP (\fBKey\fP &errorKey)"
.br
.RI "\fIOpens the session with the \fBKey\fP database\&.  \fP"
.ti -1c
.RI "\fB~KDB\fP ()  throw ()"
.br
.RI "\fI\fP"
.ti -1c
.RI "void \fBopen\fP (\fBKey\fP &errorKey)"
.br
.RI "\fIOpens the session with the \fBKey\fP database\&.  \fP"
.ti -1c
.RI "void \fBclose\fP (\fBKey\fP &errorKey)  throw ()"
.br
.RI "\fI\fP"
.ti -1c
.RI "int \fBget\fP (\fBKeySet\fP &returned, std::string const &keyname)"
.br
.RI "\fIRetrieve keys in an atomic and universal way, all other \fBkdbGet()\fP Functions rely on that one\&.  \fP"
.ti -1c
.RI "int \fBget\fP (\fBKeySet\fP &returned, \fBKey\fP &parentKey)"
.br
.RI "\fIRetrieve keys in an atomic and universal way, all other \fBkdbGet()\fP Functions rely on that one\&.  \fP"
.ti -1c
.RI "int \fBset\fP (\fBKeySet\fP &returned, std::string const &keyname)"
.br
.RI "\fI\fP"
.ti -1c
.RI "int \fBset\fP (\fBKeySet\fP &returned, \fBKey\fP &parentKey)"
.br
.RI "\fI\fP"
.in -1c
.SH "Detailed Description"
.PP 
Opens the session with the \fBKey\fP database\&.   

Constructs a class \fBKDB\fP\&.
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
The first step is to open the default backend\&. With it system/elektra/mountpoints will be loaded and all needed libraries and mountpoints will be determined\&. These libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP datastructure will be initialized\&.
.PP
You must always call this method before retrieving or commiting any keys to the database\&. In the end of the program, after using the key database, you must not forget to \fBkdbClose()\fP\&. You can use the atexit () handler for it\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it: 
.PP
.nf
thread1
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}
thread2
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}

.fi
.PP
.PP
You don't need to use the \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects without any affairs with the backend key database or when your application loads plugins directly\&.
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP the key which holds errors and warnings which were issued must be given 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBkdbClose()\fP to end all affairs to the \fBKey\fP database\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBKDB\fP pointer on success 
.PP
NULL on failure 
.RE
.PP
 
.PP
Access to the key database\&.
.PP
\fBInvariant:\fP
.RS 4
the object holds an valid connection to the key database or is empty 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "kdb::KDB::KDB ()\fC [inline]\fP"

.PP
Opens the session with the \fBKey\fP database\&.  Constructs a class \fBKDB\fP\&.
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
The first step is to open the default backend\&. With it system/elektra/mountpoints will be loaded and all needed libraries and mountpoints will be determined\&. These libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP datastructure will be initialized\&.
.PP
You must always call this method before retrieving or commiting any keys to the database\&. In the end of the program, after using the key database, you must not forget to \fBkdbClose()\fP\&. You can use the atexit () handler for it\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it: 
.PP
.nf
thread1
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}
thread2
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}

.fi
.PP
.PP
You don't need to use the \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects without any affairs with the backend key database or when your application loads plugins directly\&.
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP the key which holds errors and warnings which were issued must be given 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBkdbClose()\fP to end all affairs to the \fBKey\fP database\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBKDB\fP pointer on success 
.PP
NULL on failure 
.RE
.PP
 
.SS "kdb::KDB::KDB (\fBKey\fP &errorKey)\fC [inline]\fP"

.PP
Opens the session with the \fBKey\fP database\&.  Constructs a class \fBKDB\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if database could not be opened
.RE
.PP
The first step is to open the default backend\&. With it system/elektra/mountpoints will be loaded and all needed libraries and mountpoints will be determined\&. These libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP datastructure will be initialized\&.
.PP
You must always call this method before retrieving or commiting any keys to the database\&. In the end of the program, after using the key database, you must not forget to \fBkdbClose()\fP\&. You can use the atexit () handler for it\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it: 
.PP
.nf
thread1
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}
thread2
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}

.fi
.PP
.PP
You don't need to use the \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects without any affairs with the backend key database or when your application loads plugins directly\&.
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP the key which holds errors and warnings which were issued must be given 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBkdbClose()\fP to end all affairs to the \fBKey\fP database\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBKDB\fP pointer on success 
.PP
NULL on failure 
.RE
.PP
 
.SS "kdb::KDB::~KDB ()  throw ()\fC [inline]\fP"

.PP
The destructor closes the database\&.
.PP
Closes the session with the \fBKey\fP database\&.
.PP
You should call this method when you finished your affairs with the key database\&. You can manipulate \fBKey\fP and \fBKeySet\fP objects also after \fBkdbClose()\fP\&. You must not use any kdb* call afterwards\&. You can implement \fBkdbClose()\fP in the atexit() handler\&.
.PP
This is the counterpart of \fBkdbOpen()\fP\&.
.PP
The \fChandle\fP parameter will be finalized and all resources associated to it will be freed\&. After a \fBkdbClose()\fP, this \fChandle\fP can't be used anymore, unless it gets initialized again with another call to \fBkdbOpen()\fP\&.
.PP
\fBSee Also:\fP
.RS 4
\fBkdbOpen()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIerrorKey\fP the key which holds error information 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success 
.PP
-1 on NULL pointer 
.RE
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "void kdb::KDB::close (\fBKey\fP &errorKey)  throw ()\fC [inline]\fP"

.PP
Open the database\&.
.PP
The return value does not matter because its only a null pointer check\&.
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP is useful if you want to get the warnings
.RE
.PP
Closes the session with the \fBKey\fP database\&.
.PP
You should call this method when you finished your affairs with the key database\&. You can manipulate \fBKey\fP and \fBKeySet\fP objects also after \fBkdbClose()\fP\&. You must not use any kdb* call afterwards\&. You can implement \fBkdbClose()\fP in the atexit() handler\&.
.PP
This is the counterpart of \fBkdbOpen()\fP\&.
.PP
The \fChandle\fP parameter will be finalized and all resources associated to it will be freed\&. After a \fBkdbClose()\fP, this \fChandle\fP can't be used anymore, unless it gets initialized again with another call to \fBkdbOpen()\fP\&.
.PP
\fBSee Also:\fP
.RS 4
\fBkdbOpen()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP contains internal information of \fBopened \fP key database 
.br
\fIerrorKey\fP the key which holds error information 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success 
.PP
-1 on NULL pointer 
.RE
.PP
 
.SS "int kdb::KDB::get (\fBKeySet\fP &returned, std::string const &keyname)\fC [inline]\fP"

.PP
Retrieve keys in an atomic and universal way, all other \fBkdbGet()\fP Functions rely on that one\&.  Get all keys below keyname inside returned\&.
.PP
The \fCreturned\fP \fBKeySet\fP must be initialized\&. The \fCreturned\fP \fBKeySet\fP may already contain some keys\&. The new retrieved keys will be appended using \fBksAppendKey()\fP\&.
.PP
It will fully retrieve all keys under the \fCparentKey\fP folder, with all subfolders and their children\&.
.PP
.PP
.nf
#include <kdb\&.hpp>

#include <keyio\&.hpp>

using namespace kdb;

int main()
{
        KeySet config;
        KDB kdb;
        kdb\&.get(config, '/sw/MyApp');

        Key k = config\&.lookup('/sw/MyApp/mykey');
        if (k)
        {
                std::cout << k << ' is ' << k\&.get<int>() << std::endl;
        }
        else
        {
                std::cerr << 'No key found' << std::endl;
                return 1;
        }
}
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIreturned\fP the keyset where the keys will be in 
.br
\fIkeyname\fP the root keyname which should be used to get keys below it
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated 
.RE
.PP
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if there were problems with the database
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBKDB::get\fP (\fBKeySet\fP & returned, \fBKey\fP & parentKey) 
.RE
.PP

.SS "int kdb::KDB::get (\fBKeySet\fP &returned, \fBKey\fP &parentKey)\fC [inline]\fP"

.PP
Retrieve keys in an atomic and universal way, all other \fBkdbGet()\fP Functions rely on that one\&.  Get all keys below parentKey inside returned\&.
.PP
The \fCreturned\fP \fBKeySet\fP must be initialized\&. The \fCreturned\fP \fBKeySet\fP may already contain some keys\&. The new retrieved keys will be appended using \fBksAppendKey()\fP\&.
.PP
It will fully retrieve all keys under the \fCparentKey\fP folder, with all subfolders and their children\&.
.PP
\fBParameters:\fP
.RS 4
\fIreturned\fP the keyset where the keys will be in 
.br
\fIparentKey\fP the parentKey of returned
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated 
.RE
.PP
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if there were problems with the database 
.RE
.PP

.SS "void kdb::KDB::open (\fBKey\fP &errorKey)\fC [inline]\fP"

.PP
Opens the session with the \fBKey\fP database\&.  Open the database
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP is useful if you want to get the warnings in the successful case, when no exception is thrown\&.
.RE
.PP
The first step is to open the default backend\&. With it system/elektra/mountpoints will be loaded and all needed libraries and mountpoints will be determined\&. These libraries for backends will be loaded and with it the \fC\fBKDB\fP\fP datastructure will be initialized\&.
.PP
You must always call this method before retrieving or commiting any keys to the database\&. In the end of the program, after using the key database, you must not forget to \fBkdbClose()\fP\&. You can use the atexit () handler for it\&.
.PP
The pointer to the \fC\fBKDB\fP\fP structure returned will be initialized like described above, and it must be passed along on any kdb*() method your application calls\&.
.PP
Get a \fC\fBKDB\fP\fP handle for every thread using elektra\&. Don't share the handle across threads, and also not the pointer accessing it: 
.PP
.nf
thread1
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}
thread2
{
        KDB * h;
        h = kdbOpen(0);
        // fetch keys and work with them
        kdbClose(h, 0);
}

.fi
.PP
.PP
You don't need to use the \fBkdbOpen()\fP if you only want to manipulate plain in-memory \fBKey\fP or \fBKeySet\fP objects without any affairs with the backend key database or when your application loads plugins directly\&.
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP the key which holds errors and warnings which were issued must be given 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBkdbClose()\fP to end all affairs to the \fBKey\fP database\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBKDB\fP pointer on success 
.PP
NULL on failure 
.RE
.PP
 
.SS "int kdb::KDB::set (\fBKeySet\fP &returned, std::string const &keyname)\fC [inline]\fP"

.PP
Set all keys below keyname\&.
.PP
If the keyname of the parentKey is invalid (e\&.g\&. empty) all keys will be set\&.
.PP
Set keys in an atomic and universal way\&.
.PP
All other kdbSet Functions rely on that one\&.
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated 
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIreturned\fP the keyset where the keys will be in 
.br
\fIkeyname\fP the keyname below the names should be set
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if there were problems with the database 
.RE
.PP

.SS "int kdb::KDB::set (\fBKeySet\fP &returned, \fBKey\fP &parentKey)\fC [inline]\fP"

.PP
Set all keys below parentKey\&.
.PP
If the keyname of the parentKey is invalid (e\&.g\&. empty) all keys will be set\&.
.PP
Set keys in an atomic and universal way\&.
.PP
All other kdbSet Functions rely on that one\&.
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if no key was updated 
.br
\fI1\fP if user or system keys were updated 
.br
\fI2\fP if user and system keys were updated 
.RE
.PP
.PP
\fBParameters:\fP
.RS 4
\fIreturned\fP the keyset where the keys are passed to the user 
.br
\fIparentKey\fP the parentKey of returned
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIKDBException\fP if there were problems with the database 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
