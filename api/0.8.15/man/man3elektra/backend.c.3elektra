.TH "backend.c" 3elektra "Tue Feb 16 2016" "Version 0.8.15" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
backend.c \- 
.PP
Everything related to a backend\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <kdbinternal\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBelektraBackendSetMountpoint\fP (Backend *backend, KeySet *\fBelektraConfig\fP, Key *errorKey)"
.br
.RI "\fIsets mountpoint \fP"
.ti -1c
.RI "Backend * \fBelektraBackendOpen\fP (KeySet *\fBelektraConfig\fP, KeySet *modules, Key *errorKey)"
.br
.RI "\fIBuilds a backend out of the configuration supplied from: \fP"
.ti -1c
.RI "Backend * \fBelektraBackendOpenMissing\fP (Key *mp)"
.br
.RI "\fIOpens the internal backend that indicates that a backend is missing at that place\&. \fP"
.ti -1c
.RI "Backend * \fBelektraBackendOpenDefault\fP (KeySet *modules, const char *file, Key *errorKey)"
.br
.RI "\fIOpens a default backend using the plugin named KDB_DEFAULT_RESOLVER and KDB_DEFAULT_STORAGE\&. \fP"
.ti -1c
.RI "Backend * \fBelektraBackendOpenModules\fP (KeySet *modules, Key *errorKey)"
.br
.ti -1c
.RI "Backend * \fBelektraBackendOpenVersion\fP (Key *errorKey)"
.br
.RI "\fIOpens the internal version backend\&. \fP"
.ti -1c
.RI "int \fBelektraBackendUpdateSize\fP (Backend *backend, Key *parent, int size)"
.br
.RI "\fIUpdate internal size in backend\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Everything related to a backend\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/COPYING or http://www.libelektra.org) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "Backend* elektraBackendOpen (KeySet *elektraConfig, KeySet *modules, Key *errorKey)"

.PP
Builds a backend out of the configuration supplied from: 
.PP
.nf
system/elektra/mountpoints/<name>

.fi
.PP
.PP
The root key must be like the above example\&. You do not need to rewind the keyset\&. But every key must be below the root key\&.
.PP
The internal consistency will be checked in this function\&. If necessary parts are missing, like no plugins, they cant be loaded or similar 0 will be returned\&.
.PP
\fBksCut()\fP is perfectly suitable for cutting out the configuration like needed\&.
.PP
\fBNote:\fP
.RS 4
The given KeySet will be deleted within the function, don't use it afterwards\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIelektraConfig\fP the configuration to work with\&. It is used to build up this backend\&. 
.br
\fImodules\fP used to load new modules or get references to existing one 
.br
\fIerrorKey\fP the key where an error and warnings are added
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to a freshly allocated backend this could be the requested backend or a so called 'missing backend'\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if out of memory 
.RE
.PP

.SS "Backend* elektraBackendOpenDefault (KeySet *modules, const char *file, Key *errorKey)"

.PP
Opens a default backend using the plugin named KDB_DEFAULT_RESOLVER and KDB_DEFAULT_STORAGE\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodules\fP the modules to work with 
.br
\fIerrorKey\fP the key to issue warnings and errors to 
.RE
.PP
\fBReturns:\fP
.RS 4
the fresh allocated default backend or 0 if it failed 
.RE
.PP

.SS "Backend* elektraBackendOpenMissing (Key *mp)"

.PP
Opens the internal backend that indicates that a backend is missing at that place\&. 
.PP
\fBReturns:\fP
.RS 4
the fresh allocated backend or 0 if no memory 
.RE
.PP

.SS "Backend* elektraBackendOpenModules (KeySet *modules, Key *errorKey)"

.PP
\fBReturns:\fP
.RS 4
a backend which gives plugin configuration of the module which is currently point to\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fImodules\fP the modules to work with 
.br
\fIerrorKey\fP the key to issue warnings and errors to 
.RE
.PP

.SS "Backend* elektraBackendOpenVersion (Key *errorKey)"

.PP
Opens the internal version backend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerrorKey\fP the key to issue warnings and errors to 
.RE
.PP
\fBReturns:\fP
.RS 4
the fresh allocated default backend or 0 if it failed 
.RE
.PP

.SS "int elektraBackendSetMountpoint (Backend *backend, KeySet *elektraConfig, Key *errorKey)"

.PP
sets mountpoint 
.PP
\fBParameters:\fP
.RS 4
\fIbackend\fP where the mountpoint should be set 
.br
\fIelektraConfig\fP the config where the mountpoint can be found 
.br
\fIerrorKey\fP the name also has the mountpoint set
.RE
.PP
\fBPrecondition:\fP
.RS 4
\fBksCurrent()\fP is root key 
.RE
.PP
\fBPostcondition:\fP
.RS 4
\fBksCurrent()\fP is root key
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if no mountpoint is found or memory allocation problem 
.br
\fI0\fP on success 
.RE
.PP

.SS "int elektraBackendUpdateSize (Backend *backend, Key *parent, intsize)"

.PP
Update internal size in backend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbackend\fP the backend to update 
.br
\fIparent\fP for parent 
.br
\fIsize\fP to update (-1 default, 0 empty, >0 otherwise)
.RE
.PP
\fBPrecondition:\fP
.RS 4
parent must be serializable namespace
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if invalid parent (assert) 
.br
\fI0\fP on success 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
