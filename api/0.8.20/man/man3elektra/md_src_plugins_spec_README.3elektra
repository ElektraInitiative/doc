.TH "md_src_plugins_spec_README" 3elektra "Tue Oct 31 2017" "Version 0.8.20" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_spec_READMEPlugin: spec 
 \- 
.IP "\(bu" 2
infos = Information about the spec plugin is in keys below
.IP "\(bu" 2
infos/author = Thomas Waser thomas.waser@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides = check apply
.IP "\(bu" 2
infos/placements = postgetstorage presetstorage
.IP "\(bu" 2
infos/status = maintained nodep configurable global preview
.IP "\(bu" 2
infos/description = copies metadata from spec namespace to other namespaces
.PP
.PP
The spec plugin is a global plugin that copies metadata from the \fCspec\fP-namespace to other namespaces using their key names as globbing expressions\&. Globbing resembles regular expressions\&. They do not have the same expressive power, but are easier to use\&. The semantics are more suitable to match path names:
.PP
.IP "\(bu" 2
_ matches any key name of just one hierarchy\&. This means it complies with any character except slash or null\&.
.IP "\(bu" 2
? satisfies single characters with the same exclusion\&.
.IP "\(bu" 2
# matches Elektra array elements\&.
.IP "\(bu" 2
Additionally, there are ranges and character classes\&. They can also be inverted\&.
.PP
.PP
The plugin copies the metadata of the corresponding \fCspec\fP key to every matching key in the other namespaces\&.
.PP
The spec plugin also provides basic validation and structural checking\&. Specifically it supports:
.PP
.IP "\(bu" 2
detection of invalid array key names
.IP "\(bu" 2
detection of missing keys
.IP "\(bu" 2
validation of array ranges
.IP "\(bu" 2
validating the number of subkeys
.PP
.PP
.SS "Configuration"
.PP
.SS "Actions"
.PP
.IP "\(bu" 2
\fCERROR\fP yields an error when a conflict occurs
.IP "\(bu" 2
\fCWARNING\fP adds a warning when a conflict occurs
.IP "\(bu" 2
\fCINFO\fP adds a metakey \fClogs/spec/info\fP which can be used by logging plugins
.IP "\(bu" 2
\fCIGNORE\fP ignores the conflict, this is the default value
.PP
.PP
.SS "Conflicts"
.PP
.IP "\(bu" 2
Invalid array \fCmember\fP: an invalid array key has been detected\&. e\&.g\&. \fC/#abc\fP
.IP "\(bu" 2
Out of \fCrange\fP: the array has more or less elements than specified by the \fCarray\fP option\&.
.IP "\(bu" 2
Invalid number of subkeys \fCcount\fP: a key matching a \fC_\fP expression has more or less subkeys than specified by the \fCrequired\fP option\&.
.IP "\(bu" 2
Conflicting metadata \fCcollision\fP: the metakey that's supposed to be added already exists\&.
.IP "\(bu" 2
Missing keys \fCmissing\fP: the key structure doesn't contain the required subkeys flagged with the \fCrequire\fP metakey in the \fCspec\fP namespace\&.
.IP "\(bu" 2
Invalid keys \fCinvalid\fP: keys that are subkeys of an invalid array member\&. e\&.g\&. \fC/#abc/key\fP
.PP
.PP
.SS "Basic Configuration"
.PP
\fCconflict/set\fP and \fCconflict/get\fP are used to specify what actions should be taken on conflicts\&. e\&.g\&. \fCconflict/get = ERROR\fP yields an error on every conflict\&.
.PP
.SS "Per Conflict Configuration"
.PP
Actions can also be specified on a per conflict basis\&. Those actions take precedence over basic configuration options\&.
.PP
Examples: 
.PP
.nf
conflict/get/member = WARNING
conflict/set/range = ERROR

.fi
.PP
.PP
.SS "Per Key Configuration"
.PP
Actions can also be specified per-key\&. Those will take precedence over basic and per-conflict configurations\&.
.PP
Example: 
.PP
.nf
spec/test/#
    conflict/get/member = INFO

.fi
.PP
.PP
.SS "Examples"
.PP
Ini files can be found in \fB/examples/spec\fP which should be PWD so that the example works: 
.PP
.nf
cd ~e/examples/spec
kdb global-mount        # mounts spec plugin by default
kdb mount $PWD/spec.ini spec ni
kdb mount $PWD/spectest.ini /testkey ni
kdb export /testkey ni     # note: spec can only applied on cascading access

.fi
.PP
.PP
With spec mount one can use (in this case battery\&.ini needs to be installed in \fCkdb file spec\fP (this should be preferred on non-development machines so that everything still works after the source is removed): 
.PP
.nf
cp battery.ini $(dirname $(kdb file spec))
kdb mount battery.ini spec/example/battery ni
kdb spec-mount /example/battery
kdb lsmeta /example/battery/level    # we see it has a check/enum
kdb getmeta /example/battery/level check/enum    # now we know allowed values
kdb set /example/battery/level low   # success, low is ok!
kdb set /example/battery/level x     # fails, not one of the allowed values!

cp openicc.ini $(dirname $(kdb file spec))
kdb mount openicc.ini spec/freedesktop/openicc ni
kdb spec-mount /freedesktop/openicc

kdb ls /freedesktop/openicc # lets see the whole configuration
kdb export spec/freedesktop/openicc ni   # give us details about the specification
kdb lsmeta /freedesktop/openicc/device/camera/#0/EXIF_serial   # seems like there is a check/type
kdb set "/freedesktop/openicc/device/camera/#0/EXIF_serial" 203     # success, is a long
kdb set "set "/freedesktop/openicc/device/camera/#0/EXIF_serial" x   # fails, not a long
.fi
.PP
 
