.TH "kdb::tools" 3elektra "Tue May 26 2020" "Version 0.9.2" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::tools \- This namespace is for the libtool library\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBackend\fP"
.br
.RI "A low-level representation of the backend (= set of plugins) that can be mounted\&. "
.ti -1c
.RI "class \fBBackendBuilder\fP"
.br
.RI "Highlevel interface to build a backend\&. "
.ti -1c
.RI "class \fBBackendBuilderInit\fP"
.br
.RI "Used as argument of constructor of *BackendBuilder\&. "
.ti -1c
.RI "class \fBBackendFactory\fP"
.br
.RI "Factory for \fBMountBackendInterface\fP\&. "
.ti -1c
.RI "struct \fBBackendInfo\fP"
.br
.RI "Info about a backend\&. "
.ti -1c
.RI "class \fBBackendInterface\fP"
.br
.RI "Minimal interface to add plugins\&. "
.ti -1c
.RI "class \fBBackends\fP"
.br
.RI "Allows one to list backends\&. "
.ti -1c
.RI "class \fBErrorPlugins\fP"
.br
.RI "\fBPlugins\fP to handle errors during configuration access\&. "
.ti -1c
.RI "class \fBGetPlugins\fP"
.br
.RI "\fBPlugins\fP to get configuration\&. "
.ti -1c
.RI "class \fBGlobalPlugins\fP"
.br
.RI "Low level representation of global plugins\&. "
.ti -1c
.RI "class \fBGlobalPluginsBuilder\fP"
.br
.RI "Build global plugins\&. "
.ti -1c
.RI "class \fBImportExportBackend\fP"
.br
.RI "\fBBackend\fP for import/export functionality\&. "
.ti -1c
.RI "class \fBMockPluginDatabase\fP"
.br
.RI "A plugin database that works with added fake data\&. "
.ti -1c
.RI "class \fBModules\fP"
.br
.RI "Allows one to load plugins\&. "
.ti -1c
.RI "class \fBModulesPluginDatabase\fP"
.br
.RI "A plugin database that works with installed modules\&. "
.ti -1c
.RI "class \fBMountBackendBuilder\fP"
.br
.RI "High-level functionality to build a mountpoint\&. "
.ti -1c
.RI "class \fBMountBackendInterface\fP"
.br
.RI "Interface to work with mountpoints (backends) for factory\&. "
.ti -1c
.RI "class \fBPlugin\fP"
.br
.RI "This is a C++ representation of a plugin\&. "
.ti -1c
.RI "class \fBPluginAdder\fP"
.br
.RI "Adds plugins in a generic map\&. "
.ti -1c
.RI "class \fBPluginDatabase\fP"
.br
.RI "Loads all plugins and allows us to query them\&. "
.ti -1c
.RI "class \fBPlugins\fP"
.br
.RI "A collection of plugins (either get, set or error) "
.ti -1c
.RI "class \fBPluginSpec\fP"
.br
.RI "Specifies a plugin by its name and configuration\&. "
.ti -1c
.RI "struct \fBPluginSpecHash\fP"
.br
.RI "Only to be used with PluginSpecName! "
.ti -1c
.RI "class \fBSerializeInterface\fP"
.br
.RI "Interface to serialize a backend\&. "
.ti -1c
.RI "class \fBSetPlugins\fP"
.br
.RI "\fBPlugins\fP to set configuration\&. "
.ti -1c
.RI "class \fBSpecBackendBuilder\fP"
.br
.RI "Build individual backend while reading specification\&. "
.ti -1c
.RI "class \fBSpecReader\fP"
.br
.RI "Highlevel interface to build a backend from specification\&. "
.ti -1c
.RI "struct \fBToolException\fP"
.br
.RI "All exceptions from the elektratools library are derived from this exception\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBBackend\fP const &b)"
.br
.RI "Prints the current status\&. "
.ti -1c
.RI "\fBkdb::KeySet\fP \fBparsePluginArguments\fP (std::string const &pluginArguments, std::string const &basepath)"
.br
.RI "Parse a string containing information to create a \fBKeySet\fP\&. "
.ti -1c
.RI "PluginSpecVector \fBparseArguments\fP (std::string const &cmdline)"
.br
.RI "Parse a complete commandline\&. "
.ti -1c
.RI "template<typename Iterator > PluginSpecVector \fBparseArguments\fP (Iterator first, Iterator last)"
.br
.RI "Parse a complete commandline that is already tokenized in pluginname pluginconfig\&. "
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBPluginSpec\fP const &spec)"
.br
.RI "Output the name, refname and size of config\&. "
.ti -1c
.RI "bool \fBoperator==\fP (\fBPluginSpec\fP const &self, \fBPluginSpec\fP const &other)"
.br
.RI "Compare two pluginspec if their value is equal\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (\fBPluginSpec\fP const &self, \fBPluginSpec\fP const &other)"
.br
.RI "Compare two pluginspec if their value is not equal\&. "
.in -1c
.SH "Detailed Description"
.PP 
This namespace is for the libtool library\&. 


.PP
\fBNote\fP
.RS 4
You have to link against libelektratools if you want to use functionality from it\&. Contrary to classes in namespace kdb it is not header-only\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBBackend\fP for an entry point 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "bool kdb::tools::operator!= (\fBPluginSpec\fP const & self, \fBPluginSpec\fP const & other)"

.PP
Compare two pluginspec if their value is not equal\&. 
.PP
\fBNote\fP
.RS 4
the content of getConfig() will be only compared with keynames, not content! 
.RE
.PP

.SS "std::ostream & kdb::tools::operator<< (std::ostream & os, \fBBackend\fP const & b)"

.PP
Prints the current status\&. 
.PP
\fBParameters\fP
.RS 4
\fIos\fP stream to print to 
.br
\fIb\fP backend to get status from
.RE
.PP
\fBReturns\fP
.RS 4
ref to stream 
.RE
.PP

.SS "bool kdb::tools::operator== (\fBPluginSpec\fP const & self, \fBPluginSpec\fP const & other)"

.PP
Compare two pluginspec if their value is equal\&. 
.PP
\fBNote\fP
.RS 4
the content of getConfig() will be only compared with keynames, not content! 
.RE
.PP

.SS "template<typename Iterator > PluginSpecVector kdb::tools::parseArguments (Iterator first, Iterator last)"

.PP
Parse a complete commandline that is already tokenized in pluginname pluginconfig\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIIterator\fP forward iterator type
.RE
.PP
\fBParameters\fP
.RS 4
\fIcmdline\fP contains space separated plugins with optional plugin configurations
.RE
.PP
\fBReturns\fP
.RS 4
a parsed PluginSpecVector 
.RE
.PP

.SS "PluginSpecVector kdb::tools::parseArguments (std::string const & cmdline)"

.PP
Parse a complete commandline\&. 
.PP
\fBParameters\fP
.RS 4
\fIcmdline\fP contains space separated plugins with optional plugin configurations
.RE
.PP
\fBNote\fP
.RS 4
currently whitespaces are not allowed within pluginname or config, use iterator interface \fBparseArguments()\fP if you need it\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBparseArguments()\fP 
.RE
.PP
\fBReturns\fP
.RS 4
a parsed PluginSpecVector 
.RE
.PP

.SS "\fBKeySet\fP kdb::tools::parsePluginArguments (std::string const & pluginArguments, std::string const & basepath)"

.PP
Parse a string containing information to create a \fBKeySet\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIpluginArguments\fP comma (,) to separate key=value, contains no whitespaces
.RE
.PP
\fBReturns\fP
.RS 4
newly created keyset with the information found in the string 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
