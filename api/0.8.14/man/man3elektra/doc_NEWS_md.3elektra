.TH "doc_NEWS_md" 3elektra "Thu Nov 19 2015" "Version 0.8.14" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_NEWS_md \- 0\&.8\&.14 Release 

.IP "\(bu" 2
guid: 519cbfac-6db5-4594-8a38-dec4c84b134f
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Thu, 19 Nov 2015 17:48:14 +0100
.PP
.PP
Again we managed to release with many new features and plugins (lua, enum, list, crypto, csvstorage, conditionals, mathcheck, filecheck, logchange) many fixes, and especially with a polished documentation\&.
.PP
.SS "Documentation Initiative"
.PP
The documentation Initiative is a huge success and now the documentation of Elektra is in a state where someone, never heard of Elektra, still can use it only by man pages\&.
.PP
There are now many ways to show a man page:
.PP
.IP "\(bu" 2
\fBhttp:\fP//libelektra\&.org/blob/master/doc/help/kdb\&.md 'on github'
.IP "\(bu" 2
\fCin the API docu\fP
.IP "\(bu" 2
by using \fCkdb --help\fP or \fCkdb help <command>\fP
.IP "\(bu" 2
by using \fCman kdb\fP
.PP
.PP
.SS "Help system"
.PP
Nearly all README\&.md are now also converted to man pages and also to Doxygen\&.
.PP
.SS "Doxygen Filter"
.PP
Kurt Micheli did an amazing work with a new doxygen filter\&. The filter allows all Elektra Markdown pages to be also included in the doxygen documentation\&. Thus all technical concepts are now explained in Markdown pages, this filter is essential\&.
.PP
But even more, the filter also includes all man pages written for the tools, giving a nice html view for them\&. (In addition to the markdown rendering on github)\&.
.PP
A big thanks to Kurt Micheli!
.PP
.SS "Further Docu fixes"
.PP
.IP "\(bu" 2
getenv debugging docu was improved
.IP "\(bu" 2
typo fix: Specify, thanks to Pino Toscano
.IP "\(bu" 2
\fCDesign decisions\fP Definition of Bool, capabilities and Publish Subscribe (thanks to Daniel Bugl)
.IP "\(bu" 2
Improve iconv docu
.IP "\(bu" 2
usage examples for many plugins
.IP "\(bu" 2
improve README for line plugin (thanks to Ian Donnelly)
.IP "\(bu" 2
add docu about dependencies for some plugins (thanks to Ian Donnelly)
.IP "\(bu" 2
create many new links within the documentation
.PP
.PP
.SS "Simplicity"
.PP
We shifted our \fBhttp:\fP//git\&.libelektra\&.org/blob/master/doc/GOALS\&.md 'goals' a bit: We want to prefer simplicity to flexibility\&. Not because we do no like flexibility, but because we think we achieved enough of it\&. Currently (and in future) you can use Elektra:
.PP
.IP "\(bu" 2
as primitive key/value storage
.IP "\(bu" 2
with specification
.IP "\(bu" 2
with code generation
.IP "\(bu" 2
\&.\&.\&.
.PP
.PP
But we cut flexibility regarding:
.PP
.IP "\(bu" 2
namespaces are only useful for configuration (not for arbitrary key/value)
.IP "\(bu" 2
mounting and contracts functionality
.IP "\(bu" 2
error code meanings are fixed, if a resolver detects a conflict, our defined error must be used
.IP "\(bu" 2
of course ABI, API
.PP
.PP
.SH "Qt-gui 0\&.0\&.9"
.PP
.PP
Raffael Pancheri again updated his qt-gui to version 0\&.0\&.9 (beta) with important of fixes and improvements:
.PP
.IP "\(bu" 2
Allow QML to destroy C++ owned model
.IP "\(bu" 2
Fixes for Qt 5\&.5
.IP "\(bu" 2
Handling of merge-conflicts improved
.IP "\(bu" 2
Avoid rewriting on merge-conflicts
.IP "\(bu" 2
Dialog at startup
.IP "\(bu" 2
Reduce memory footprint
.IP "\(bu" 2
add man page
.PP
.PP
A bit thanks to Raffael Pancheri!
.PP
.SS "Compatibility"
.PP
As always, the API and API is fully forward-compatible, i\&.e\&. programs compiled against an older 0\&.8 versions of Elektra will continue to work\&.
.PP
The behaviour of some plugins, however, changed:
.PP
.IP "\(bu" 2
the INI plugin, the section handling was improved\&.
.IP "\(bu" 2
in the NI plugin, the symbol Ni_GetVersion vanished
.IP "\(bu" 2
in the resolver plugin files of other namespaces which are not mounted are not resolved anymore
.PP
.PP
.SS "Build System"
.PP
ENABLE_CXX11 does not exist anymore, it is always on\&. We do not care about 199711L compilers anymore, which makes development easier, without losing any actually used platform\&.
.PP
Some programs that are only used in-source are not installed anymore\&. (by Pino Toscano)
.PP
Python and Lua plugins are enabled now in \fC-DPLUGINS=ALL\fP\&.
.PP
Python3 plugin was renamed to python\&.
.PP
.SS "Lua Plugin"
.PP
Manuel Mausz add a lightweight alternative to the python plugin: \fCthe lua plugin\fP\&. In a similar way, someone can write scripts, which are executed on every access to the \fBhttp:\fP//libelektra\&.org/blob/master/doc/help/elektra-glossary\&.md 'key database'\&.
.PP
To mount a lua based filter, you can use: 
.PP
.nf
kdb mount file.ini /lua ini lua script=/path/to/lua/lua_filter.lua

.fi
.PP
.PP
Even though it works well, it is classified as technical preview\&.
.PP
Thanks to Manuel Mausz for this plugin!
.PP
.SS "Cryptography Plugin"
.PP
In this technical preview, Peter Nirschl \fCdemonstrates how a plugin\fP can encrypt Elektra's values\&. In testcases it is already able to do so, but for the end user an easy way for key derivation is missing\&.
.PP
A big thanks to Peter Nirschl!
.PP
.SS "Conditionals"
.PP
Brings \fCif\fP inside Elektra\&. It lets you check if some keys have the values they should have\&. 
.PP
.nf
    kdb mount conditionals.dump /tmount/conditionals conditionals dump
    kdb set user/tmount/conditionals/fkey 3.0
    kdb set user/tmount/conditionals/hkey hello
    kdb setmeta user/tmount/conditionals/key check/condition "(hkey == 'hello') ? (fkey == '3.0')" # success
    kdb setmeta user/tmount/conditionals/key check/condition "(hkey == 'hello') ? (fkey == '5.0')" # fail

.fi
.PP
.PP
.SS "INI Plugin"
.PP
The INI plugin got a near rewrite\&. Now it handles many situations better, has many more options and features, including:
.PP
.IP "\(bu" 2
preserving the order
.IP "\(bu" 2
using keys as meta-data
.IP "\(bu" 2
many new testcases
.IP "\(bu" 2
fix escaping
.PP
.PP
Thanks to Thomas Waser for this work!
.PP
.SS "List Plugin"
.PP
Currently, Elektra has some limitations on how many plugins can be added to certain \fBhttp:\fP//libelektra\&.org/blob/master/doc/help/elektra-plugins-ordering\&.md 'placements'\&. Because of the rapidly growing number of plugins, some combinations are not possible anymore\&.
.PP
This plugin tackles the issue, by delegating the work to an arbitrary number of subplugins\&. As a bonus, it works lazily and thus might avoid the loading of some plugins all together\&.
.PP
Thanks to Thomas Waser for this plugin!
.PP
.SS "Csvstorage Plugin"
.PP
You can now mount csv-files\&. To mount \fCtest\&.csv\fP simply use: 
.PP
.nf
kdb mount test.csv /csv csvstorage

.fi
.PP
.PP
There are many options, e\&.g\&. changing the delimiter, use header for the key names or predefine how the columns should be named\&. For details \fCsee the documentation\fP\&.
.PP
Thanks to Thomas Waser!
.PP
.SS "Filecheck plugin"
.PP
The also new plugin lineendings is already superseded by the filecheck plugin\&.
.PP
Thanks to Thomas Waser!
.PP
.SS "Enum plugin"
.PP
The Enum plugin checks string values of Keys by comparing it against a list of valid values\&.
.PP
Thanks to Thomas Waser!
.PP
.SS "Electrify Machinekit\&.io"
.PP
We are proud that \fCMachinekit\fP starts using Elektra\&.
.PP
Alexander Rössler is digging into all details, and already enhanced the DBUS Plugin for their needs\&. DBus now can emit a message for every changed key\&.
.PP
A big thanks to Alexander Rössler!
.PP
.SS "KDB Tools:"
.PP
.IP "\(bu" 2
fix kdb check return code (open fail)
.PP
.PP
.SS "Bugfixes"
.PP
.IP "\(bu" 2
libgetenv did not reinitalized its mutexes on forks
.IP "\(bu" 2
add needSync also in C++ binding
.IP "\(bu" 2
handle removed current working directories (fallback to /)
.IP "\(bu" 2
avoid segfault on missing version keys (when doing \fCkdb rm system/elektra/version\fP)
.IP "\(bu" 2
fix glob plugin + kdb mount with \fBhttp:\fP//libelektra\&.org/blob/master/doc/help/elektra-contracts\&.md 'config/needs usage'
.IP "\(bu" 2
Mac OS X fix different handling of strerror_r (thanks to Daniel Bugl)
.IP "\(bu" 2
do not change parentKey in early-error scenarios
.IP "\(bu" 2
do not try to interpret some binary keys as function keys
.PP
.PP
.SS "Other Gems"
.PP
.IP "\(bu" 2
getenv example: do not link to elektra/elektratools, thanks to Pino Toscano
.IP "\(bu" 2
fixes in other examples
.IP "\(bu" 2
avoid useless UTF-8 chars and fix typos, thanks to Kurt Micheli
.IP "\(bu" 2
pdf now also allows UTF-8 characters if added to elektraSpecialCharacters\&.sty, thanks to Kurt Micheli
.IP "\(bu" 2
libgetenv: lookup also used for layers
.IP "\(bu" 2
handle wrong arguments of metals better, thanks to Ian Donnelly
.IP "\(bu" 2
Improvement of error messages in the augeas plugin
.IP "\(bu" 2
\fCkdb set\fP avoids fetching unnecessary namespaces
.IP "\(bu" 2
verbose unmount
.IP "\(bu" 2
logchange: small demonstration plugin to show how to log added, removed and changed keys
.IP "\(bu" 2
setmeta will use spec as default
.IP "\(bu" 2
libtools: avoid useless getName, add verbosity flag for findBackend
.IP "\(bu" 2
Improve iconv error messages
.IP "\(bu" 2
That mount needs permissions to /etc should now really be obvious with new error message
.IP "\(bu" 2
many fixes in the template for new plugins
.PP
.PP
.SS "Get It!"
.PP
You can download the release from \fChere\fP and now also \fChere on github\fP
.PP
.IP "\(bu" 2
name: elektra-0\&.8\&.14\&.tar\&.gz
.IP "\(bu" 2
TODO: hash sums missing
.PP
.PP
This release tarball now is also available \fCsigned by me using gpg\fP
.PP
already built API-Docu can be found \fChere\fP
.PP
.SS "Stay tuned!"
.PP
Subscribe to the \fCRSS feed\fP to always get the release notifications\&.
.PP
For any questions and comments, please contact the \fCMailing List\fP the issue tracker \fCon github\fP or by mail elektra@markus-raab.org\&.
.PP
\fCPermalink to this NEWS entry\fP
.PP
For more information, see \fChttp://libelektra\&.org\fP
.PP
Best regards, Markus
.PP
.SH "0\&.8\&.13 Release"
.PP
.PP
.IP "\(bu" 2
guid: 3c00a5f1-c017-4555-92b5-a2cf6e0803e3
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Thu, 17 Sep 2015 17:32:16 +0200
.PP
.PP
Again we managed to release with many new features, many fixes and also other improvements\&.
.PP
.SS "Elektrify-getenv"
.PP
getenv(3) is one of the most popular ways to retrieve configuration, even though it has many known problems:
.PP
.IP "\(bu" 2
no standard way to modify it
.IP "\(bu" 2
relogin (or restart of shell) necessary
.IP "\(bu" 2
names are flat (no hierarchical structure)
.IP "\(bu" 2
cannot be set for individual applications
.IP "\(bu" 2
different in at, cron and similar scripts
.PP
.PP
With elektrify-getenv we wrote a solution which solves most of the problems\&. We use the LD_PRELOAD technique to \fIadditionally\fP retrieve values from Elektra, and not only the environment\&.
.PP
You simply can do:
.PP
```bash kdb set user/env/override/HTTP_PROXY 'http://my\&.proxy:8080' ```
.PP
This will set the \fCHTTP_PROXY\fP environment variable to \fChttp://my.proxy:8080\fP\&. Configuration can be retrieved with \fCkdb get\fP:
.PP
```bash kdb get user/env/override/HTTP_PROXY lynx # or start another www-browser with the newly set HTTP_PROXY ```
.PP
Or using the man pages: 
.PP
.nf
kdb elektrify-getenv man man --elektra:MANWIDTH=40

.fi
.PP
.PP
Will use MANWIDTH 40 for this invocation of man man\&. This feature is handy, if an option is only available by environment, but not by command-line arguments, because sometimes environment variables are not trivial to set (e\&.g\&. in Makefiles)\&.
.PP
Some more examples: 
.PP
.nf
kdb set user/env/override/MANOPT -- "--regex -LC"
kdb elektrify-getenv getenv MANOPT   # to check if it is set as expected
kdb getenv MANOPT   # if /etc/ld.so.preload is active

.fi
.PP
.PP
So is this the final solution for configuration and manual elektrification of applications is not needed anymore?
.PP
The answer is: no and yes\&.
.PP
It is quite satisfactory for configuration that is inherently sharable (not different from one application to another) \fIand\fP needs the environment semantics, i\&.e\&. some subprocesses should have different configuration than others, e\&.g\&. in a specific terminal\&.
.PP
But it might not be a good solution for your own application, because libgetenv(3) implies many architectural decision, that other elektrified applications would decide differently, e\&.g\&.:
.PP
.IP "\(bu" 2
it uses global variables (getenv(3) has no handle)
.IP "\(bu" 2
it uses mutex for multi-threading safety
.IP "\(bu" 2
the API getenv(3) only returns \fCchar*\fP and has no support for other data types
.PP
.PP
For more information see \fBhttp:\fP//git\&.libelektra\&.org/blob/master/src/libgetenv/README\&.md 'src/libgetenv/README\&.md'
.PP
.SS "Compatibility"
.PP
As always, the API and API is fully forward-compatible, i\&.e\&. programs compiled against an older 0\&.8 versions of Elektra will continue to work\&.
.PP
Because \fCkeyUnescapedName\fP and \fCkeyGetUnescapedNameSize\fP is added in this release, it is not backward-compatible, i\&.e\&. programs compiled against 0\&.8\&.13, might \fInot\fP work with older 0\&.8 libraries\&.
.PP
The function \fCkeyUnescapedName\fP provides access to an unescaped name, i\&.e\&. one where \fC/\fP and \fC\\\\\fP are literal symbols and do not have any special meaning\&. \fCNULL\fP characters are used as path separators\&. This function makes it trivial and efficient to iterate over all path names, as already exploited in all bindings:
.PP
.IP "\(bu" 2
\fCjna (java)\fP
.IP "\(bu" 2
\fClua\fP
.IP "\(bu" 2
\fCpython2\fP
.IP "\(bu" 2
\fCpython3\fP
.PP
.PP
Other small changes/additions in bindings:
.PP
.IP "\(bu" 2
fix key constructor, thanks to Manuel Mausz
.IP "\(bu" 2
add copy and deepcopy in python (+examples,+testcases), thanks to Manuel Mausz
.IP "\(bu" 2
dup() in python3 returned wrong type (SWIG wrapper), thanks to Toscano Pino for reporting, thanks to Manuel Mausz for fixing it
.PP
.PP
Doxygen 1\&.8\&.8 is preferred and the configfile was updated to this version\&.
.PP
The symbols of nickel (for the ni plugin) do not longer leak from the Elektra library\&. As such, old versions of testmod_ni won't work with Elektra 0\&.8\&.13\&. A version-script is now in use to only export following symbols:
.PP
.IP "\(bu" 2
kdb*
.IP "\(bu" 2
key*
.IP "\(bu" 2
ks*
.IP "\(bu" 2
libelektra* for module loading system
.IP "\(bu" 2
elektra* for proposed and other functions (no ABI/API compatibility here!)
.PP
.PP
In this release, ENABLE_CXX11 was changed to \fCON\fP by default\&.
.PP
Note that in the next release 0\&.8\&.14 there will be two changes:
.PP
.IP "\(bu" 2
According to \fCissue #262\fP, we plan to remove the option ENABLE_CXX11 and require the compiler to be C++11 compatible\&. If you have any system you are not able to build Elektra with -DENABLE_CXX11=ON (which is the default for 0\&.8\&.13) please report that immediately\&.
.IP "\(bu" 2
the python3 bindings will be renamed to python
.PP
.PP
By not having to care for pre-C++11 compilers, we hope to attract more developers\&. The core part is still in C99 so that Elektra can be used on systems where libc++ is not available\&. Many new plugins are still written in C99, also with the purpose of not depending on C++\&.
.PP
.SS "Python Plugins"
.PP
A technical preview of \fCpython3\fP and \fCpython2\fP plugins has been added\&.
.PP
With them its possible to write any plugin with python scripts\&.
.PP
Note, they are a technical preview\&. They might have severe bugs and the API might change in the future\&. Nevertheless, it is already possible to, e\&.g\&. develop storage plugins with it\&.
.PP
They are not included in \fCALL\fP plugins\&. To use it, you have to specify it: 
.PP
.nf
-PLUGINS="ALL;python;python2"

.fi
.PP
.PP
Thanks to Manuel Mausz for to this work on the plugins and the patience in all the last minute fixes!
.PP
.SS "Qt-gui 0\&.0\&.8"
.PP
The GUI was improved and the most annoying bugs are fixed:
.PP
.IP "\(bu" 2
only reload and write config files if something has changed
.IP "\(bu" 2
use merging in a way that only a conflict free merge will be written, thanks to Felix Berlakovich
.IP "\(bu" 2
made sure keys can only be renamed if the new name/value/metadata is different from the existing ones
.IP "\(bu" 2
fixed 1) and 2) of #233
.IP "\(bu" 2
fixed #235
.IP "\(bu" 2
fixed qml warning when deleting key
.IP "\(bu" 2
fixed qml typerror when accepting an edit
.PP
.PP
A big thanks to Raffael Pancheri!
.PP
.SS "KDB Tool"
.PP
The commandline tool \fCkdb\fP also got some improvements\&. Most noteworthy is that \fCkdb get -v\fP now gives a complete trace for every key that was tried\&. This is very handy if you have a complex specification with many fallback and override links\&.
.PP
It also shows default values and warnings in the case of context-oriented features\&.
.PP
Furthermore:
.PP
.IP "\(bu" 2
Add \fC-v\fP for setmeta
.IP "\(bu" 2
Copy will warn when it won't overwrite another key (behaviour did not change)
.IP "\(bu" 2
improve help text, thanks to Ian Donnelly
.PP
.PP
.SS "Documentation Initiative"
.PP
As Michael Haberler from \fCmachinekit\fP pointed out it was certainly not easy for someone to get started with Elektra\&. With the documentation initiative we are going to change that\&.
.PP
.IP "\(bu" 2
The discussion in \fCgithub issues\fP should clarify many things
.IP "\(bu" 2
We start writing man pages in ronn-format(7), thanks to Ian Donnelly for current work
.IP "\(bu" 2
Kurt Micheli is woring on improved doxygen docu + pdf generation
.IP "\(bu" 2
Daniel Bugl already restructed the main page
.IP "\(bu" 2
Daniel Bugl also improved formatting
.IP "\(bu" 2
doc: use 
.PP
\fBReturn values:\fP
.RS 4
\fImore,thanks\fP to Pino Toscano
.RE
.PP

.IP "\(bu" 2
doxygen: fix template to use \fC@\fP and not \fC\\\\\fP\&.
.IP "\(bu" 2
SVG logo is preferred, thanks to Daniel Bugl
.IP "\(bu" 2
doc: use 
.PP
\fBReturn values:\fP
.RS 4
\fImore,thanks\fP to Pino Toscano
.RE
.PP

.IP "\(bu" 2
many typo fixes, thanks to Pino Toscano
.IP "\(bu" 2
fix broken links, thanks to Manuel Mausz, Daniel Bugl and Michael Haberler
.PP
.PP
Any further help is very welcome! This call is especially addressed to beginners in Elektra because they obviously know best which documentation is lacking and what they would need\&.
.PP
.SS "Portability"
.PP
\fCkdb-full\fP and \fCkdb-static\fP work fine now for Windows 64bit, thanks to Manuel Mausz\&. The wresolver is now more relaxed with unset environment\&.
.PP
All issues for Mac OS X were resolved\&. With the exception of elektrify-getenv everything should work now, thanks to Mihael Pranjic:
.PP
.IP "\(bu" 2
fix mktemp
.IP "\(bu" 2
testscripts
.IP "\(bu" 2
recursive mutex simplification
.IP "\(bu" 2
clearenv ifdef
.PP
.PP
and thanks to Daniel Bugl:
.PP
.IP "\(bu" 2
RPATH fixed, so that \fCkdb\fP works
.PP
.PP
furthermore:
.PP
.IP "\(bu" 2
fix \fC__FUNCTION__\fP to \fC__func__\fP (C99), thanks to Pino Toscano
.IP "\(bu" 2
avoid compilation error when JNI_VERSION_1_8 is missing
.IP "\(bu" 2
fix (twice, because of an accidental revert) the TARGET_CMAKE_FOLDER, thanks to Pino Toscano
.PP
.PP
Thanks to Manuel Mausz for to testing and improving portability!
.PP
.SS "Packaging and Build System"
.PP
.IP "\(bu" 2
\fC0\&.8\&.12 packaged+migrated to testing\fP, thanks to Pino Toscano
.IP "\(bu" 2
fix build with external gtest, thanks to Pino Toscano
.IP "\(bu" 2
switch from FindElektra\&.cmake to ElektraConfig\&.cmake, thanks to Pino Toscano
.IP "\(bu" 2
use \fCcmake_parse_arguments\fP instead of \fCparse_arguments\fP, thanks to Manuel Mausz
.PP
.PP
.SS "Further Fixes"
.PP
.IP "\(bu" 2
Key::release() will also work when Key holds a null-pointer
.IP "\(bu" 2
Key::getName() avoids std::string exception
.IP "\(bu" 2
support for copy module was introduced, thanks to Manuel Mausz
.IP "\(bu" 2
be more POSIX compatible in shell scripts (\fCtype\fP to \fCcommand -v\fP and avoid \fCecho -e\fP) thanks to Pino Toscano
.IP "\(bu" 2
fix vararg type for KEY_FLAGS, thanks to Pino Toscano
.IP "\(bu" 2
fix crash of example, thanks to Pino Toscano
.IP "\(bu" 2
add proper licence file for Modules (COPYING-CMAKE-SCRIPTS), thanks to Pino Toscano
.IP "\(bu" 2
fix XDG resolver issue when no given path in XDG_CONFIG_DIRS is valid
.IP "\(bu" 2
make dbus example work again
.IP "\(bu" 2
fix compiler warnings for gcc and clang
.IP "\(bu" 2
fix valgrind suppressions
.IP "\(bu" 2
Installation of GI binding is fixed, thanks to Dāvis
.IP "\(bu" 2
make uninstall is fixed and docu improved
.PP
.PP
.SS "Notes"
.PP
There are some misconceptions about Elektra and semi structured data (like XML, JSON)\&. Elektra is a key/value storage, that internally represents everything with key and values\&. Even though, Elektra can use XML and JSON files elegantly, there are limitations what XML and JSON can represent\&. XML, e\&.g\&., cannot have holes within its structure, while this is obviously easily possible with key/value\&. And JSON, e\&.g\&., cannot have non-array entries within an array\&. This is a more general issue of that configuration files in general are constrained in what they are able to express\&. The solution to this problem is validation, i\&.e\&. keys that does not fit in the underlying format are rejected\&. Note there is no issue the other way round: special characteristics of configuration files can always be captured in Elektra's metadata\&.
.PP
.SS "Get It!"
.PP
You can download the release from \fChere\fP and now also \fChere on github\fP
.PP
.IP "\(bu" 2
name: elektra-0\&.8\&.13\&.tar\&.gz
.IP "\(bu" 2
size: 2141758
.IP "\(bu" 2
md5sum: 6e7640338f440e67aba91bd64b64f613
.IP "\(bu" 2
sha1: ca58524d78e5d39a540a4db83ad527354524db5e
.IP "\(bu" 2
sha256: f5c672ef9f7826023a577ca8643d0dcf20c3ad85720f36e39f98fe61ffe74637
.PP
.PP
This release tarball now is also available \fCsigned by me using gpg\fP
.PP
already built API-Docu can be found \fChere\fP
.PP
.SS "Stay tuned!"
.PP
Subscribe to the \fCRSS feed\fP to always get the release notifications\&.
.PP
For any questions and comments, please contact the \fCMailing List\fP the issue tracker \fCon github\fP or by mail elektra@markus-raab.org\&.
.PP
\fCPermalink to this NEWS entry\fP
.PP
For more information, see \fChttp://libelektra\&.org\fP
.PP
Best regards, Markus
.PP
.SH "0\&.8\&.12 Release"
.PP
.PP
.IP "\(bu" 2
guid: 98770541-32a1-486a-98a1-d02f26afc81a
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Sun, 12 Jul 2015 20:14:09 +0200
.PP
.PP
Again we managed to release with new features, many build system fixes and also other improvements\&.
.PP
.SS "dir namespace"
.PP
This namespace adds per-project or per-directory (hence the name) configurations\&. E\&.g\&. think how git works: not only /etc and ~ are relevant sources for configuration but also the nearest \&.git directory\&.
.PP
This technique is, however, much more widely useful than just for git repositories! Nearly every application can benefit from such a per-dir configuration\&. Its almost certain that you have already run into the problem that different projects have different guidelines (e\&.g\&. coding conventions, languages, whitespace requirements, line breaks, \&.\&.)\&. Obviously, thats not a per-user configuration and its also not a per-file issue (thats how its usually solved today)\&. So in fact you want, e\&.g\&., your editor to have an additional per-project layer to choose between such settings\&.
.PP
The technique is useful for nearly every other tool:
.IP "\(bu" 2
different color palettes in gimp, inkscape,\&.\&.
.IP "\(bu" 2
different languages for libreoffice
.IP "\(bu" 2
different security settings for media players, interpreters (e\&.g\&. when in Download folder)
.IP "\(bu" 2
per-folder \&.htaccess in apache or other web servers
.IP "\(bu" 2
any other per-dir configuration you can imagine\&.\&.
.PP
.PP
It is simple to use, also for the administrative side\&. First, change to the folder to your folder (e\&.g\&. where a project is): 
.PP
.nf
cd ~/projects/abc

.fi
.PP
.PP
Then add some user (or system or spec) configuration to have some default\&. 
.PP
.nf
kdb set user/sw/editor/textwidth 72

.fi
.PP
.PP
Then verify that we get this value back when we do a cascading lookup: 
.PP
.nf
kdb get /sw/editor/textwidth

.fi
.PP
.PP
The default configuration file for the dir-namespace is \fCpwd\fP/KDB_DB_DIR/filename: 
.PP
.nf
kdb file dir/sw/editor/textwidth

.fi
.PP
.PP
.IP "\(bu" 2
KDB_DB_DIR can be modified at compile-time and is \fC\&.dir\fP per default
.IP "\(bu" 2
filename can be modified by mounting, see below, and is \fCdefault\&.ecf\fP by default
.PP
.PP
We assume, that the project abc has the policy to use textwidth 120, so we change the dir-configuration: 
.PP
.nf
kdb set dir/sw/editor/textwidth 120

.fi
.PP
.PP
Now we will get the value 120 in the folder ~/projects/abc and its subdirectories (!), but everywhere else we still get 72: 
.PP
.nf
kdb get /sw/editor/textwidth

.fi
.PP
.PP
Obviously, that does not only work with kdb, but with every elektrified tool\&.
.PP
.SS "mount files in dir namespaces"
.PP
For cascading mountpoints, the dir name is also automatically mounted, e\&.g\&.: 
.PP
.nf
kdb mount editor.ini /sw/editor ini

.fi
.PP
.PP
But its also possible to only mount for the namespace dir if no cascading mountpoint is present already: 
.PP
.nf
kdb mount app.ini dir/sw/app tcl

.fi
.PP
.PP
In both cases keys below dir/sw/editor would be in the INI file \fC\&.dir/editor\&.ini\fP and not in the file \fC\&.dir/default\&.ecf\fP\&.
.PP
.SS "dir together with spec namespace"
.PP
In the project P we had the following issue: We needed on a specific computer the configuration in /etc to be used in favour of the dir config\&.
.PP
We could easily solve the problem using the specification: 
.PP
.nf
kdb setmeta spec/sw/P/current/org/base override/#0 /sw/P/override/org/base

.fi
.PP
.PP
Hence, we could create system/sw/P/override/org/base which would be in favour of dir/sw/P/current/org/base\&. So we get system/sw/P/override/org/base when we do: 
.PP
.nf
kdb get /sw/P/current/org/base

.fi
.PP
.PP
Alternatively, one could also use the specification: 
.PP
.nf
kdb setmeta spec/sw/P/current/org/base namespace/#0 user
kdb setmeta spec/sw/P/current/org/base namespace/#1 system
kdb setmeta spec/sw/P/current/org/base namespace/#2 dir

.fi
.PP
.PP
Which makes dir the namespace with the least priority and system would be preferred\&. This was less suitable for our purpose, because we needed the override only on one computer\&. For all other computers we wanted dir to be preferred with only one specification\&.
.PP
.SS "Conclusion"
.PP
The great thing is, that every elektrified application, automatically gets all the mentioned features\&. Not even a recompilation of the application is necessary\&.
.PP
Especially the specification provides flexibility not present in other configuration systems\&.
.PP
.SS "Qt-Gui 0\&.0\&.7"
.PP
Raffael Pancheri again did a lot of stabilizing work:
.IP "\(bu" 2
show errormessage on exception when starting gui
.IP "\(bu" 2
Correctly update keyAreaView property when selecting item in TreeView
.IP "\(bu" 2
Fix crash when creating key in MountingWizard
.IP "\(bu" 2
Remove information on successful export
.IP "\(bu" 2
Show error dialog on failed import
.IP "\(bu" 2
Remove namefilters (every syntax can have any file extension)
.IP "\(bu" 2
other namespaces (including dir) are included
.PP
.PP
The GUI can be handy for many purposes, e\&.g\&. we use it already as xml and json editor\&. Note that there are still \fCsome bugs\fP\&.
.PP
.SS "Other fixes"
.PP
.IP "\(bu" 2
constants now additionally gives information about SPEC and DIR\&.
.IP "\(bu" 2
Doku about CMake variables \fCELEKTRA_DEBUG_BUILD\fP and \fCELEKTRA_VERBOSE_BUILD\fP fixed, thanks to Kurt Micheli
.IP "\(bu" 2
Fixed compilation of \fCELEKTRA_DEBUG_BUILD\fP and \fCELEKTRA_VERBOSE_BUILD\fP, thanks to Manuel Mausz
.IP "\(bu" 2
Example with error handling added, thanks to Kurt Micheli
.IP "\(bu" 2
Add design decision about global plugins
.IP "\(bu" 2
Split dependencies document to individual README\&.md, thanks to Ian Donnelly
.IP "\(bu" 2
Fix nearly all compilation warnings of SWIG, thanks to Manuel Mausz
.IP "\(bu" 2
CMake: Fix gtest to be build if \fCBUILD_TESTING\fP activated, but not \fCENABLE_TESTING\fP
.IP "\(bu" 2
CMake: Allow compilation without BUILD_STATIC
.IP "\(bu" 2
Explain compilation options more, thanks to Kai-Uwe Behrmann for asking the question
.IP "\(bu" 2
CMake: always build examples, allow to only build documentation
.IP "\(bu" 2
add common header file for C++ plugins (used by plugins struct and type)
.IP "\(bu" 2
fix compilation of race tool under oS-11\&.4 thanks to Kai-Uwe Behrmann
.IP "\(bu" 2
CMake: find python3 correctly
.IP "\(bu" 2
CMake: fix BUILD_SHARED_LIBS
.IP "\(bu" 2
Doxygen: remove \fCHTML_TIMESTAMP\fP to make build reproduceable
.IP "\(bu" 2
Doxygen: rewrite of main page+add info about all five namespaces
.IP "\(bu" 2
CMake: allow to use qt-gui with qt built with -reduce-relocations
.IP "\(bu" 2
fix kdb ls, get to list warnings during open
.IP "\(bu" 2
during \fBkdbOpen()\fP use Configfile: to state phase
.IP "\(bu" 2
add -f option to kdb check+improve docu
.IP "\(bu" 2
improve readability of warning output
.IP "\(bu" 2
run_all always uses dump for backups
.IP "\(bu" 2
line plugin roundtrips correctly
.IP "\(bu" 2
untypical resolvers have their non-existant filename handled correctly + sync ignored them correctly
.IP "\(bu" 2
cmake-3\&.0 fixes
.IP "\(bu" 2
cascading merging, a big thanks to Felix Berlakovich for the last minute fix
.PP
.PP
.SS "Compatibility"
.PP
As always, the API and API is fully compatible\&. Because nothing was added, its even possible to link against an older version of Elektra (if compiled against 0\&.8\&.12)\&.
.PP
In plugins some small changes may effect compatibility:
.IP "\(bu" 2
in rename the handling of parent key is different (see #206)
.IP "\(bu" 2
resolving of spec absolute and relative pathes are no more handled identical\&. Instead absolute pathes will be searched absolutely, while relatives are below KDB_DB_SPEC (as before)\&. This behaviour is consistent to the behaviour of the other namespaces\&.
.PP
.PP
These two points are also the only unit tests that fail when Elektra 0\&.8\&.12 is used with 0\&.8\&.11 unit tests\&.
.PP
.SS "Build Server"
.PP
.IP "\(bu" 2
special github command to build bindings 'jenkins build bindings please', thanks to Manuel Mausz
.IP "\(bu" 2
open build service update For \fCOpenSUSE, CentOS, Fedora, RHEL and SLE\fP Kai-Uwe Behrmann kindly provides packages \fCfor download\fP\&.
.PP
.PP
.SS "Get It!"
.PP
You can download the release from \fChere\fP and now also \fChere on github\fP
.PP
.IP "\(bu" 2
name: elektra-0\&.8\&.12\&.tar\&.gz
.IP "\(bu" 2
size: 2102450
.IP "\(bu" 2
md5sum: a40a33ae6661ebfa096378f0986ede6c
.IP "\(bu" 2
sha1: 3594ef58b6e3b0ffa9589d787679b6e739fbb0dd
.IP "\(bu" 2
sha256: 562432bea9455a61ff6e6b3263078ea9b26bef2ed177a04b5f9b181d605bc021
.PP
.PP
This release tarball now is also available \fCsigned by me using gpg\fP
.PP
already built API-Docu can be found \fChere\fP
.PP
.SS "Stay tuned!"
.PP
Subscribe to the \fCRSS feed\fP to always get the release notifications\&.
.PP
For any questions and comments, please contact the \fCMailing List\fP the issue tracker \fCon github\fP or by mail elektra@markus-raab.org\&.
.PP
\fCPermalink to this NEWS entry\fP
.PP
For more information, see http://libelektra.org
.PP
Best regards, Markus
.PP
.SH "0\&.8\&.11 Release"
.PP
.PP
.IP "\(bu" 2
guid: 7d4647d4-4131-411e-9c2a-2aca39446e18
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Fri, 03 Apr 2015 02:39:37 +0200
.PP
.PP
From the beginning of the Elektra Initiative, Elektra aimed at avoiding hard-coded information in the application and to make the application's configuration more transparent\&. While avoiding any pathes to files was reality from the first released Elektra version, now also hard-coding default values, fallback mechanisms and even Elektra's pathes to keys can be avoided\&.
.PP
How does that work?
.PP
Elektra 0\&.8\&.11 introduces a so called specification for the application's configuration\&. It is located below its own namespace \fCspec\fP (next to user and system)\&.
.PP
Once the base path is known, the user can find out all Elektra pathes used by an application, using: 
.PP
.nf
kdb ls spec/basepath

.fi
.PP
.PP
Keys in \fCspec\fP allow us to specify which keys are read by the application, which fallback it might have and which is the default value using meta data\&. The implementation of these features happened in \fCksLookup\fP\&. When cascading keys (those starting with \fC/\fP) are used following features are now available (in the meta data of respective \fCspec\fP-keys):
.PP
.IP "\(bu" 2
\fCoverride/#\fP: use these keys \fIin favour\fP of the key itself (note that \fC#\fP is the syntax for arrays, e\&.g\&. \fC#0\fP for the first element, \fC#_10\fP for the 11th and so on)
.IP "\(bu" 2
\fCnamespace/#\fP: instead of using all namespaces in the predefined order, one can specify which namespaces should be searched in which order
.IP "\(bu" 2
\fCfallback/#\fP: when no key was found in any of the (specified) namespaces the \fCfallback\fP-keys will be searched
.IP "\(bu" 2
\fCdefault\fP: this value will be used if nothing else was found
.PP
.PP
This technique does not only give you the obvious advantages, but also provides complete transparency how a program will fetch a configuration value\&. In practice that means that: 
.PP
.nf
kdb get "/sw/app/#0/promise"

.fi
.PP
.PP
will give you the \fIexact same value\fP as the application uses when it lookups the key \fCpromise\fP\&. Many \fCif\fPs and hardcoded values are avoided, we simply fetch and lookup the configuration by following code: 
.PP
.nf
Key *parentKey = keyNew("/sw/app/#0", KEY_CASCADING_NAME, KEY_END);
kdbGet(kdb, ks, parentKey);

ksLookupByName(ks, "/sw/app/#0/promise", 0);

.fi
.PP
.PP
We see in that example that only Elektra pathes are hardcoded in the application\&. But those can be found out easily, completely without looking in the source code\&. The technique is simple: append a logger plugin and the KDB base path is printed to:
.PP
.IP "\(bu" 2
stdout in the case of the plugin tracer
.IP "\(bu" 2
syslog in the case of the plugin syslog
.IP "\(bu" 2
journald in the case of the plugin journald
.PP
.PP
What we do not see in the program above are the default values and fallbacks\&. They are only present in the so specification (namespace \fCspec\fP)\&. Luckily, the specification are key/value pairs, too\&. So we do not have to learn something new, e\&.g\&. using the ni plugin we can specify: 
.PP
.nf
[promise]
default=20
fallback/#0=/somewhere/else
namespace/#0=user

.fi
.PP
.PP
1\&.) When this file is mounted to \fCspec/sw/app/#0\fP we specify, that for the key \fC/sw/app/#0/promise\fP only the namespace \fCuser\fP should be used\&. 2\&.) If this key was not found, but \fC/somewhere/else\fP is present, we will use this key instead\&. The \fCfallback\fP technique is very powerful: it allows us to have (recursive) links between applications\&. In the example above, the application is tricked in receiving e\&.g\&. the key \fCuser/somewhere/else\fP when \fCpromise\fP was not available\&. 3\&.) The value \fC20\fP will be used as default, even if no configuration file is found\&.
.PP
Note that the fallback, override and cascading works on \fIkey level\fP, and not like most other systems have implemented, on configuration \fIfile level\fP\&.
.PP
.SS "Namespaces"
.PP
The specification gives the namespaces clearer semantics and purpose\&. Key names starting with a namespace are connected to a configuration source\&. E\&.g\&. keys starting with:
.PP
.IP "\(bu" 2
\fCuser\fP are keys from the home directory of the current user
.IP "\(bu" 2
\fCsystem\fP are keys from the \fC/etc\fP directory of the current system
.IP "\(bu" 2
\fCspec\fP are keys from the specification directory (configurable with KDB_DB_SPEC, typically \fC/usr/share/elektra/specification\fP)
.PP
.PP
When a key name starts with an \fC/\fP it means that it is looked up by specification\&. Such a cascading key is not really present in the keyset (except when a default value was found)\&. They are neither received nor stored by \fCkdbGet\fP and \fCkdbSet\fP\&.
.PP
Applications shall only lookup using cascading keys (starting with \fC/\fP)\&. If no specification is present, cascading of all namespaces is used as before\&.
.PP
Elektra will (always) continue to work for applications that do not have a specification\&. We strongly encourage you, however, to write such a specification, because:
.PP
.IP "\(bu" 2
it helps the administrator to know which keys exist
.IP "\(bu" 2
it documents the keys (including lookup behaviour and default value)
.IP "\(bu" 2
and many more advantages to come in future releases\&.\&.
.PP
.PP
For a tutorial how to actually elektrify an application and for more background to Elektra, \fBhttps:\fP//github\&.com/ElektraInitiative/libelektra/blob/master/doc/tutorials/application-integration\&.md 'read this document'\&.
.PP
For a full list of proposed and implemented meta-data, \fBhttps:\fP//github\&.com/ElektraInitiative/libelektra/blob/master/doc/NAMESPACES\&.md 'read this document'\&.
.PP
.SS "Simplification in the merging framework"
.PP
As it turned out the concept of very granular merge strategies was hard to understand for users of the three-way merging framework that emerged in the last year's GSoC\&. While this granularity is desirable for flexibility, we additionally wanted something easy to use\&. For that reason merge configurations were introduced\&. These are simply preconfigured configurations for a merger that arrange required strategies for the most common merging scenarios\&. Especially they make sure that meta merging is handled correctly\&.
.PP
Have a look at the changes in the example \fCsrc/libtools/examples/merging\&.cpp\fP for an glimpse of the simplifications\&.
.PP
A big thanks to Felix Berlakovich!
.PP
The header files will be installed to /usr/include/elektra/merging, but they are subject to be changed in the future (e\&.g\&. as they did in this release)\&.
.PP
From the merging improvements some minor incompatibility happened in \fCkdb import\fP\&. Not all merging strategies that worked in 0\&.8\&.10 work anymore\&. Luckily, now its much simpler to choose the strategies\&.
.PP
.SS "API"
.PP
The main API kdb\&.h has two added lines\&. First a new method was added: 
.PP
.nf
ssize_t keyAddName(Key *key, const char *addName);

.fi
.PP
.PP
This method is already used heavily in many parts\&. Contrary to \fCkeySetBaseName\fP and \fCkeyAddBaseName\fP it allows us to extend the path with more than one Element at once, i\&.e\&. \fC/\fP are not escaped\&.
.PP
The other new line is the new enum value \fCKEY_FLAGS\fP\&. This feature allows bindings to use any flags in keyNew without actually building up variable argument lists\&. (Thanks to Manuel Mausz)
.PP
As always, API+ABI is stable and compatible\&.
.PP
.SS "Proposed"
.PP
Many new functions are proposed and can be found in \fCthe doxygen docu\fP and in \fCkdbproposal\&.h\fP\&.
.PP
Noteworthy is the method \fCkeyGetNamespace\fP which allows us to query all namespaces\&. Since this release we changed every occurrence of namespaces (except documentation) with switch-statements around \fCkeyGetNamespace\fP\&. This allows us to add new more namespaces more easily\&. (Although its currently not planned to add further namespaces\&.)
.PP
Finally, a bunch of new lookup options were added, which might not be useful for the public API (they allow us to disable the specification-aware features mentioned in the beginning)\&.
.PP
.SS "Obsolete and removed concepts"
.PP
.SS "umount"
.PP
The concept that backends have a name (other than their mountpoint) is now gone\&. Backends will simply be named with their escaped mountpath below system/elektra/mountpoints without any confusing additional name\&.
.PP
Unmounting still works with the mountpath\&.
.PP
Removing this concept makes Elektra easier to understand and it also removes some bugs\&. E\&.g\&. having mountpoints which do not differ except having a \fC_\fP instead of a \fC/\fP would have caused problems with the automatic name generation of Elektra 0\&.8\&.10\&.
.PP
Old mountpoints need to be removed with their 0\&.8\&.10 name (\fC_\fP instead of \fC/\fP)\&.
.PP
.SS "directory keys"
.PP
Additionally, the so called directory keys were also removed\&. Elektra was and still is completely key/value based\&. The \fC/\fP separator is only used for mountpoints\&.
.PP
.SS "fstab"
.PP
The plugin fstab is also improved: Slashes in mountpoints are escaped properly with the internal escaping engine of \fBkeyAddBaseName()\fP (i\&.e\&. without any problematic \fC/\fP replacements)\&.
.PP
.SS "dirname"
.PP
getDirName() was removed from C++, gi-lua, gi-python2, gi-python3, swig-lua, swig-python2 and swig-python3\&. It was never present in C and did not fit well with \fBkeyBaseName()\fP (which returns an unescaped name, which is not possible for the dirname)\&. (Thanks to Manuel Mausz)
.PP
.SS "invalid parent names"
.PP
While empty (=invalid) names are still accepted as parentName to \fCkdbGet\fP and \fCkdbSet\fP for compatibility reasons, but the parentKey 
.PP
.nf
Key *parentKey = keyNew("/", KEY_END);

.fi
.PP
.PP
should be used instead (if you want to get or store everything)\&. They have identical behaviour, except that invalid names (that cannot be distinguished from empty names) will produce a warning\&. In the next major version invalid parentNames will produce an error\&.
.PP
.SS "KDB Behaviour"
.PP
It is now enforced that before a \fBkdbSet()\fP on a specific path a \fBkdbGet()\fP on that path needs to be done\&. This was always documented that way and is the only way to correctly detect conflicts, updates and missing configuration files\&. Error #107 will be reported on violations\&.
.PP
Additionally, the handling with missing files was improved\&. Empty keysets for a mountpoint now will remove a file\&. Such an empty file is always up-to-date\&. Removing files has the same atomicity guarantees as other operations\&.
.PP
The concurrency behaviour is at a very high level: as expected many processes with many threads can each concurrently write to the key database, without any inconsistent states: This is noted here because Elektra works on standard configuration files without any guarding processes\&.
.PP
Filesystem problems, e\&.g\&. permission, now always lead to the same errors (#9, #75, #109, #110), regardless of the storage plugin\&.
.PP
.SS "Qt-Gui 0\&.0\&.6"
.PP
Raffael Pancheri was very busy and did a lot of stabilizing work:
.PP
.IP "\(bu" 2
Added markdown converter functionality for plugin documentation
.IP "\(bu" 2
Integrated help (Whats this?)
.IP "\(bu" 2
Added credits to other authors
.IP "\(bu" 2
do not show storage/resolver plugins if a plugin of that kind has been selected
.IP "\(bu" 2
added menu to newkey toolbar button to allow new array entries
.IP "\(bu" 2
added option to include a configuration keyset when adding a plugin
.IP "\(bu" 2
show included keys when creating the plugin configuration
.IP "\(bu" 2
Added all storageplugins to namefilters
.IP "\(bu" 2
Reimplement ErrorDialog
.IP "\(bu" 2
Added undo/redo of all commands and correctly update the view
.IP "\(bu" 2
modified ToolTip size
.IP "\(bu" 2
Color animation on search results
.IP "\(bu" 2
Refactored Buttons to accept shortcuts
.IP "\(bu" 2
Updated Translations
.IP "\(bu" 2
Colors are now customizeable
.IP "\(bu" 2
Many small fixes
.PP
.PP
The gui is already used and the remaining small bugs (see github) are going to be fixed soon\&. One of the highlights is undo for nearly every action, so nothing prevents you from trying it out!
.PP
A huge thanks to Raffael Pancheri for his contributions\&. His thesis can be found at \fChere\fP\&.
.PP
.SS "Bug fixing"
.PP
.IP "\(bu" 2
fix issues with escaped backslashes in front of slashes
.IP "\(bu" 2
atomic commits across namespaces work again
.IP "\(bu" 2
memleak on ReadFile error in ni plugin
.IP "\(bu" 2
\fCkdb getmeta\fP reports errorcode if key, but no meta was found
.IP "\(bu" 2
\fCksLookup\fP now will also work if a key of the keyset is used as search-key (aliasing problem fixed by dup() on namelock)
.IP "\(bu" 2
resolver regex does not match to wrongly written plugins
.IP "\(bu" 2
jna plugin is now named libelektra-0\&.8\&.11\&.jar, with proper symlink to current version, for every CMake version
.IP "\(bu" 2
fix bashism ($RANDOM)
.IP "\(bu" 2
new keys are correctly renamed, fixes OpenICC (thanks to Felix Berlakovich)
.IP "\(bu" 2
comments in host keys are correctly restored (thanks to Felix Berlakovich)
.IP "\(bu" 2
output stream in type checking is no longer locale dependent (thanks to Manuel Mausz)
.IP "\(bu" 2
cmake uninstall works again
.IP "\(bu" 2
simplify CMAKE_DL_LIBS (thanks to Manuel Mausz)
.PP
.PP
.SS "Further gems"
.PP
.IP "\(bu" 2
Examples were improved, added (e\&.g\&. cascading, namespace) and included in \fCDoxygen docu\fP\&.
.IP "\(bu" 2
\fCMETADATA specification\fP was nearly completely rewritten (thanks to Felix Berlakovich)
.IP "\(bu" 2
benchmarks were greatly enhanced (runtime+heap profiling), and some important performance improvements were done
.IP "\(bu" 2
All plugins now use the cmake function \fCadd_plugin\fP (thanks to Ian Donnelly for most of the work)
.IP "\(bu" 2
data directory (keysets as C-files) is now shared between different kinds of test suites\&.
.IP "\(bu" 2
many more tests were added, e\&.g\&. distribution tests, KDB API tests; and allocation tests were readded
.IP "\(bu" 2
now all kdb commands accept cascading keys\&.
.IP "\(bu" 2
More compiler warning-flags are added and many warnings are fixed
.IP "\(bu" 2
cleanup of old unused \fCkeyName\fP methods
.IP "\(bu" 2
The key \fCsystem/elektra/mountpoints\fP itself was always created and a left-over on a freshly installed system after the unit tests run the first time\&. The physical presence of the key is now irrelevant and it won't be created automatically\&.
.IP "\(bu" 2
Bash completion was greatly improved (thanks to Manuel Mausz)
.IP "\(bu" 2
Configure scripts were refactored and are now much shorter (thanks to Manuel Mausz)
.IP "\(bu" 2
New Debian build agents were added that are magnitutes faster than the old ones (a big thanks to Manuel Mausz)
.IP "\(bu" 2
Many KDB tests, written in C, lua and python were added (thanks to Manuel Mausz)
.IP "\(bu" 2
SWIG3 is preferred when available
.IP "\(bu" 2
add the plugin counter that counts how often the methods of a plugin are called
.IP "\(bu" 2
\fCkdb list-tools\fP is now advertised in \fCkdb --help\fP
.IP "\(bu" 2
Mac OS X support was greatly improved, thanks to Peter Nirschl and Kai-Uwe Behrmann\&. The feature rich resolver, now also works for Mac OS X\&. wresolver is now only needed for mingw\&.
.IP "\(bu" 2
Elektra still compiles with gcc (also mingw variants), icc and clang\&.
.PP
.PP
.SS "Further Notes"
.PP
With 471 files changed, 27978 insertions(+), 11512 deletions(-) this release is huge\&. With 773 commits over four month much more changes happened which did not find their place in these release notes, even though the notes are much less detailed than usual\&.
.PP
Thanks for all contributions that are not enlisted here!
.PP
For any questions and comments, please contact the \fCMailing List\fP or elektra@markus-raab.org\&.
.PP
.SS "Get It!"
.PP
You can download the release from \fChere\fP
.PP
.IP "\(bu" 2
name: elektra-0\&.8\&.11\&.tar\&.gz
.IP "\(bu" 2
size: 2022129
.IP "\(bu" 2
md5sum: c53a8151aab760851842d745e904a4f8
.IP "\(bu" 2
sha1: d7929d17d1a6529089d156f1910d87f678b84998
.IP "\(bu" 2
sha256: c20fefcfba62cc906228f9b55d1f411ef8f884ff9d75774a0dd4f8eb8f5b48f6
.PP
.PP
This release tarball now is also available \fCsigned by me using gpg\fP
.PP
already built API-Docu can be found \fChere\fP
.PP
.SS "Stay tuned!"
.PP
Subscribe to the \fCnew RSS feed\fP to always get the release notifications\&.
.PP
\fCPermalink to this NEWS entry\fP
.PP
For more information, see http://www.libelektra.org
.PP
Best regards, Markus
.PP
.SH "0\&.8\&.10 Release"
.PP
.PP
.IP "\(bu" 2
guid: 6ce57ecf-420a-4a31-821e-1c5fe5532eb4
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Tue, 02 Dec 2014 18:37:51 +0100
.PP
.PP
Hello,
.PP
we are delighted to announce our latest feature release providing major updates in:
.PP
.IP "\(bu" 2
compatibility with standards,
.IP "\(bu" 2
tooling,
.IP "\(bu" 2
plugins (hosts, rename),
.IP "\(bu" 2
Qt-Gui and
.IP "\(bu" 2
a new Java binding
.PP
.PP
.SS "XDG Compatibility"
.PP
Elektra now is \fCfully XDG 0\&.8\fP compliant\&. Following changes were necessary:
.PP
.IP "\(bu" 2
newly created configuration files for user/ now have the permissions 0600
.IP "\(bu" 2
newly created configuration directories for user/ now have the permissions 0700
.IP "\(bu" 2
existing configuration files will retain their permissions\&.
.IP "\(bu" 2
The default path to store user configuration is now ~/\&.config
.IP "\(bu" 2
A new resolver variant x (for user and system) is introduced
.IP "  \(bu" 4
implements handling of XDG environment variables
.IP "  \(bu" 4
ignores empty dirs and absolute pathes in envvar
.PP

.IP "\(bu" 2
add new shell based test suite for (xdg)-resolver
.PP
.PP
For example, we could use resolver_fm_xhp_x: 
.PP
.nf
kdb mount --resolver=resolver_fm_xhp_x file.dump /example dump
kdb file user/example
kdb file system/example

.fi
.PP
.PP
Will show you that for both user+system the resolver respects XDG environment variables, e\&.g\&. above lines will print: 
.PP
.nf
/home/m/.config/file.dump
/etc/xdg/file.dump

.fi
.PP
.PP
Of course, any attempts to get and set keys below user/example and system/example will also be in these files\&.
.PP
The letters after _ describe the variant of the resolver:
.PP
.IP "\(bu" 2
f \&.\&. file based locking
.IP "\(bu" 2
m \&.\&. mutex based locking (for multiple KDB per process)
.IP "\(bu" 2
for user configuration (after next _)
.IP "  \(bu" 4
x \&.\&. first check XDG_CONFIG_HOME environment
.IP "  \(bu" 4
h \&.\&. then check HOME environment
.IP "  \(bu" 4
p \&.\&. then fall back to passwd
.PP

.IP "\(bu" 2
for system configuration (after next _)
.IP "  \(bu" 4
x \&.\&. check all pathes in XDG_CONFIG_DIRS and falls back to /etc/xdg
.PP

.PP
.PP
A lot of such resolver variants are added when -DPLUGINS=ALL is used\&. Of course you can create new variants with different behaviour by adding them to PLUGINS\&.
.PP
To make your application (that uses Elektra) XDG aware, you have nothing to do: you get it to free\&. Make sure to always use cascading lookup\&. Additionally, an XDG conforming application should not write system/ keys\&.
.PP
.SS "OpenICC Compatibility"
.PP
Based on that, Elektra now also implements the draft for \fCthe OpenICC specification\fP\&.
.PP
The mount command looks like quite complicated, but it consists of simple parts: 
.PP
.nf
kdb mount --resolver=resolver_fm_xhp_x \
  color/settings/openicc-devices.json /org/freedesktop/openicc \
  yajl rename cut=org/freedesktop/openicc

.fi
.PP
.PP
We already know the first two lines: we use the XDG resolver already introduced above\&. Only the file name and the path where it should be mounted differs\&.
.PP
The plugin yajl is a storage plugin that reads/writes json\&. The plugin rename was the missing link to support OpenICC (thanks to Felix Berlakovich for closing this gap)\&. It is needed, because every OpenICC file starts like this: 
.PP
.nf
{ "org": { "freedesktop": { "openicc": {

.fi
.PP
.PP
Because the backend is mounted at /org/freedesktop/openicc, it would lead to keys below /org/freedesktop/openicc/org/freedesktop/openicc which we obviously do not want\&. So we simply get rid of the common prefix by cutting it out using the rename plugin\&.
.PP
Of course this renaming functionality can be used in every situation and is not limited to OpenICC\&.
.PP
.SS "Tools"
.PP
A large number of old and new tools were added, mostly for convenience e\&.g\&.: 
.PP
.nf
kdb mount-openicc

.fi
.PP
.PP
saves you from writing the long mount command we had in the previous section\&.
.PP
To get a list of all tools that are installed, now the command (which is also an external tool and as such currently not displayed in kdb --help): 
.PP
.nf
kdb list-tools

.fi
.PP
.PP
is available\&. Do not be surprised: on typical installations this will be a large list\&. You can run each of these tools by using kdb <command>\&. Most of the tools, however, are part of the test suite, which you can run using: 
.PP
.nf
kdb run_all

.fi
.PP
.PP
Other tools are 'old friends', e\&.g\&. convert-fstab written in 2006 by Avi Alkalay still works: 
.PP
.nf
kdb convert-fstab | kdb import system/filesystems xmltool

.fi
.PP
.PP
It will parse your /etc/fstab and generate a XML\&. This XML then can be imported\&. Other convert tools directly produce kdb commands, though\&.
.PP
kdb now uses KDB itself for many commands:
.PP
.IP "\(bu" 2
/sw/kdb/current/resolver \&.\&. You always want a different default resolver than that was compiled in as default when mounting backends?
.IP "\(bu" 2
/sw/kdb/current/format \&.\&. If you are annoyed by the default format dump format for import/export\&.
.IP "\(bu" 2
/sw/kdb/current/plugins \&.\&. If you always forget to add some plugins when mounting something\&.
.PP
.PP
By default the plugin 'sync' is added automatically (it makes sure that fsync is executed on config files, the directory is already done by the resolver), you should not remove it from /sw/kdb/current/plugins otherwise the next mount command will not add it\&. To preserve it use a space separated list, e\&.g\&.: 
.PP
.nf
kdb set user/sw/kdb/current/plugins "sync syslog"

.fi
.PP
.PP
Last, but not least, kdb get now supports cascading get: 
.PP
.nf
kdb get /sw/kdb/current/plugins

.fi
.PP
.PP
This feature allows you to see the configuration exactly as seen by the application\&.
.PP
Other options:
.PP
.IP "\(bu" 2
-123 options for hiding nth column in \fCkdb mount\fP
.IP "\(bu" 2
hide warnings during script usage of \fCkdb mount\fP
.IP "\(bu" 2
-0 option accepted in some tools (null termination)
.IP "\(bu" 2
Mount got a new -c option for backend configuration\&. For example -c cut=org/freedesktop/openicc would be the parameter cut for all plugins\&. Have a look at #146 if you want to use it\&.
.PP
.PP
.SS "Compatibility"
.PP
The core API (kdb\&.h), as always, stayed API/ABI compatible\&. The only changes in kdb\&.h is the addition of KEY_CASCADING_NAME and KEY_META_NAME\&. So applications compiled against 0\&.8\&.10 and using these constants, will not work with Elektra 0\&.8\&.9\&.
.PP
The constants allow us to create following kinds of keys:
.PP
.IP "\(bu" 2
empty names: this was always possible, because invalid names (including empty names) did not cause keyNew to abort
.IP "\(bu" 2
meta names: this is a new feature that allows us to compare key names with meta keys
.IP "\(bu" 2
cascading names: names starting with / have the special meaning that they do not specify which namespace they have\&. When such names are used for
.IP "  \(bu" 4
\fBkdbGet()\fP and \fBkdbSet()\fP keys are retrieved from all namespaces
.IP "  \(bu" 4
\fBksLookup()\fP keys are searched in all namespaces
.IP "  \(bu" 4
\fBksLookupByName()\fP is now just a wrapper for \fBksLookup()\fP\&. The method does not do much except creating a key and passing them to \fBksLookup()\fP\&.
.PP

.PP
.PP
Usage in C is: 
.PP
.nf
Key *c = keyNew("/org/freedesktop", KEY_CASCADING_NAME, KEY_END);
Key *m = keyNew("comment/#0", KEY_META_NAME, KEY_END);

.fi
.PP
.PP
The same functionality exists, of course, in available in all bindings, too\&.
.PP
Changes in non-core API are:
.PP
.IP "\(bu" 2
xmltool now does not output default (unchanged) uid,gid and mode
.IP "\(bu" 2
ksLookupBySpec from kdbproposal\&.h was removed, is now integrated into ksLookup
.IP "\(bu" 2
extension keyNameGetNamespace was removed
.IP "\(bu" 2
the hosts comment format has changed
.IP "\(bu" 2
the default resolver has changed (uses passwd)
.IP "\(bu" 2
\fBkdb::tools::Backend::Backend\fP constructor, tryPlugin and addPlugin have changed:
.IP "  \(bu" 4
mountname is now automatically calculated
.IP "  \(bu" 4
addPlugin allows us to add a KeySet to validate plugins with different contracts correctly
.PP

.IP "\(bu" 2
C++ binding now throws std::bad_alloc on allocation problems (and not InvalidName)
.PP
.PP
.SS "CMake"
.PP
It is now possible to remove a plugin/binding/tools by prefixing a name with '-'\&. The new '-element' syntax is accepted by TOOLS, BINDINGS and PLUGINS\&. It is very handy in combination with ALL, e\&.g\&.: 
.PP
.nf
-DPLUGINS="ALL;-xmltool"

.fi
.PP
.PP
will include all plugins except xmltool\&.
.PP
.SS "Improved comments"
.PP
Comment preserving was improved a lot\&. Especially, the hosts plugin was rewritten completely\&. Now multiple different comment styles can be intermixed without losing information\&. E\&.g\&. some INI formats support both ; and # for comments\&. With the new comments it is possible to preserve that information and even better: applications can iterate over that information (meta data)\&.
.PP
To mount the new hosts plugin use (if you already have mounted it, you have nothing to do): 
.PP
.nf
kdb mount /etc/hosts system/hosts hosts

.fi
.PP
.PP
The hosts plugin now seperates from ipv4 and ipv6 which makes the host names canonical again, e\&.g\&.: 
.PP
.nf
kdb get system/hosts/ipv4/localhost
kdb get system/hosts/ipv6/localhost

.fi
.PP
.PP
To access the inline-comment, use: 
.PP
.nf
kdb getmeta system/hosts/ipv4/localhost "comment/#0"

.fi
.PP
.PP
For other meta information, see: 
.PP
.nf
kdb lsmeta system/hosts/ipv4/localhost 

.fi
.PP
.PP
Additionally, a small API for specific meta-data operations emerges\&. These operations will be moved to a separate library and will not stay in Elektra's core library\&.
.PP
.SS "Proposal"
.PP
.IP "\(bu" 2
lookup options:
.IP "  \(bu" 4
KDB_O_SPEC uses the lookup key as specification
.IP "  \(bu" 4
KDB_O_CREATE creates a key if it could not be found
.PP

.IP "\(bu" 2
elektraKeyGetMetaKeySet creates a KeySet from meta data
.IP "\(bu" 2
elektraKsFilter allows us to filter a KeySet arbitrarily (not only keyIsBelow in case of ksCut)\&. It reintroduces more functional programming\&.
.IP "\(bu" 2
keyGetNamespace was reintroduced\&. In one of the next versions of Elektra we will introduce new namespaces\&. keyGetNamespace allows the compiler to output a warning when some namespaces are not handled in your C/C++ code\&.
.PP
.PP
.SS "Java binding"
.PP
Elektra now fully supports applications written in Java and also Plugins written in the same language\&.
.PP
The \fCnew binding was developed using jna\&.\fP For the \fCplugin interface JNI\fP was used\&. We developed already \fCsome plugins\fP\&.
.PP
.SS "Qt-Gui"
.PP
Raffael Pancheri released the version 0\&.0\&.2 of the Qt-Gui:
.PP
.IP "\(bu" 2
added Backend Wizard for mounting
.IP "\(bu" 2
user can hover over TreeView items and quickly see keyname, keyvalue and metakeys
.IP "\(bu" 2
it is now easily possible to create and edit arrays
.IP "\(bu" 2
added header to MetaArea for better clarity
.IP "\(bu" 2
many small layout and view update fixes
.PP
.PP
.SS "Further stuff and small fixes"
.PP
.IP "\(bu" 2
Two new error/warnings information: mountpoint and configfile\&. It is added automatically and all tools will print it\&.
.IP "\(bu" 2
C++ I/O for key(s) now allows null terminator next to new-line terminator
.IP "\(bu" 2
fix error plugin: now use on_open/trigger_warnings to be consistent
.IP "\(bu" 2
fix metaset: now correctly append new key
.IP "\(bu" 2
arrays are also available when compiled with mingw (but tests still have to be excluded for successful compilation)
.IP "\(bu" 2
fix #136
.IP "\(bu" 2
fix long help text in \fCkdb check\fP
.IP "\(bu" 2
signed release tags are now used
.PP
.PP
.SS "Get It!"
.PP
You can download the release from \fChere\fP
.PP
.IP "\(bu" 2
size: 1915277
.IP "\(bu" 2
md5sum: 2b16a4b555bc187562a0b38919d822a1
.IP "\(bu" 2
sha1: 08b1d0139fc5eb0d03c52408478e68b91b1825dc
.IP "\(bu" 2
sha256: 526e2ed61e87d89966eb36ddad78d8139b976e01ce18aab340d8a1df47132355
.PP
.PP
already built API-Docu can be found \fChere\fP
.PP
.SS "Stay tuned!"
.PP
Subscribe to the \fCnew RSS feed\fP to always get the release notifications\&.
.PP
\fCPermalink to this NEWS entry\fP
.PP
For more information, see http://www.libelektra.org
.PP
Best regards, Markus
.PP
.SH "0\&.8\&.9 Release"
.PP
.PP
.IP "\(bu" 2
guid: 38640673-3e07-4cff-9647-f6bdd89b1b08
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Tue, 04 Nov 2014 10:48:14 +0100
.PP
.PP
Again we managed to do an amazing feature release in just two month\&. In 416 commits we modified 393 files with 23462 insertions(+) and 9046 deletions(-)\&.
.PP
.SS "Most awaited"
.PP
The most awaited feature in this release is certainly the \fIqt-gui\fP developed by Raffael Pancheri\&. It includes a rich feature set including searching, unmounting, importing and exporting\&. A lot of functionality is quite stable now, even though its version is 0\&.0\&.1 alpha\&. If you find any bugs or want to give general feedback, feel free to use the issue tracker of the Elektra project\&. A screenshot can be found \fChere\fP To compile it (together with Elektra), see the README \fChere\fP
.PP
Manuel Mausz also has been very active and developed glib+gi bindings\&. These bindings make Elektra more friendly to the glib/gtk/gnome world\&. Using the gobject introspection python3 and lua bindings were developed\&. Additionally he got rid of all clang warnings\&.
.PP
Felix Berlakovich also made progress: \fCthe ini plugin\fP now supports multiline and which can be dynamically turned on and off, i\&.e\&. during mounting (thanks to Felix)
.PP
Last, but not least, Kai-Uwe ported Elektra to Windows7\&. MinGW is now one more supported compiler (tested on build-server, see later)\&. Astonishingly, it was only little effort necessary: Basically we only needed a new implementation of the resolver, which is now called \fIwresolver\fP\&. Different from the \fIresolver\fP it lacks the sophisticated multi-process and multi-thread atomicity properties\&. On the plus side we now have a resolver that is very easy to study and understand and still works as file resolver (\fInoresolver\fP does not)\&.
.PP
.SS "Interfaces"
.PP
ABI/API of the C-API is still completely stable even though under the hood a lot was changed\&. All testcases compiled against the previous version still run against Elektra 0\&.8\&.9\&.
.PP
This is, however, not the case for libtools\&. For MinGW porting it was necessary to rename an enum related to merging because it conflicted with an already defined MACRO\&.
.PP
For maintainers also some changes are necessary\&. For MinGW and to actually use the flexibility of the new resolver variants two new CMake Variables are introduced: KDB_DEFAULT_RESOLVER and KDB_DEFAULT_STORAGE\&.
.PP
More importantly for maintainers the CMake variables regarding SWIG bindings are now abandoned in favour to the new variable BINDINGS that works like PLUGINS and TOOLS\&. Just start with 
.PP
.nf
    -DBINDINGS=ALL

.fi
.PP
.PP
and CMake should remove the bindings that have missing dependencies on your system\&. Remember that glib and gi (i\&.e\&. \fIgi_python3\fP and \fIgi_lua\fP) bindings were introduced, too\&. Additionally, the \fIcpp\fP binding can now be deactivated if not added to BINDINGS\&.
.PP
Finally, the \fIgen\fP tool added a Python package called \fCsupport\fP\&.
.PP
.SS "Other Bits"
.PP
A proof of concept storage plugin \fCregexstore\fP was added\&. It allows one to capture individual configuration options within an otherwise not understood configuration file (e\&.g\&. for vimrc or emacs where the configuration file may contain programming constructs)\&.
.PP
Most tests now also work with the BUILD_SHARED variant (from our knowledge all would work now, but some are still excluded if BUILD_FULL and BUILD_STATIC is disabled\&. Please report issues if you want to use uncommon CMake combinations)\&.
.PP
A small but very important step towards specifying configuration files is the new proposed API method ksLookupBySpec (and ksLookup implementing cascading search)\&. It introduces a \fClogical view\fP of configuration that in difference to the \fCphysical view\fP of configuration does not have namespaces, but everything is below the root '/'\&. Additionally, contextual values now allow to be compile-time configured using C++-Policies\&. These are small puzzle pieces that will fit into a greater picture at a later time\&.
.PP
A (data) race detection tool was implemented\&. Using it a configurable number of processes and threads it tries to \fBkdbSet()\fP a different configuration at (nearly) the same time\&.
.PP
With this tool the resolver could be greatly be improved (again)\&. It now uses stat with nanosecond precision that will be updated for every successful \fBkdbSet()\fP\&. Even if the configuration file was modified manually (not using Elektra) the next \fBkdbSet()\fP then is much more likely to fail\&. Additionally a recursive mutex now protects the file locking mechanism\&.
.PP
The build server now additionally has following build jobs:
.PP
.IP "\(bu" 2
\fCi386 build:\fP: We had an i386 regression, because none of the developers seems to use i386 anymore\&.
.IP "\(bu" 2
\fCConfigure Debian Script\fP Calls the scripts/configure-debian(-wheezy)\&.
.IP "\(bu" 2
\fCLocal Installation:\fP We had an regression that local installation was not possible because of a bash completion file installed to /etc\&. This build tests if it is possible to install Elektra in your home directory (and calls kdb run_all afterwards)
.IP "\(bu" 2
\fCTest bindings:\fP Compiles and tests ALL bindings\&.
.IP "\(bu" 2
\fCMingw:\fP Compiles Elektra using mingw\&.
.PP
.PP
Many more examples were written and are used within doxygen\&. Most snippets now can also be found in compilable files:
.PP
.IP "\(bu" 2
\fCkeyNew examples\fP
.IP "\(bu" 2
\fCkeyCopy examples\fP
.IP "\(bu" 2
\fCC++ deep dup\fP
.IP "\(bu" 2
\fCHow to put Key in different data structures\fP
.IP "\(bu" 2
\fCMount some config files using augeas\fP
.IP "\(bu" 2
\fCMount system information\fP
.PP
.PP
Most plugins now internally use the same CMake function \fCadd_plugin\fP which makes plugin handling more consistent\&.
.PP
Felix converted the METADATA spec to ini files and added a proposal how comments can be improved\&.
.PP
.SS "Refactoring:"
.PP
.IP "\(bu" 2
reuse of utilities in gen code generator
.IP "\(bu" 2
the gen support library is now in its own package (\fCsupport\fP)
.IP "\(bu" 2
refactor array handling
.IP "\(bu" 2
internal comparision functions (keyCompareByName)
.PP
.PP
.SS "Optimization:"
.PP
.IP "\(bu" 2
lookupByName does not need to allocate two keys
.IP "\(bu" 2
lookups in generated code
.IP "\(bu" 2
prefer to use allocation on stack
.PP
.PP
.SS "Fixes:"
.PP
.IP "\(bu" 2
disable cast that segfaults on i386 (only testing code was affected)
.IP "\(bu" 2
fix keyAddBaseName in xmltool and testing code
.IP "\(bu" 2
support non-system installation (e\&.g\&. in home directory)
.IP "\(bu" 2
rewrote test cases to use succeed_if_same to avoid crashes on null pointers
.IP "\(bu" 2
allow to use python 2\&.6 for kdb gen
.IP "\(bu" 2
improve exception messages
.IP "\(bu" 2
use memcasecmp (fix lookup ignoring case)
.IP "\(bu" 2
fix memory leaks (ini)
.IP "\(bu" 2
text messages for some warnings/errors
.IP "\(bu" 2
fix many issues regarding CMake, more variants of setting CMake options are now allowed\&.
.IP "\(bu" 2
cmake policies fixes allow us to use cmake version > 3
.PP
.PP
.SS "Get It!"
.PP
You can download the release from \fChere\fP
.PP
.IP "\(bu" 2
size: 1936524
.IP "\(bu" 2
md5sum: 001c4ec67229046509a0cb9eda223dc6
.IP "\(bu" 2
sha1: 79ea9b83c08ed4c347ed0100b5e0e2d3309b9d04
.IP "\(bu" 2
sha256: e0895bba28a27fb37f36f59ef77c95235f3a9c54fb71aa6f648566774d276568
.PP
.PP
already built API-Docu can be found \fChere\fP
.PP
For more information, see http://www.libelektra.org
.PP
Best regards, Markus
.PP
.SH "0\&.8\&.8 Release"
.PP
.PP
.IP "\(bu" 2
guid: eca69e19-5ddb-438c-ac06-57c20b1a9160
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Tue, 02 Sep 2014 17:31:42 +0200
.PP
.PP
In this release we changed 578 files in 473 commits (68596 insertions(+), 59260 deletions(-) compared to Elektra 0\&.8\&.7)\&. We assume thats the largest change set for any of Elektra's releases up to now\&. It happened only within a bit more than a month up (0\&.8\&.7 was released 28\&.07\&.2014)\&.
.PP
.SS "New features"
.PP
GSoC finished successfully (thanks Ian and Felix) See http://community.libelektra.org/wp for the latest results\&. So Elektra now has a 3-way merging framework that is superior to text-based merging in many scenarios (e\&.g\&. moving configuration options within a file or with in-line comments) iff a storage plugin creates key names that are not only line numbers\&. We love to get Feedback!
.PP
Writing plugins is now even more comfortable\&. A plugin writer tutorial was written (thanks Ian): https://github.com/ElektraInitiative/libelektra/blob/master/doc/tutorials/plugins.md The documentation was completely reworked: http://doc.libelektra.org/api/0.8.7/html/group__plugin.html And two new macros allow printf formating for warnings and errors (ELEKTRA_ADD_WARNINGF and ELEKTRA_SET_ERRORF)\&.
.PP
The ini plugin was greatly improved (tested with samba configurations and added to ALL plugins) and the hosts plugin was rewritten to support ipv6 properly (thanks to Felix)\&.
.PP
The constants plugin was added and allows introspection of Elektra's cmake variables\&. Because such non-file based plugins (e\&.g\&. also uname) do not need resolving, the plugin noresolver was added\&. It supersedes the success plugin\&.
.PP
Elektra now allows one to correctly fsync its configuration files (sync plugin) and the folders where files are stored (resolver plugin)\&. Just make sure to add the 'sync' plugin using kdb mount\&. The resolver plugin now reads from passwd and no longer needs environment variables\&. Additionally, the resolver plugin was prepared to support other variants by so called compilation variants\&.
.PP
The error plugin now allows, next to list all possible errors, to provoke errors when opening plugins\&. We fixed some issues related to plugins having errors when they initialize themselves\&.
.PP
So following plugins were added: sync noresolver line ini constants Nearly all plugins now have a README\&.md for further information (thanks to Ian)\&. An overview of all plugin is on with links to them: https://github.com/ElektraInitiative/libelektra/blob/master/src/plugins/
.PP
The kdb tools were greatly improved (thanks to Felix):
.IP "\(bu" 2
added remount tool
.IP "\(bu" 2
umount now also accepts mountpath
.IP "\(bu" 2
mount allows one to specify different resolvers
.IP "\(bu" 2
import now can use merge strategies
.IP "\(bu" 2
check without arguments checks key database
.IP "\(bu" 2
mount is now more verbose when validation fails
.PP
.PP
New/improved scripts/make targets (note that scripts can be executed by kdb scriptname):
.IP "\(bu" 2
mounting, unmounting scripts were added
.IP "\(bu" 2
generate template for a new plugin was improved
.IP "\(bu" 2
configure-debian was added
.IP "\(bu" 2
added targets run_all and run_memcheck
.IP "\(bu" 2
bash completion file now installed
.IP "\(bu" 2
ucf integration
.IP "\(bu" 2
merging scripts were added for the usage with ucf
.IP "\(bu" 2
scripts doing internal checks on source of plugins
.PP
.PP
.SS "Compatibility"
.PP
This time we had to break compatibility\&. We did not change the ABI (your application still will be able to use Elektra 0\&.8\&.8) and we did not change the API (your application still will compile against Elektra)\&. We changed the third part of our interface: the semantic interface\&.
.PP
The problems were following: keyAddBaseName/keySetBaseName did something obvious when no special characters were in the baseName\&. But once there were, there are two different interpretations what it should do: 1\&.) add/set a basename, so escape characters that are not canonical in the basename 2\&.) add all parts of the name given (with slashes)
.PP
The methods were used in both ways, so it was obvious that something is very wrong\&. We decided that it should do what the name says, that is add/set a basename (variant 1)\&.
.PP
The variant 2, to add any name was added and is called \fBkeyAddName()\fP and added as proposal\&.
.PP
(Thank Felix for implementations and Manuel for investigations)
.PP
When keys are renamed after adding to a keyset is a bad thing because it destroys the order of the keyset\&. This is now avoided by keyLock\&. Use \fBkeyDup()\fP to get rid of such locks\&.
.PP
Another, even larger, change is also about ordering of keys in keysets\&. Elektra now internally has an null-terminated unescaped keyname\&. Ordering of keysets will always happen on this name\&. The \fBkeyCmp()\fP tool can be used to check this order\&. It works very efficiently with memcmp() and never gets confused by ASCII ordering of / (because / is 0 in the unescaped keyname)\&.
.PP
The syntax, semantics and conventions of key names is now documented in detail: http://doc.libelektra.org/api/0.8.8/html/group__keyname.html
.PP
\fBksNew()\fP does now return a keyset with a properly set cursor (ksRewind)\&.
.PP
Because its always possible that software relies on bugs the better way to deal with such a situation (as the \fBkeySetBaseName()\fP situation described above) is to provide the same function twice\&. Manuel said he will create a prototype to introduce symbol versioning in Elektra\&. With that, old customers would still receive the old behaviour, but people compiling against a new version would get the new behaviour\&. So in one of the next releases we will also avoid semantic interface changes when there is a valid use case for it (there is none if the program e\&.g\&. crashes)\&.
.PP
Symbol versioning also allows one to compile against old versions on purpose if you do not want the new behaviour\&.
.PP
We have prepared an ABI-test suite, that also checks behaviour, for that purpose, but we also improved testing in other parts:
.IP "\(bu" 2
(New Test strategy)[/doc/TESTING\&.md]
.IP "\(bu" 2
New resolver tests for conflicts (needs tty)
.PP
.PP
If you try to execute test_ks from 0\&.8\&.7 with libelektra 0\&.8\&.8 it will crash, but not because of any incompatibility, but because of strcmp in the test itself gets a null pointer\&. The pointer is now null, because ksNew correctly rewinds its internal cursor (see above)\&. Amusingly, it says on that line 94 in test_ks\&.c: // TODO: why is the cursor here?
.PP
.SS "API Proposals"
.PP
see above for more information:
.IP "\(bu" 2
keyAddName \&.\&. add key name without escaping, like keySetName
.IP "\(bu" 2
keyUnescapedName \&.\&. get access to null-separated unescaped name
.IP "\(bu" 2
keyLock \&.\&. to allow to secure keys against modifications
.PP
.PP
some new ideas:
.IP "\(bu" 2
keySetStringF \&.\&. printf format-style changing of the key string
.IP "\(bu" 2
elektraKeySetName \&.\&. to allow to set meta + cascading keys
.PP
.PP
\fBelektraArrayIncName()\fP now works correctly with empty arrays embedded in other arrays (yajl+line plugin)
.PP
elektraArrayValidateName() was also added, thanks to Felix\&.
.PP
These methods are declared in the file kdbproposal\&.h but do not guarantee any forms of compatibility (they might even be removed)\&.
.PP
.SS "Issues"
.PP
Many issues were resolved as you can see in github: https://github.com/ElektraInitiative/libelektra/issues Alone for the milestone 0\&.8\&.8 we closed 17 issues, including those mentioned in 'Compatibility'\&. Other issues (not all were tracked on github):
.PP
.IP "\(bu" 2
fix undefined errors in \fBkdbOpen()\fP or \fBkdbClose()\fP
.IP "\(bu" 2
Now Python 2+3 work in parallel
.IP "\(bu" 2
python2 interpreter is found correctly (also on Arch)
.IP "\(bu" 2
Sentinel now makes sure that you cannot forget KS_END to end ksNew
.IP "\(bu" 2
Fixes for architecture-specific problems by Pino
.IP "\(bu" 2
fix \&.pc file
.IP "\(bu" 2
fix compilation problem with KDB_MAX_PATH_LENGTH
.IP "\(bu" 2
tmpnam to mkstemp (security)
.IP "\(bu" 2
make test data naming consistent (thanks Pino)
.IP "\(bu" 2
use LIB_SUFFIX for TARGET_TOOL_EXEC_FOLDER thanks to Kai Uwe
.IP "\(bu" 2
Fix search for boost (thank Pino)
.PP
.PP
.SS "Other Stuff"
.PP
Thanks to Pino Toscano Elektra 0\&.8\&.7-4 is now available in Debian Testing: https://packages.debian.org/search?keywords=elektra So it is only a matter of time that other (debian-based) distributions will follow and replace the dusty Elektra 0\&.7\&.
.PP
Debian Continuous Integration http://ci.debian.net/packages/e/elektra (thanks Pino) greatly complement our tests running on http://build.libelektra.org:8080/
.PP
Elektra's buildserver also was improved:
.PP
.IP "\(bu" 2
now also compiles with icc
.IP "\(bu" 2
runs make run_memcheck
.IP "\(bu" 2
checks if plugins are added correctly in-source
.IP "\(bu" 2
runs ABI + behavioural tests
.PP
.PP
Raffael Pancheri now made a merge request for qt-gui https://github.com/ElektraInitiative/libelektra/pull/103/files in which copy, paste and delete of keys already works\&. It is, however, still work in progress\&.
.PP
Manuel Mausz made great progress in script-based Elektra plugins\&. He is also working on glib+gobject-introspection based bindings\&. He investigated some issues, e\&.g\&. a crash of the python binding which was only triggered if python3 is build with a specific flag/module combination, see: https://github.com/ElektraInitiative/libelektra/issues/25
.PP
.SS "Get It!"
.PP
You can download the release from:
.PP
http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.8.tar.gz
.PP
.IP "\(bu" 2
size: 1644441
.IP "\(bu" 2
md5sum: fe11c6704b0032bdde2d0c8fa5e1c7e3
.IP "\(bu" 2
sha1: 16e43c63cd6d62b9fce82cb0a33288c390e39d12
.IP "\(bu" 2
sha256: ae75873966f4b5b5300ef5e5de5816542af50f35809f602847136a8cb21104e2
.PP
.PP
already built API-Docu can be found here:
.PP
http://doc.libelektra.org/api/0.8.8/html/
.PP
Best regards, Markus 
