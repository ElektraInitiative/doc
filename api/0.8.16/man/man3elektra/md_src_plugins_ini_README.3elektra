.TH "md_src_plugins_ini_README" 3elektra "Fri Apr 29 2016" "Version 0.8.16" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_ini_README \- Plugin: ini 

.IP "\(bu" 2
infos = Information about ini plugin is in keys below
.IP "\(bu" 2
infos/author = Thomas Waser thomas.waser@libelektra.org Felix Berlakovich elektra@berlakovich.net
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = storage
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/placements = getstorage setstorage
.IP "\(bu" 2
infos/status = maintained unittest nodep libc 1000 configurable
.IP "\(bu" 2
infos/description =
.PP
.PP
This plugin allows read/write of INI files\&. INI files consist of simple key value pairs of the form 'key = value'\&. Additionally keys can be categorised into different sections\&. Sections must be enclosed in '[]', for example '[section]'\&. Each section is converted into a directory key (without value) and keys below the section are located below the section key\&. If the same section appears multiple times, the keys of all sections with the same name are merged together under the section key\&.
.PP
The plugin is feature rich and customizable (+1000 in status)
.PP
.SS "USAGE"
.PP
If you want to add an ini file to the global key database, simply use mount: 
.PP
.nf
kdb mount file.ini /example ini

.fi
.PP
.PP
Then you can modify the contents of the ini file using set: 
.PP
.nf
kdb set user/example/key value
kdb set user/example/section
kdb set user/example/section/key value

.fi
.PP
.PP
Find out which file you modified: 
.PP
.nf
kdb file user/example

.fi
.PP
.PP
.SS "COMMENTS"
.PP
The ini plugin supports the use of comments\&. Comment lines start with a ';' or a '#'\&. Adjacent comments are merged together (separated by '\\n') and are put into the comment metadata of the key following the comment\&. This can be either a section key or a normal key\&.
.PP
.SS "MULTILINE SUPPORT"
.PP
The ini plugin supports multiline ini values\&. Continuations of previous values have to start with whitespace characters\&.
.PP
For example consider the following ini file: 
.PP
.nf
            key1 = value1
            key2 = value2
                with continuation
                lines

.fi
.PP
.PP
This would result in a KeySet containing two keys\&. One key named \fCkey1\fP with the value \fCvalue1\fP and another key named \fCkey2\fP with the value \fCvalue2\\nwith continuation\\nlines\fP\&.
.PP
By default this feature is enabled\&.
.PP
.SS "ARRAY"
.PP
The ini plugin handles repeating keys by turning them into an elektra array when the \fCarray\fP config is set\&.
.PP
For example a ini file looking like: ``` [sec] a = 1 a = 2 a = 3 a = 4 ``` will be interpreted as ``` /sec /sec/a /sec/a/#0 /sec/a/#1 /sec/a/#2 /sec/a/#3
.PP
```
.PP
.SS "SECTION"
.PP
The ini plugin supports 3 different sectioning modes:
.PP
.IP "\(bu" 2
\fCNONE\fP sections wont be printed as \fC[Section]\fP but as part of the key name \fCsection/key\fP
.IP "\(bu" 2
\fCNULL\fP only binary keys will be printed as \fC[Section]\fP
.IP "\(bu" 2
\fCALWAYS\fP sections will be created automatically\&. This is the default setting\&.
.PP
.PP
.SS "MERGE SECTIONS"
.PP
The ini plugin supports merging duplicated section entries when the \fCmergesections\fP config is set\&. The keys will be appended to the first occurrence of the section key\&.
.PP
.SS "ORDERING"
.PP
The ini plugin preserves the order\&. Inserted subsections get appended to the corresponding parent section and new sections by name\&.
.PP
Example:
.PP
``` % cat test\&.ini
.PP
[Section1] key1 = val1 [Section3] key3 = val3
.PP
% kdb set system/test/Section1/Subsection1/subkey1 subval1 % kdb set system/test/Section2/key2 val2 % cat test\&.ini
.PP
[Section1] key1 = val1 [Section1/Subsection1] subkey1 = subval1 [Section2] key2 = val2 [Section3] key3 = val3
.PP
``` 
