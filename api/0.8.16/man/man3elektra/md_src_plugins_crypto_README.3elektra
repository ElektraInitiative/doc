.TH "md_src_plugins_crypto_README" 3elektra "Fri Apr 29 2016" "Version 0.8.16" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_crypto_README \- Plugin: crypto 

.IP "\(bu" 2
infos = Information about crypto plugin is in keys below
.IP "\(bu" 2
infos/author = Peter Nirschl peter.nirschl@gmail.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = filefilter
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = postgetstorage presetstorage #ifdef ELEKTRA_CRYPTO_API_GCRYPT {#src_plugins_crypto_README_md}
.IP "\(bu" 2
infos/status = experimental unfinished memleak discouraged #else
.IP "\(bu" 2
infos/status = experimental unfinished discouraged #endif
.IP "\(bu" 2
infos/metadata = crypto/encrypt
.IP "\(bu" 2
infos/description = Cryptographic operations
.PP
.PP
.SH "Crypto Plugin"
.PP
.PP
.SS "Introduction"
.PP
This plugin is a filter plugin allowing Elektra to encrypt values before they are persisted and to decrypt values after they have been read from a backend\&.
.PP
The idea is to provide protection of sensible values before they are persisted\&. This means the value of a key needs to be encrypted before it is written to a file or a database\&. It also needs to be decrypted whenever an admissible access (read) is being performed\&.
.PP
The users of Elektra should not be bothered too much with the internals of the cryptographic operations\&. Also the cryptographic keys must never be exposed to the outside of the crypto module\&.
.PP
The crypto plugin supports different libraries as provider for the cryptographic operations\&. At the moment the following crypto APIs are supported:
.PP
.IP "\(bu" 2
OpenSSL (libcrypto)
.IP "\(bu" 2
libgcrypt
.PP
.PP
.SS "Dependencies"
.PP
#ifdef ELEKTRA_CRYPTO_API_GCRYPT
.IP "\(bu" 2
\fClibgcrypt20-dev\fP or \fClibgcrypt-devel\fP #endif #ifdef ELEKTRA_CRYPTO_API_OPENSSL
.IP "\(bu" 2
\fClibssl-dev\fP or \fCopenssl-devel\fP #endif
.PP
.PP
.SS "How to compile"
.PP
The following compile variants are available:
.PP
.IP "1." 4
crypto_gcrypt
.IP "2." 4
crypto_openssl
.PP
.PP
Add 'crypto' and the variants, that you want (you can add one of them or all), to the \fCPLUGINS\fP variable in \fCCMakeCache\&.txt\fP and re-run \fCcmake\fP\&.
.PP
In order to add all compile variants you can add 'CRYPTO' to the \fCPLUGINS\fP variable\&.
.PP
An example \fCCMakeCache\&.txt\fP may contain the following variable: 
.PP
.nf
PLUGINS=crypto;crypto_gcrypt;crypto_openssl

.fi
.PP
.PP
or it may look like: 
.PP
.nf
PLUGINS=CRYPTO

.fi
.PP
.PP
.SS "Manual Library Setup"
.PP
If you have a custom built OpenSSL or libgcrypt on your system, you can tell CMake to use those by setting the following CMake variables\&.
.PP
For a custom OpenSSL location set:
.PP
.IP "\(bu" 2
\fIOPENSSL_INCLUDE_DIR\fP to the library's header files
.IP "\(bu" 2
\fIOPENSSL_LIBRARIES\fP to the library's binary file
.PP
.PP
For a custom libgcrypt location set:
.PP
.IP "\(bu" 2
\fILIBGCRYPT_INCLUDE_DIR\fP to the library's header files
.IP "\(bu" 2
\fILIBGCRYPT_LIBRARIES\fP to the library's binary file
.PP
.PP
.SS "Mac OS X"
.PP
Both variants of the plugin compile under Mac OS X 'El Capitan' (Version 10\&.11\&.3 (15D21))\&.
.PP
For the \fCcrypto_gcrypt\fP variant download and install either \fCMacPorts\fP or \fCHomebrew\fP\&. Use one of those tools to download and install \fClibgcrypt\fP\&. If you choose MacPorts, you can set the CMake variables like this:
.PP
.IP "\(bu" 2
\fILIBGCRYPT_INCLUDE_DIR\fP to \fC/opt/local/include/\fP
.IP "\(bu" 2
\fILIBGCRYPT_LIBRARIES\fP to \fC/opt/local/lib/libgcrypt\&.dylib\fP
.PP
.PP
The CMake command might look something like: 
.PP
.nf
    cmake -DLIBGCRYPT_INCLUDE_DIR="/opt/local/include/" -DLIBGCRYPT_LIBRARIES="/opt/local/lib/libgcrypt.dylib" -DPLUGINS="crypto;crypto_gcrypt;" /path_to_elektra_src

.fi
.PP
.PP
For the \fCcrypto_openssl\fP variant a custom-built OpenSSL library is neccessary as the MacPorts or Homebrew variants do not seem to work\&. Download the latest version of the OpenSSL library from the \fCproject homepage\fP and compile it\&. Copy the header files and the binary files to a location where all users can access them\&.
.PP
Set the CMake variables \fCOPENSSL_INCLUDE_DIR\fP and \fCOPENSSL_LIBRARIES\fP to your desired location\&.
.PP
.SS "Restrictions"
.PP
The crypto plugin will encrypt and decrypt values using AES-256 in CBC mode\&.
.PP
The key derivation is still WIP\&.
.PP
.SS "Planned Features"
.PP
.IP "\(bu" 2
Encryption of values
.IP "\(bu" 2
Decryption of values
.IP "\(bu" 2
Key derivation by metadata (password provided within a meta-key)
.IP "\(bu" 2
Key derivation by using a specified key-file (like the SSH client does)
.IP "\(bu" 2
Key derivation by utilizing the pgp-agent
.PP
.PP
The encryption and decryption of values is a straight forward process, once the key and IV are supplied\&. The key-derivation process in a library is a bit tricky\&.
.PP
The crypto plugin itself can hold configuration data about the order of the applied key derivation functions\&. For example, if a password is provided by a meta-key, it will be used, otherwise we look for a key file\&. If no key file has been configured, we try to trigger the PGP agent, etc\&.
.PP
The following example configuration illustrates this concept: 
.PP
.nf
    system/elektra/crypto/config/key-derivation/#0 = meta
    system/elektra/crypto/config/key-derivation/#1 = file
    system/elektra/crypto/config/key-derivation/#2 = agent
    system/elektra/crypto/config/key-file/path/#0 = ~/.elektra/id_aes
    system/elektra/crypto/config/key-file/path/#1 = /etc/elektra/id_aes

.fi
.PP
.PP
Only keys marked with a certain meta-key will be considered for encryption/decryption\&.
.PP
.SS "Examples"
.PP
.SS "Metadata based encyption"
.PP
You specify the parameters of the cryptographic operations in a KeySet together with the keys to be encrypted\&. The following parameters are required:
.PP
.IP "\(bu" 2
\fBKey\fP - the symmetric cryptographic key for encryption
.IP "\(bu" 2
\fBIV\fP - the initialization vector (IV) that is required by the CBC mode
.PP
.PP
The following keys are required for metadata based encryption: 
.PP
.nf
    /elektra/modules/crypto/key
    /elektra/modules/crypto/iv

.fi
.PP
.PP
You can use the following meta-key to mark a key for encryption: 
.PP
.nf
    crypto/encrypt

.fi
.PP
.PP
If this meta-key has a value with a string-length greater than 0 (\fCstrlen() > 0\fP) then the crypto-plugin will try to encrypt it\&. 
