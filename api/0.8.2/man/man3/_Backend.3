.TH "_Backend" 3 "Mon Jun 18 2012" "Version 0.8.2" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_Backend \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <kdbprivate.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBKey\fP * \fBmountpoint\fP"
.br
.ti -1c
.RI "ssize_t \fBusersize\fP"
.br
.ti -1c
.RI "ssize_t \fBsystemsize\fP"
.br
.ti -1c
.RI "size_t \fBrefcounter\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Holds all information related to a backend.
.PP
Since Elektra 0.8 a Backend consists of many plugins. A backend is responsible for everything related to the process of writing out or reading in configuration.
.PP
So this holds a list of set and get plugins.
.PP
Backends are put together through the configuration in system/elektra/mountpoints
.PP
See kdb mount tool to mount new backends.
.PP
To develop a backend you have first to develop plugins and describe through dependencies how they belong together. 
.SH "Field Documentation"
.PP 
.SS "\fBKey\fP* \fB_Backend::mountpoint\fP"The mountpoint where the backend resides. The \fBkeyName()\fP is the point where the backend was mounted. The \fBkeyValue()\fP is the name of the backend without pre/postfix, e.g. filesys. 
.SS "size_t \fB_Backend::refcounter\fP"This refcounter shows how often the backend is used. Not cascading or default backends have 1 in it. More than two is not possible, because a backend can be only mounted in system and user each once. 
.SS "ssize_t \fB_Backend::systemsize\fP"The size of the systems key from the previous get. Needed to know if a key was removed from a keyset. 
.SS "ssize_t \fB_Backend::usersize\fP"The size of the users key from the previous get. Needed to know if a key was removed from a keyset. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code.
