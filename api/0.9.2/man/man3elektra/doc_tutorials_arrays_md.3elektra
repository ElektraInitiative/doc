.TH "doc_tutorials_arrays_md" 3elektra "Tue May 26 2020" "Version 0.9.2" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_arrays_md \- Arrays 

.SH "Key-Value Pairs"
.PP
The main building block of Elektra’s database are hierarchical \fCkey-value pairs\fP\&. You can create such a pair using \fB`kdb set`\fP:
.PP
.PP
.nf
kdb set user/tests/parent value
#> Create a new key user/tests/parent with string "value"
.fi
.PP
.PP
\&. The command above created a key \fCuser/tests/parent\fP with the value \fCvalue\fP\&. Since Elektra uses a hierarchical database we can also create keys \fBbelow\fP \fCuser/tests/parent\fP:
.PP
.PP
.nf
# If we do not provide a value, then `kdb set` creates keys with `null` values\&.
kdb set user/tests/parent/son
#> Create a new key user/tests/parent/son with null value

kdb set user/tests/parent/daughter
#> Create a new key user/tests/parent/daughter with null value

kdb set user/tests/parent/daughter/grandchild
#> Create a new key user/tests/parent/daughter/grandchild with null value
.fi
.PP
.PP
\&. We can check the hierarchy of the keys using \fCkdb ls\fP and retrieve data using \fCkdb get\fP:
.PP
.PP
.nf
# Elektra sorts keys alphabetically
kdb ls user/tests/parent
#> user/tests/parent
#> user/tests/parent/daughter
#> user/tests/parent/daughter/grandchild
#> user/tests/parent/son

kdb get user/tests/parent
#> value
kdb get user/tests/parent/daughter
#>
.fi
.PP
.SH "Array Keys"
.PP
Since Elektra sorts keys alphabetically we can use the key-value pair structure described above to store sequences of values (aka\&. arrays)\&.
.SS "Empty Arrays"
For an \fBempty array\fP (\fC[]\fP) we just add the \fBmetakey\fP \fCarray\fP:
.PP
``\fC @section autotoc_md2559 Create an empty array with the name\fPuser/tests/sequence` kdb meta-set user/tests/sequence array '' 
.PP
.nf
\&.

### Array Elements

To create an **array element** we start the basename of a key with the `#` character and add the index of the array element afterwards\&. For example, the commands below adds three elements to our array `user/tests/sequence`:

.fi
.PP
.PP
kdb set user/tests/sequence/#0 'First Element' kdb set user/tests/sequence/#1 'Second Element' 
.SH "Arrays do not need to be contiguous"
.PP
kdb set user/tests/sequence/#3 'Fourth Element' 
.PP
.nf
\&. As you can see above arrays can contain “empty fields”: The key `user/tests/sequence/#2` is missing\&.

For array elements with an index larger than `9` we must add **underscores** (`_`) to the basename, so we do not destroy the alphabetic order of the array\&. For example, to add a eleventh element to our array we use the following command:

.fi
.PP
.PP
kdb set user/tests/sequence/#_10 'Eleventh Element' 
.PP
.nf
\&. The order of the array sequence is still correct afterwards, as the following command shows:

.fi
.PP
.SH "List all array elements"
.PP
kdb ls user/tests/sequence/ #> user/tests/sequence/#0 #> user/tests/sequence/#1 #> user/tests/sequence/#3 #> user/tests/sequence/#_10 
.PP
.nf
\&. For larger indices we add **one underscore less, than the number of digits** of the index\&. For example, to add a element with index `1337` (`4` digits) we use the basename `#___1337`\&. We can also generate the basename programmatically:

```bash
ruby -e 'print("#", "_" * (ARGV[0]\&.length - 1), ARGV[0])' 12345
#> #____12345

ruby -e 'print("#", "_" * (ARGV[0]\&.length - 1), ARGV[0])' 0
#> #0

ruby -e 'print("#", "_" * (ARGV[0]\&.length - 1), ARGV[0])' 42
#> #_42

.fi
.PP
.SS "Metadata"
Elektra’s arrays \fBrequire\fP that you always add the metakey \fCarray\fP to the array parent\&. Otherwise the values below the parent will not be interpreted as array elements, but rather as normal key-value pairs\&. To make the \fCarray\fP metakey more useful \fBstorage plugins\fP should save the \fBbasename of the last key in the array parent\fP\&. This of course works only, if the plugins already stores this information in the config file, either
.PP
.IP "\(bu" 2
implicitly (e\&.g\&. the data below the array parent is stored as array/list/sequence in the config file), or
.IP "\(bu" 2
explicitly (e\&.g\&. the plugin stores the metakey \fCarray\fP directly in the config file)
.PP
.PP
\&. Either way, in some situations you might have to add this value manually via \fCkdb meta-set\fP:
.PP
.PP
.nf
# Add array elements
kdb set user/tests/favorites/superheros/#0 'One-Punch Man'
kdb set user/tests/favorites/superheros/#1 'Mermaid Man and Barnacle Boy'
kdb set user/tests/favorites/superheros/#____99999 'The guy with the bow and arrow'

# The metakey `array` should save the basename of the last element\&.
kdb meta-set user/tests/favorites/superheros array '#____99999'
.fi
.PP
.PP
\&. This way you can always retrieve the last element of an array easily:
.PP
``\fC kdb get user/tests/favorites/superheros/\fPkdb meta-get user/tests/favorites/superheros array` #> The guy with the bow and arrow 
.PP
.nf
\&.

# Closing Remarks

We close this tutorial by removing the data created by the commands above:

.fi
.PP
.PP
kdb rm -r user/tests ```
