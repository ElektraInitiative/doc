.TH "doc_decisions_error_semantics_md" 3elektra "Sun Jul 10 2022" "Version 0.9.10" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_error_semantics_md \- Error Semantics 
 
.SH "Problem"
.PP
While we have a classification of errors and warnings, it remains unclear when plugins actually should emit errors and warnings\&.
.SH "Constraints"
.PP
.IP "\(bu" 2
Should not be contradicting to specified behavior in \fBstorage plugin tutorial\fP\&.
.PP
.SH "Assumptions"
.PP
.IP "\(bu" 2
Users want a uniform behavior within Elektra, so plugins must behave uniformly\&.
.PP
.SH "Considered Alternatives"
.PP
.IP "\(bu" 2
freedom to plugin writers
.IP "\(bu" 2
strict rules and conformance tests for plugins
.PP
.SH "Decision"
.PP
Provide guidelines in the form as tutorials, covering:
.PP
.IP "\(bu" 2
prefer errors to warnings
.IP "\(bu" 2
that any not understood metadata (e\&.g\&. types), should lead to an error
.IP "\(bu" 2
that wrong specifications, like \fCkdb meta-set /tests/ipaddr/ipv4 check/ipaddr ipv8\fP should be rejected
.IP "\(bu" 2
if the value does not confirm \fBexactly\fP to the specified type, an error should be emitted (e\&.g\&. only \fC0\fP or \fC1\fP as boolean)
.IP "\(bu" 2
anything else that is beyond the capabilities of a plugin (not implemented), should lead to an error
.PP
.PP
Violations against these guidelines can be reported as bug and then either:
.PP
.IP "\(bu" 2
the bug gets fixed
.IP "\(bu" 2
the plugin get a worse \fCinfos/status\fP but still get shipped with 1\&.0
.IP "\(bu" 2
the plugin gets removed
.PP
.SH "Rationale"
.PP
It is easier for developers if there are clear expectations on how a plugin should behave\&. And it is much easier for overall Elektra if there is more consistency\&.
.SH "Implications"
.PP
.IP "\(bu" 2
more checks&errors in storage plugins are needed
.PP
.SH "Related Decisions"
.PP
.IP "\(bu" 2
\fBMetadata in Spec Namespace\fP
.IP "\(bu" 2
\fBCapabilities\fP
.IP "\(bu" 2
\fBBoolean\fP
.PP
.SH "Notes"
.PP
.IP "\(bu" 2
\fCIssue #1511\fP 
.PP

