.TH "deprecated" 3elektra "Thu Sep 17 2015" "Version 0.8.13" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
deprecated \- Deprecated List 

.IP "\fBGlobal \fBKEY_ATIME\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBKEY_CTIME\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBKEY_DIR\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBKEY_GID\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBKEY_MODE\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBKEY_MTIME\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBKEY_UID\fP \fP" 1c
do not use  
.IP "\fBGlobal \fBkeyGetATime\fP (const Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeyGetCTime\fP (const Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeyGetGID\fP (const Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeyGetMode\fP (const Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeyGetMTime\fP (const Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeyGetUID\fP (const Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeyNeedSync\fP (const Key *key)\fP" 1c
The handling of synchronization is done internally and does not need to be checked by neither application nor plugins\&. 
.IP "\fBGlobal \fBkeyNew\fP (const char *name,\&.\&.\&.)\fP" 1c
These other flags deprecated and \fBKEY_META\fP should be preferred\&. They remain some time, however, for compatibility:
.IP "\(bu" 2
\fBKEY_DIR\fP 
.br
 Define that the key is a directory rather than a ordinary key\&. This means its executable bits in its mode are set\&. But even without this option the key can have subkeys\&. See \fBkeySetDir()\fP\&.
.IP "\(bu" 2
\fBKEY_OWNER\fP 
.br
 Next parameter is the owner\&. See \fBkeySetOwner()\fP\&.
.IP "\(bu" 2
\fBKEY_UID\fP, \fBKEY_GID\fP 
.br
 Next parameter is taken as the UID (uid_t) or GID (gid_t) that will be defined on the key\&. See \fBkeySetUID()\fP and \fBkeySetGID()\fP\&.
.IP "\(bu" 2
\fBKEY_MODE\fP 
.br
 Next parameter is taken as mode permissions (int) to the key\&. See \fBkeySetMode()\fP\&. 
.PP
.nf
Key *k=keyNew("user/tmp/ex3",
        KEY_VALUE, "some data",    // with a simple value
        KEY_MODE, 0777,            // permissions
        KEY_END);                  // end of args

.fi
.PP

.IP "\(bu" 2
\fBKEY_COMMENT\fP 
.br
 Next parameter is a comment\&. See \fBkeySetComment()\fP\&. 
.PP
.nf

.fi
.PP
Global \fBkeySetATime\fP (Key *key, time_t atime) This API is obsolete\&. 
.PP
.IP "\fBGlobal \fBkeySetCTime\fP (Key *key, time_t ctime)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeySetDir\fP (Key *key)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeySetGID\fP (Key *key, gid_t gid)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeySetMode\fP (Key *key, mode_t mode)\fP" 1c
This API is obsolete\&. It is only a mapping to keySetMeta(key, 'mode', str) which should be prefered\&. 
.IP "\fBGlobal \fBkeySetMTime\fP (Key *key, time_t mtime)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBkeySetUID\fP (Key *key, uid_t uid)\fP" 1c
This API is obsolete\&. 
.IP "\fBGlobal \fBksNeedSync\fP (const KeySet *ks)\fP" 1c
Backends now work differently and do not rely on this information\&.
.PP

