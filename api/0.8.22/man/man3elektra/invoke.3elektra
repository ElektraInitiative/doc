.TH "invoke" 3elektra "Tue Feb 27 2018" "Version 0.8.22" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
invoke \- Functionality to use plugins and invoke functions\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "ElektraInvokeHandle * \fBelektraInvokeInitialize\fP (const char *elektraPluginName)"
.br
.ti -1c
.RI "ElektraInvokeHandle * \fBelektraInvokeOpen\fP (const char *elektraPluginName, KeySet *config, Key *errorKey)"
.br
.RI "Opens a new handle to invoke functions for a plugin\&. "
.ti -1c
.RI "const void * \fBelektraInvokeGetFunction\fP (ElektraInvokeHandle *handle, const char *elektraPluginFunctionName)"
.br
.RI "Get a function pointer\&. "
.ti -1c
.RI "KeySet * \fBelektraInvokeGetPluginConfig\fP (ElektraInvokeHandle *handle)"
.br
.RI "Get the configuration the plugin uses\&. "
.ti -1c
.RI "const char * \fBelektraInvokeGetPluginName\fP (ElektraInvokeHandle *handle)"
.br
.RI "Get the name of the plugin\&. "
.ti -1c
.RI "void * \fBelektraInvokeGetPluginData\fP (ElektraInvokeHandle *handle)"
.br
.RI "Get the data of the plugin\&. "
.ti -1c
.RI "KeySet * \fBelektraInvokeGetModules\fP (ElektraInvokeHandle *handle)"
.br
.RI "Get the modules used for invoking\&. "
.ti -1c
.RI "KeySet * \fBelektraInvokeGetExports\fP (ElektraInvokeHandle *handle)"
.br
.RI "Get the exports from the plugin\&. "
.ti -1c
.RI "int \fBelektraInvoke2Args\fP (ElektraInvokeHandle *handle, const char *elektraPluginFunctionName, KeySet *ks, Key *k)"
.br
.RI "A convenience function to call a function with two arguments\&. "
.ti -1c
.RI "void \fBelektraInvokeClose\fP (ElektraInvokeHandle *handle, Key *errorKey)"
.br
.RI "Closes all affairs with the handle\&. "
.in -1c
.SH "Detailed Description"
.PP 
Functionality to use plugins and invoke functions\&. 

Allows invoking functions of plugins as needed within applications and plugins inside and outside of the KDB\&.
.PP
To use this library, you need to include:
.PP
.PP
.nf
#include <kdbinvoke\&.h>`
.fi
.PP
.PP
and link against \fClibelektra-invoke\fP\&. Then you can use it:
.PP
.PP
.nf
ElektraInvokeHandle * handle = elektraInvokeOpen ("dini", 0);
elektraInvoke2Args (handle, "get", ks, k);
elektraInvokeClose (handle);
.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "int elektraInvoke2Args (ElektraInvokeHandle * handle, const char * elektraPluginFunctionName, KeySet * ks, Key * k)"

.PP
A convenience function to call a function with two arguments\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to work with 
.br
\fIelektraPluginFunctionName\fP the function to call, e\&.g\&. 'get' 
.br
\fIks\fP the keyset to be used as first parameter 
.br
\fIk\fP the key to be used as second parameter
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
the return value of the invoked function (i\&.e\&. -1, 0, or 1) 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-2\fP if the function was not found\&. 
.RE
.PP

.SS "void elektraInvokeClose (ElektraInvokeHandle * handle, Key * errorKey)"

.PP
Closes all affairs with the handle\&. The close function of the plugin will be called\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to work with 
.br
\fIerrorKey\fP a key where error messages will be stored
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP 
.RE
.PP

.SS "KeySet* elektraInvokeGetExports (ElektraInvokeHandle * handle)"

.PP
Get the exports from the plugin\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to work with\&.
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
the exports of the plugin\&. 
.RE
.PP

.SS "const void* elektraInvokeGetFunction (ElektraInvokeHandle * handle, const char * elektraPluginFunctionName)"

.PP
Get a function pointer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to use 
.br
\fIelektraPluginFunctionName\fP the name of the function to use, e\&.g\&., get/set
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
Example:
.PP
.PP
.nf
typedef int (*elektra2Args) (KeySet*, Key *);
elektra2Args func = *(elektra2Args *)elektraInvokeGetFunction (handle, elektraPluginFunctionName);
if (!func) exit(1);   // no function found, handle error
func (ks, k);         // otherwise, call function
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBelektraInvoke2Args()\fP a convenience function to be used for KeySet,Key arguments\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a function pointer for the specified function\&. 
.RE
.PP

.SS "KeySet* elektraInvokeGetModules (ElektraInvokeHandle * handle)"

.PP
Get the modules used for invoking\&. 
.PP
\fBWarning:\fP
.RS 4
The modules are closed within \fBelektraInvokeClose()\fP\&. It is \fInot\fP enough to \fBksDup()\fP the keyset, you must not call \fBelektraInvokeClose()\fP if you want to reuse the modules\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to work with\&.
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
the modules used for invoking\&. 
.RE
.PP

.SS "KeySet* elektraInvokeGetPluginConfig (ElektraInvokeHandle * handle)"

.PP
Get the configuration the plugin uses\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to use
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
the config of the plugin\&. 
.RE
.PP

.SS "void* elektraInvokeGetPluginData (ElektraInvokeHandle * handle)"

.PP
Get the data of the plugin\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to work with\&.
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the plugin's data\&. 
.RE
.PP

.SS "const char* elektraInvokeGetPluginName (ElektraInvokeHandle * handle)"

.PP
Get the name of the plugin\&. The name might differ from the name as passed with elektraInvokeOpen when symlinks are used\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP the handle to work with\&.
.RE
.PP
\fBPrecondition:\fP
.RS 4
handle must be as returned from \fBelektraInvokeOpen()\fP
.RE
.PP
\fBReturns:\fP
.RS 4
the name of the plugin 
.RE
.PP

.SS "ElektraInvokeHandle* elektraInvokeInitialize (const char * elektraPluginName)"

.PP
\fBDeprecated\fP
.RS 4
Do not use\&.
.RE
.PP
.PP
Use \fCelektraInvokeOpen (name, 0, 0)\fP instead\&.
.PP
\fBSee also:\fP
.RS 4
\fBelektraInvokeOpen()\fP 
.RE
.PP

.SS "ElektraInvokeHandle* elektraInvokeOpen (const char * elektraPluginName, KeySet * config, Key * errorKey)"

.PP
Opens a new handle to invoke functions for a plugin\&. When opening the plugin, it calls the 'open' function of the plugin\&.
.PP
\fBParameters:\fP
.RS 4
\fIelektraPluginName\fP the plugin on which we want to invoke functions\&. 
.br
\fIconfig\fP the config to be passed to the plugin\&. 
.br
\fIerrorKey\fP a key where error messages will be stored
.RE
.PP
\fBReturns:\fP
.RS 4
the handle 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP on errors 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
