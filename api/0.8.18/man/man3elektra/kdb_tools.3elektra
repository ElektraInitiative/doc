.TH "kdb::tools" 3elektra "Sat Sep 17 2016" "Version 0.8.18" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::tools \- 
.PP
This namespace is for the libtool library\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "class \fBBackend\fP"
.br
.RI "\fIA low-level representation of the backend (= set of plugins) that can be mounted\&. \fP"
.ti -1c
.RI "class \fBBackendBuilder\fP"
.br
.RI "\fIHighlevel interface to build a backend\&. \fP"
.ti -1c
.RI "class \fBBackendBuilderInit\fP"
.br
.RI "\fIUsed as argument of constructor of *BackendBuilder\&. \fP"
.ti -1c
.RI "class \fBBackendFactory\fP"
.br
.RI "\fIFactory for \fBMountBackendInterface\fP\&. \fP"
.ti -1c
.RI "struct \fBBackendInfo\fP"
.br
.RI "\fIInfo about a backend\&. \fP"
.ti -1c
.RI "class \fBBackendInterface\fP"
.br
.RI "\fIMinimal interface to add plugins\&. \fP"
.ti -1c
.RI "class \fBBackends\fP"
.br
.RI "\fIAllows one to list backends\&. \fP"
.ti -1c
.RI "class \fBErrorPlugins\fP"
.br
.RI "\fI\fBPlugins\fP to handle errors during configuration access\&. \fP"
.ti -1c
.RI "class \fBGetPlugins\fP"
.br
.RI "\fI\fBPlugins\fP to get configuration\&. \fP"
.ti -1c
.RI "class \fBGlobalPlugins\fP"
.br
.RI "\fILow level representation of global plugins\&. \fP"
.ti -1c
.RI "class \fBGlobalPluginsBuilder\fP"
.br
.RI "\fIBuild global plugins\&. \fP"
.ti -1c
.RI "class \fBImportExportBackend\fP"
.br
.RI "\fI\fBBackend\fP for import/export functionality\&. \fP"
.ti -1c
.RI "class \fBMockPluginDatabase\fP"
.br
.RI "\fIA plugin database that works with added fake data\&. \fP"
.ti -1c
.RI "class \fBModules\fP"
.br
.RI "\fIAllows one to load plugins\&. \fP"
.ti -1c
.RI "class \fBModulesPluginDatabase\fP"
.br
.RI "\fIA plugin database that works with installed modules\&. \fP"
.ti -1c
.RI "class \fBMountBackendBuilder\fP"
.br
.RI "\fIHigh-level functionality to build a mountpoint\&. \fP"
.ti -1c
.RI "class \fBMountBackendInterface\fP"
.br
.RI "\fIInterface to work with mountpoints (backends) for factory\&. \fP"
.ti -1c
.RI "class \fBPlugin\fP"
.br
.RI "\fIThis is a C++ representation of a plugin\&. \fP"
.ti -1c
.RI "class \fBPluginAdder\fP"
.br
.RI "\fIAdds plugins in a generic map\&. \fP"
.ti -1c
.RI "class \fBPluginDatabase\fP"
.br
.RI "\fILoads all plugins and allows us to query them\&. \fP"
.ti -1c
.RI "class \fBPlugins\fP"
.br
.RI "\fIA collection of plugins (either get, set or error) \fP"
.ti -1c
.RI "class \fBPluginSpec\fP"
.br
.RI "\fISpecifies a plugin by its name and configuration\&. \fP"
.ti -1c
.RI "struct \fBPluginSpecHash\fP"
.br
.RI "\fIOnly to be used with PluginSpecName! \fP"
.ti -1c
.RI "class \fBSerializeInterface\fP"
.br
.RI "\fIInterface to serialize a backend\&. \fP"
.ti -1c
.RI "class \fBSetPlugins\fP"
.br
.RI "\fI\fBPlugins\fP to set configuration\&. \fP"
.ti -1c
.RI "class \fBSpecBackendBuilder\fP"
.br
.RI "\fIBuild individual backend while reading specification\&. \fP"
.ti -1c
.RI "class \fBSpecReader\fP"
.br
.RI "\fIHighlevel interface to build a backend from specification\&. \fP"
.ti -1c
.RI "struct \fBToolException\fP"
.br
.RI "\fIAll exceptions from the elektratools library are derived from this exception\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBBackend\fP const &b)"
.br
.RI "\fIPrints the current status\&. \fP"
.ti -1c
.RI "\fBkdb::KeySet\fP \fBparsePluginArguments\fP (std::string const &pluginArguments, std::string const &basepath)"
.br
.RI "\fIParse a string containing information to create a \fBKeySet\fP\&. \fP"
.ti -1c
.RI "PluginSpecVector \fBparseArguments\fP (std::string const &cmdline)"
.br
.RI "\fIParse a complete commandline\&. \fP"
.ti -1c
.RI "template<typename Iterator > PluginSpecVector \fBparseArguments\fP (Iterator first, Iterator last)"
.br
.RI "\fIParse a complete commandline that is already tokenized in pluginname pluginconfig\&. \fP"
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBPluginSpec\fP const &spec)"
.br
.RI "\fIOutput the name, refname and size of config\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (\fBPluginSpec\fP const &self, \fBPluginSpec\fP const &other)"
.br
.RI "\fICompare two pluginspec if their value is equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (\fBPluginSpec\fP const &self, \fBPluginSpec\fP const &other)"
.br
.RI "\fICompare two pluginspec if their value is not equal\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This namespace is for the libtool library\&. 


.PP
\fBNote:\fP
.RS 4
You have to link against libelektratools if you want to use functionality from it\&. Contrary to classes in namespace kdb it is not header-only\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBBackend\fP for an entry point 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "bool kdb::tools::operator!= (PluginSpec const &self, PluginSpec const &other)"

.PP
Compare two pluginspec if their value is not equal\&. 
.PP
\fBNote:\fP
.RS 4
the content of getConfig() will be only compared with keynames, not content! 
.RE
.PP

.SS "std::ostream & kdb::tools::operator<< (std::ostream &os, Backend const &b)"

.PP
Prints the current status\&. 
.PP
\fBParameters:\fP
.RS 4
\fIos\fP stream to print to 
.br
\fIb\fP backend to get status from
.RE
.PP
\fBReturns:\fP
.RS 4
ref to stream 
.RE
.PP

.SS "bool kdb::tools::operator== (PluginSpec const &self, PluginSpec const &other)"

.PP
Compare two pluginspec if their value is equal\&. 
.PP
\fBNote:\fP
.RS 4
the content of getConfig() will be only compared with keynames, not content! 
.RE
.PP

.SS "PluginSpecVector kdb::tools::parseArguments (std::string const &cmdline)"

.PP
Parse a complete commandline\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcmdline\fP contains space separated plugins with optional plugin configurations
.RE
.PP
\fBNote:\fP
.RS 4
currently whitespaces are not allowed within pluginname or config, use iterator interface \fBparseArguments()\fP if you need it\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBparseArguments()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a parsed PluginSpecVector 
.RE
.PP

.SS "template<typename Iterator > PluginSpecVector kdb::tools::parseArguments (Iteratorfirst, Iteratorlast)"

.PP
Parse a complete commandline that is already tokenized in pluginname pluginconfig\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIIterator\fP forward iterator type
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcmdline\fP contains space separated plugins with optional plugin configurations
.RE
.PP
\fBReturns:\fP
.RS 4
a parsed PluginSpecVector 
.RE
.PP

.SS "\fBKeySet\fP kdb::tools::parsePluginArguments (std::string const &pluginArguments, std::string const &basepath)"

.PP
Parse a string containing information to create a \fBKeySet\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpluginArguments\fP comma (,) to separate key=value, contains no whitespaces
.RE
.PP
\fBReturns:\fP
.RS 4
newly created keyset with the information found in the string 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
