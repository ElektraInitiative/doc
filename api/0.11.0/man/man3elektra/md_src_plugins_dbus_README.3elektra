.TH "md_src_plugins_dbus_README" 3elektra "Fri Aug 4 2023" "Version 0.11.0" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_dbus_README \- Plugin: dbus 

.IP "\(bu" 2
infos = Information about the dbus plugin is in keys below
.IP "\(bu" 2
infos/author = Markus Raab elektra@libelektra.org
.IP "\(bu" 2
infos/maintainer = Maximilian Irlinger max@maxirlinger.at
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = notification
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = postgetstorage postcommit
.IP "\(bu" 2
infos/status = maintained unittest libc global
.IP "\(bu" 2
infos/description = Sends notifications for every change via D-Bus
.PP
.SH "Introduction"
.PP
This plugin is a notification plugin, which sends a signal to D-Bus when the key database (KDB) has been modified\&.
.SH "Installation"
.PP
See \fBinstallation\fP\&. The package is called \fClibelektra5-dbus\fP\&.
.SH "Dependencies"
.PP
.IP "\(bu" 2
\fClibdbus-1-dev\fP
.PP
.SH "Dbus"
.PP
A preferred way to interconnect desktop applications and even embedded system applications on mobile devices running Linux is D-Bus\&. The idea of D-Bus accords to that of Elektra: to provide standards to let software work together more tightly\&. D-Bus provides a simple and lightweight IPC (Inter-Process Communication) system to be used within desktop systems\&. Next to RPC (Remote Procedure Call), which is not used in this plugin, it supports signals which can notify an arbitrary number of other applications about changes\&. Given software like a D-Bus library, notification itself is a rather easy task, but it involves additional library dependences\&. So it is the perfect task to be implemented as a plugin\&. The information about the channels to be used can be stored in the global key database\&.
.PP
D-Bus supports a \fBsystem-wide bus\fP and a \fBsession bus\fP\&. The system configuration can be accessed by each user and the user configuration is limited to a single user\&. Both buses can immediately be used for the system and user configuration notification updates to get pleasing results\&. But, there is a problem with the session bus: It is possible within D-Bus that a user starts several sessions\&. The user configuration should be global to the user and is not aware of these sessions\&. So if several sessions are started, some of the user's processes will miss notification updates\&.
.PP
The namespaces are mapped to the buses the following way:
.PP
.IP "\(bu" 2
system: system-wide bus
.IP "\(bu" 2
user: session bus
.PP
.PP
Following signal names are used to notify about changes in the Elektraâ€™s KeySet:
.PP
.IP "\(bu" 2
KeyAdded: a key has been added
.IP "\(bu" 2
KeyChanged: a key has been changed
.IP "\(bu" 2
KeyDeleted: a key has been deleted
.PP
.PP
Alternatively, (with the option announce=once) only a single message is send:
.PP
.IP "\(bu" 2
Commit: a key has been added, changed or deleted
.PP
.SH "Usage"
.PP
The recommended way is to globally mount the plugin:
.PP
.PP
.nf
kdb global-mount dbus
.fi
.PP
.PP
Alternatively one can mount the plugin additionally to a storage plugin, e\&.g\&.:
.PP
.PP
.nf
kdb mount file\&.dump / dump dbus
.fi
.PP
.PP
For openicc one would use (mounts with announce=once):
.PP
.PP
.nf
kdb mount-openicc
.fi
.PP
.SS "Shell"
Then we can receive the notification events using:
.PP
.PP
.nf
dbus-monitor type='signal',interface='org\&.libelektra',path='/org/libelektra/configuration'
.fi
.PP
.PP
Or via the supplied test program:
.PP
.PP
.nf
kdb testmod_dbus receive_session
.fi
.PP
.PP
We can trigger a message with:
.PP
.PP
.nf
kdb set user:/dbus/x b
.fi
.PP
.PP
Note that changes in \fCuser\fP fire on the dbus \fCsession\fP, and changes in namespace \fCsystem\fP in the dbus \fCsystem\fP bus\&. To receive \fCsystem\fP changes we will use:
.PP
.PP
.nf
kdb testmod_dbus receive_system
dbus-monitor --system type='signal',interface='org\&.libelektra',path='/org/libelektra/configuration'
.fi
.PP
.PP
And then fire it with:
.PP
.PP
.nf
kdb set system:/dbus/y a
.fi
.PP
.SS "C"
.PP
.nf
dbus_bus_add_match (connection, "type='signal',interface='org\&.libelektra',path='/org/libelektra/configuration'", &error);
.fi
.PP
.PP
See the full example \fChere\fP\&.
.SS "Qt"
Here a small example for QDBusConnection:
.PP
Place this in your Qt class header:
.PP
.PP
.nf
public slots:
  void configChanged( QString msg );
.fi
.PP
.PP
Put this in your Qt class, e\&.g\&. the constructor:
.PP
.PP
.nf
if( QDBusConnection::sessionBus()\&.connect( QString(), "/org/libelektra/configuration", "org\&.libelektra", QString(),
                                       this, SLOT( configChanged( QString ) )) )
    fprintf(stderr, "=================== Done connect\n" );
.fi
.PP
.PP
Here comes the \fBorg\&.libelektra\fP signals:
.PP
.PP
.nf
void SynnefoApp::configChanged( QString msg )
{
  fprintf( stdout, "config changed: %s\n", msg\&.toLocal8Bit()\&.data() );
};
.fi
.PP
.SS "Python"
In Python the DBus notifications can be used as follows
.PP
.PP
.nf
import dbus
import gobject
gobject\&.threads_init()  # important: initialize threads if gobject main loop is used
from dbus\&.mainloop\&.glib import DBusGMainLoop

class DBusTest():
    def __init__(self):
        DBusGMainLoop(set_as_default=True)
        bus = dbus\&.SystemBus()  # may use session bus for user db
        bus\&.add_signal_receiver(self\&.elektra_dbus_key_changed_cb,
            signal_name="KeyChanged",
            dbus_interface="org\&.libelektra",
            path="/org/libelektra/configuration")

    def elektra_dbus_key_changed_cb(self, key):
        print('key changed %s' % key)

test = DBusTest()
loop = gobject\&.MainLoop()
try:
    loop\&.run()
except KeyboardInterrupt:
    loop\&.quit()
.fi
.PP
.SH "Background"
.PP
Today, programs are often interconnected in a dense way\&. Such applications should always be informed when something in their environment changes\&. For user interactive software, notification about configuration changes is expected\&. The only alternative is polling, which wastes resources\&. It additionally is no option for interactive software, where the latency needs to be low\&. Instead, the software which changes the configuration has to notify all other interested applications that can reread their configuration without significant delay\&. In Elektra, a notification plugin ensures that a notification is actually sent on each change\&.
.PP
Applications can wait for such a notification with hand-written code\&. Bindings, however, allow for better integration\&. It is a common approach for toolkits to provide a main loop\&. Applications using such toolkits can integrate notification services into this main loop\&.
.PP
The actions that occur in such events are application or toolkit specific because of the non-invasive nature of Elektra\&. Software reacts in many different ways to update events\&. Hence, the frequency of update events should be kept at a minimum\&. Changes are kept atomic with a single attempt to write out configuration\&. Notification callbacks shall not change configuration because this can lead to a longer chain of unwanted modifications\&. That might not be true, however, if a programmer of the whole system knows that a chain of reactions will terminate\&. When doing such event-driven programming, care is needed to avoid infinite loops\&. Elektra guarantees consistency of the key database even in such cases\&.
.SH "Transport Plugin"
.PP
Mount this plugin globally with default settings to use it as \fIsending\fP transport plugin for Elektra's notification feature:
.PP
.RS 4
kdb global-mount dbus announce=once 
.RE
.PP
.SH "Notification Format"
.PP
This plugin uses D-Bus signal messages as notifications\&. Notifications have the path \fC/org/libelektra/configuration\fP and the D-Bus interface \fC\fBorg\&.libelektra\fP\fP\&. The following signal names are used:
.PP
.IP "\(bu" 2
Commit: preferred, keys below the changed key have changed
.IP "\(bu" 2
KeyAdded: a key has been added
.IP "\(bu" 2
KeyChanged: a key has been changed
.PP
.PP
The first argument contains the name of the changed key\&. The system bus is used if the affected keys is below the \fCsystem\fP namespace\&. If the key is below the \fCuser\fP namespace the session bus is used\&.
.PP
Example output from \fCdbus-monitor\fP:
.PP
.PP
.nf
signal time=1520805003\&.227723 sender=:1\&.8 -> destination=(null destination) serial=15 path=/org/libelektra/configuration; interface=org\&.libelektra; member=Commit
   string "system:/tests/foo"
.fi
.PP
.SS "Problems"
Key names that are not valid utf-8 cause a warning within the D-Bus library:
.PP
.PP
.nf
This is normally a bug in some application using the D-Bus library\&.
Couldn't add message argumentprocess 6139: arguments to dbus_message_iter_append_basic() were incorrect, assertion "_dbus_check_is_valid_utf8 (*string_p)" failed in file \&.\&./\&.\&./dbus/dbus-message\&.c line 2676\&.
.fi
.PP
 
