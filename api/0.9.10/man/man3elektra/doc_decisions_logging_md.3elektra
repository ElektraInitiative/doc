.TH "doc_decisions_logging_md" 3elektra "Mon Jul 11 2022" "Version 0.9.10" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_logging_md \- Logging 
 
.SH "Problem"
.PP
Both code comments and assertions are unfortunately not very popular\&. A quite efficient way to still get some documentation about the code are logging statements\&. In Elektra they are currently inconsistent and unusable\&. Thus there is an urge for this decision\&.
.SH "Constraints"
.PP
.IP "\(bu" 2
this decision is irrelevant for plugins and bindings that are not written in C/C++\&. In any case, however, logging must be disabled by default\&.
.IP "\(bu" 2
should completely compile away with ENABLE_LOGGER=OFF
.IP "\(bu" 2
should support minimalistic, compile-time filtering (per modules and verbosity level?) and some sinks (stderr, syslog or files)
.PP
.SH "Assumptions"
.PP
.IP "\(bu" 2
run-time problems are checked via assertions, not logged
.IP "\(bu" 2
opinions about if logging should be to stderr or files differ
.IP "\(bu" 2
filtering with grep is not enough
.IP "\(bu" 2
per default there should be no output
.IP "\(bu" 2
with ENABLE_LOGGER=ON only warnings and errors should be shown on stderr
.IP "\(bu" 2
other sinks like syslog and file may log more (they are not immediately visible and distracting)
.IP "\(bu" 2
performance is not so important (because logging is usually turned off anyway)
.PP
.SH "Considered Alternatives"
.PP
.IP "\(bu" 2
log similar to the warnings/error system work, discarded because of the run-time overhead and no use case why end users should see log statements\&.
.IP "\(bu" 2
C++ logging library (boost, apache,\&.\&.), discarded because C++ should not be in core
.IP "\(bu" 2
libraries needed static initializing: problematic, logging should just work, even if application does not initialize anything
.IP "\(bu" 2
using syslog: no info from which source file the logging statement comes from
.IP "\(bu" 2
using journald: adds deps problematic for non-linux
.IP "\(bu" 2
zlog: incompatible licence (LGPL)
.PP
.SH "Decision"
.PP
Provide a Macro
.PP
.PP
.nf
ELEKTRA_LOG (int module, const char *msg, \&.\&.\&.);
.fi
.PP
.PP
that calls
.PP
.PP
.nf
elektraLog ([as above], const char * function, const char * file,
            const int line, \&.\&.\&.);
.fi
.PP
.PP
and adds current function, file and line to \fCelektraLog\fP's arguments\&.
.PP
\fCelektraLog\fP is implemented in a separate \fC\fBlog\&.c\fP\fP file\&. If someone needs filtering, logging to different sources or similar, he/she simply modifies \fC\fBlog\&.c\fP\fP\&.
.SS "Severity"
The severity passed to \fCELEKTRA_LOG_\fP should be as in syslog's priority, except the error conditions which are not needed (asserts should be used in these situations)\&.
.PP
So we would have:
.PP
.IP "\(bu" 2
\fCELEKTRA_LOG_WARNING\fP: warning conditions
.IP "\(bu" 2
\fCELEKTRA_LOG_NOTICE\fP: normal, but significant, condition
.IP "\(bu" 2
\fCELEKTRA_LOG_INFO\fP: informational message
.IP "\(bu" 2
\fCELEKTRA_LOG_DEBUG\fP: debug-level message
.PP
.SS "Modules"
To add a new module, one simply adds his/her module to \fCelektramodules\&.h\fP via \fC#define\fP:
.PP
.PP
.nf
#define ELEKTRA_MODULE_<NAME> <SEQNUMBER>
.fi
.PP
.PP
The module name \fC<NAME>\fP shall be consistent with module names used in \fCmodule:\fP of \fCsrc/error/specification\fP\&.
.SH "Rationale"
.PP
A more complex system seems to be overkill\&. Thus libraries should not have any effects other than what is described by their API, logging should nearly always be disabled\&.
.PP
A more 'hackable' logger seems to be more suitable for individual needs\&. Having a separate \fC\fBlog\&.c\fP\fP means that the logger can be changed without the need to recompile anything but a single file\&. It also removes the dependency of \fCstdio\&.h\fP from every individual file to a single place\&.
.PP
Thus logging is very easy to use (only include \fCelektralog\&.h\fP and use \fCELEKTRA_LOG\fP) and still very flexible (with modules, severity, file, line and function information nearly everything someone wants from a logging system can be achieved in \fC\fBlog\&.c\fP\fP\&.
.SH "Implications"
.PP
The current VERBOSE would be turned off forever and the code within VERBOSE needs to be migrated to \fCELEKTRA_LOG\fP\&.
.SH "Related Decisions"
.PP
.IP "\(bu" 2
assertions
.PP
.SH "Notes"
.PP

