.TH "doc_news_2014-09-02_0_8_8_md" 3elektra "Mon Feb 1 2021" "Version 0.9.4" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_news_2014-09-02_0_8_8_md0\&.8\&.8 Release 
 \- 
.IP "\(bu" 2
guid: eca69e19-5ddb-438c-ac06-57c20b1a9160
.IP "\(bu" 2
author: Markus Raab
.IP "\(bu" 2
pubDate: Tue, 02 Sep 2014 17:31:42 +0200
.IP "\(bu" 2
shortDesc: adds 3-way merging, reworked documentation & improved kdb tool
.PP
.PP
In this release we changed 578 files in 473 commits (68596 insertions(+), 59260 deletions(-) compared to Elektra 0\&.8\&.7)\&. We assume thats the largest change set for any of Elektra’s releases up to now\&. It happened only within a bit more than a month up (0\&.8\&.7 was released 28\&.07\&.2014)\&.
.PP
GSoC finished successfully (thanks Ian and Felix) See http://community.libelektra.org/wp for the latest results\&. So Elektra now has a 3-way merging framework that is superior to text-based merging in many scenarios (e\&.g\&. moving configuration options within a file or with in-line comments) iff a storage plugin creates key names that are not only line numbers\&. We love to get Feedback!
.PP
Writing plugins is now even more comfortable\&. A plugin writer tutorial was written (thanks Ian): https://github.com/ElektraInitiative/libelektra/blob/master/doc/tutorials/plugins.md The documentation was completely reworked: https://doc.libelektra.org/api/0.8.7/html/group__plugin.html And two new macros allow printf formatting for warnings and errors (\fCELEKTRA_ADD_WARNINGF\fP and \fCELEKTRA_SET_ERRORF\fP)\&.
.PP
The ini plugin was greatly improved (tested with samba configurations and added to ALL plugins) and the hosts plugin was rewritten to support ipv6 properly (thanks to Felix)\&.
.PP
The constants plugin was added and allows introspection of Elektra’s cmake variables\&. Because such non-file based plugins (e\&.g\&. also uname) do not need resolving, the plugin noresolver was added\&. It supersedes the success plugin\&.
.PP
Elektra now allows one to correctly fsync its configuration files (sync plugin) and the folders where files are stored (resolver plugin)\&. Just make sure to add the 'sync' plugin using kdb mount\&. The resolver plugin now reads from passwd and no longer needs environment variables\&. Additionally, the resolver plugin was prepared to support other variants by so called compilation variants\&.
.PP
The error plugin now allows, next to list all possible errors, to provoke errors when opening plugins\&. We fixed some issues related to plugins having errors when they initialize themselves\&.
.PP
So following plugins were added: sync noresolver line ini constants Nearly all plugins now have a README\&.md for further information (thanks to Ian)\&. An overview of all plugin is on with links to them: https://github.com/ElektraInitiative/libelektra/blob/master/src/plugins/
.PP
The kdb tools were greatly improved (thanks to Felix):
.PP
.IP "\(bu" 2
added remount tool
.IP "\(bu" 2
umount now also accepts mountpath
.IP "\(bu" 2
mount allows one to specify different resolvers
.IP "\(bu" 2
import now can use merge strategies
.IP "\(bu" 2
check without arguments checks key database
.IP "\(bu" 2
mount is now more verbose when validation fails
.PP
.PP
New/improved scripts/make targets (note that scripts can be executed by kdb scriptname):
.PP
.IP "\(bu" 2
mounting, unmounting scripts were added
.IP "\(bu" 2
generate template for a new plugin was improved
.IP "\(bu" 2
configure-debian was added
.IP "\(bu" 2
added targets \fCrun_all\fP and \fCrun_memcheck\fP
.IP "\(bu" 2
bash completion file now installed
.IP "\(bu" 2
ucf integration
.IP "\(bu" 2
merging scripts were added for the usage with ucf
.IP "\(bu" 2
scripts doing internal checks on source of plugins
.PP
.PP
This time we had to break compatibility\&. We did not change the ABI (your application still will be able to use Elektra 0\&.8\&.8) and we did not change the API (your application still will compile against Elektra)\&. We changed the third part of our interface: the semantic interface\&.
.PP
The problems were following: keyAddBaseName/keySetBaseName did something obvious when no special characters were in the baseName\&. But once there were, there are two different interpretations what it should do:
.PP
.IP "1." 4
add/set a basename, so escape characters that are not canonical in the basename
.IP "2." 4
add all parts of the name given (with slashes)
.PP
.PP
The methods were used in both ways, so it was obvious that something is very wrong\&. We decided that it should do what the name says, that is add/set a basename (variant 1)\&.
.PP
The variant 2, to add any name was added and is called \fBkeyAddName()\fP and added as proposal\&.
.PP
(Thank Felix for implementations and Manuel for investigations)
.PP
When keys are renamed after adding to a keyset is a bad thing because it destroys the order of the keyset\&. This is now avoided by keyLock\&. Use \fBkeyDup()\fP to get rid of such locks\&.
.PP
Another, even larger, change is also about ordering of keys in keysets\&. Elektra now internally has an null-terminated unescaped key name\&. Ordering of keysets will always happen on this name\&. The \fC\fBkeyCmp()\fP\fP tool can be used to check this order\&. It works very efficiently with \fCmemcmp()\fP and never gets confused by ASCII ordering of / (because / is 0 in the unescaped key name)\&.
.PP
The syntax, semantics and conventions of key names is now documented in detail: https://doc.libelektra.org/api/0.8.8/html/group__keyname.html
.PP
\fBksNew()\fP does now return a keyset with a properly set cursor (ksRewind)\&.
.PP
Because its always possible that software relies on bugs the better way to deal with such a situation (as the \fBkeySetBaseName()\fP situation described above) is to provide the same function twice\&. Manuel said he will create a prototype to introduce symbol versioning in Elektra\&. With that, old customers would still receive the old behaviour, but people compiling against a new version would get the new behaviour\&. So in one of the next releases we will also avoid semantic interface changes when there is a valid use case for it (there is none if the program e\&.g\&. crashes)\&.
.PP
Symbol versioning also allows one to compile against old versions on purpose if you do not want the new behaviour\&.
.PP
We have prepared an ABI-test suite, that also checks behaviour, for that purpose, but we also improved testing in other parts:
.PP
.IP "\(bu" 2
(New Test strategy)[/doc/TESTING\&.md]
.IP "\(bu" 2
New resolver tests for conflicts (needs tty)
.PP
.PP
If you try to execute test_ks from 0\&.8\&.7 with libelektra 0\&.8\&.8 it will crash, but not because of any incompatibility, but because of \fCstrcmp\fP in the test itself gets a null pointer\&. The pointer is now null, because ksNew correctly rewinds its internal cursor (see above)\&. Amusingly, it says on that line 94 in test_ks\&.c: // TODO: why is the cursor here?
.PP
see above for more information:
.PP
.IP "\(bu" 2
\fCkeyAddName\fP \&.\&. add key name without escaping, like keySetName
.IP "\(bu" 2
\fCkeyUnescapedName\fP \&.\&. get access to null-separated unescaped name
.IP "\(bu" 2
\fCkeyLock\fP \&.\&. to allow one to secure keys against modifications
.PP
.PP
some new ideas:
.PP
.IP "\(bu" 2
\fCkeySetStringF\fP \&.\&. printf format-style changing of the key string
.IP "\(bu" 2
\fCelektraKeySetName\fP \&.\&. to allow one to set meta + cascading keys
.PP
.PP
\fC\fBelektraArrayIncName()\fP\fP now works correctly with empty arrays embedded in other arrays (yajl+line plugin)
.PP
\fC\fBelektraArrayValidateName()\fP\fP was also added, thanks to Felix\&.
.PP
These methods are declared in the file \fC\fBkdbproposal\&.h\fP\fP but do not guarantee any forms of compatibility (they might even be removed)\&.
.PP
Many issues were resolved as you can see in github: https://github.com/ElektraInitiative/libelektra/issues Alone for the milestone 0\&.8\&.8 we closed 17 issues, including those mentioned in 'Compatibility'\&. Other issues (not all were tracked on github):
.PP
.IP "\(bu" 2
fix undefined errors in \fC\fBkdbOpen()\fP\fP or \fC\fBkdbClose()\fP\fP
.IP "\(bu" 2
Now Python 2+3 work in parallel
.IP "\(bu" 2
python2 interpreter is found correctly (also on Arch)
.IP "\(bu" 2
Sentinel now makes sure that you cannot forget \fCKS_END\fP to end \fCksNew\fP
.IP "\(bu" 2
Fixes for architecture-specific problems by Pino
.IP "\(bu" 2
fix \&.pc file
.IP "\(bu" 2
fix compilation problem with \fCKDB_MAX_PATH_LENGTH\fP
.IP "\(bu" 2
tmpnam to mkstemp (security)
.IP "\(bu" 2
make test data naming consistent (thanks Pino)
.IP "\(bu" 2
use \fCLIB_SUFFIX for TARGET_TOOL_EXEC_FOLDER\fP thanks to Kai Uwe
.IP "\(bu" 2
Fix search for boost (thank Pino)
.PP
.PP
Thanks to Pino Toscano Elektra 0\&.8\&.7-4 is now available in Debian Testing: https://packages.debian.org/search?keywords=elektra So it is only a matter of time that other (debian-based) distributions will follow and replace the dusty Elektra 0\&.7\&.
.PP
Debian Continuous Integration http://ci.debian.net/packages/e/elektra (thanks Pino) greatly complement our tests running on https://build.libelektra.org/
.PP
Elektra’s buildserver also was improved:
.PP
.IP "\(bu" 2
now also compiles with icc
.IP "\(bu" 2
runs \fCmake run_memcheck\fP
.IP "\(bu" 2
checks if plugins are added correctly in-source
.IP "\(bu" 2
runs ABI + behavioral tests
.PP
.PP
Raffael Pancheri now made a merge request for qt-gui https://github.com/ElektraInitiative/libelektra/pull/103/files in which copy, paste and delete of keys already works\&. It is, however, still work in progress\&.
.PP
Manuel Mausz made great progress in script-based Elektra plugins\&. He is also working on glib+gobject-introspection based bindings\&. He investigated some issues, e\&.g\&. a crash of the python binding which was only triggered if python3 is build with a specific flag/module combination, see: https://github.com/ElektraInitiative/libelektra/issues/25
.PP
You can download the release from:
.PP
http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.8.tar.gz
.PP
.IP "\(bu" 2
size: 1644441
.IP "\(bu" 2
md5sum: fe11c6704b0032bdde2d0c8fa5e1c7e3
.IP "\(bu" 2
sha1: 16e43c63cd6d62b9fce82cb0a33288c390e39d12
.IP "\(bu" 2
sha256: ae75873966f4b5b5300ef5e5de5816542af50f35809f602847136a8cb21104e2
.PP
.PP
already built API-Docu can be found here:
.PP
https://doc.libelektra.org/api/0.8.8/html/
.PP
Best regards, Markus 
