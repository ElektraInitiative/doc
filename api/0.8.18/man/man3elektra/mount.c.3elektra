.TH "mount.c" 3elektra "Sat Sep 17 2016" "Version 0.8.18" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mount.c \- 
.PP
Interna of mount functionality\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'kdbinternal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBelektraMountOpen\fP (KDB *kdb, KeySet *config, KeySet *modules, Key *errorKey)"
.br
.RI "\fICreates a trie from a given configuration\&. \fP"
.ti -1c
.RI "int \fBelektraMountDefault\fP (KDB *kdb, KeySet *modules, int inFallback, Key *errorKey)"
.br
.RI "\fIReopens the default backend and mounts the default backend if needed\&. \fP"
.ti -1c
.RI "int \fBelektraMountModules\fP (KDB *kdb, KeySet *modules, Key *errorKey)"
.br
.RI "\fIMount all module configurations\&. \fP"
.ti -1c
.RI "int \fBelektraMountVersion\fP (KDB *kdb, Key *errorKey)"
.br
.RI "\fIMount the version backend\&. \fP"
.ti -1c
.RI "int \fBelektraMountBackend\fP (KDB *kdb, Backend *backend, Key *errorKey)"
.br
.RI "\fIMounts a backend into the trie\&. \fP"
.ti -1c
.RI "Key * \fBelektraMountGetMountpoint\fP (KDB *handle, const Key *where)"
.br
.RI "\fILookup a mountpoint in a handle for a specific key\&. \fP"
.ti -1c
.RI "Backend * \fBelektraMountGetBackend\fP (KDB *handle, const Key *key)"
.br
.RI "\fILookup a backend handle for a specific key\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interna of mount functionality\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/COPYING or http://www.libelektra.org) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int elektraMountBackend (KDB *kdb, Backend *backend, Key *errorKey)"

.PP
Mounts a backend into the trie\&. 
.PP
\fBPrecondition:\fP
.RS 4
user must pass correctly allocated backend 
.RE
.PP
\fBPostcondition:\fP
.RS 4
sets reference counter of backend
.RE
.PP
\fBWarning:\fP
.RS 4
in case of init and default backends, the reference counter needs to be modified \fIafter\fP calling elektraMountBackend\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fIbackend\fP the backend to mount 
.br
\fIerrorKey\fP the key used to report warnings 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.br
\fI1\fP on success 
.RE
.PP

.SS "int elektraMountDefault (KDB *kdb, KeySet *modules, intinFallback, Key *errorKey)"

.PP
Reopens the default backend and mounts the default backend if needed\&. 
.PP
\fBPrecondition:\fP
.RS 4
Default Backend is closed\&. elektraMountOpen was executed before\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fImodules\fP the current list of loaded modules 
.br
\fIerrorKey\fP the key used to report warnings 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on error 
.br
\fI0\fP on success 
.RE
.PP

.SS "Backend* elektraMountGetBackend (KDB *handle, const Key *key)"

.PP
Lookup a backend handle for a specific key\&. The required canonical name is ensured by using a key as parameter, which will transform the key to canonical representation\&.
.PP
Will return handle when no more specific KDB could be found\&.
.PP
If key is 0 or invalid the default backend will be returned\&.
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP is the data structure, where the mounted directories are saved\&. 
.br
\fIkey\fP the key, that should be looked up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the backend handle associated with the key 
.RE
.PP

.SS "Key* elektraMountGetMountpoint (KDB *handle, const Key *where)"

.PP
Lookup a mountpoint in a handle for a specific key\&. Will return a key representing the mountpoint or null if there is no appropriate mountpoint e\&.g\&. its the root mountpoint\&.
.PP
\fBExample:\fP
.RS 4

.PP
.nf
1 Key * key = keyNew ("system/template");
2 KDB * handle = kdbOpen();
3 Key *mountpoint=0;
4 mountpoint=kdbGetMountpoint(handle, key);
5 
6 printf("The backend I am using is %s mounted in %s\n",
7         keyValue(mountpoint),
8         keyName(mountpoint));
9 kdbClose (handle);
10 keyDel (key);

.fi
.PP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP is the data structure, where the mounted directories are saved\&. 
.br
\fIwhere\fP the key, that should be looked up\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the mountpoint associated with the key 
.RE
.PP

.SS "int elektraMountModules (KDB *kdb, KeySet *modules, Key *errorKey)"

.PP
Mount all module configurations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fImodules\fP the current list of loaded modules 
.br
\fIerrorKey\fP the key used to report warnings
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP if not rootkey was found 
.br
\fI0\fP otherwise 
.RE
.PP

.SS "int elektraMountOpen (KDB *kdb, KeySet *config, KeySet *modules, Key *errorKey)"

.PP
Creates a trie from a given configuration\&. The config will be deleted within this function\&.
.PP
\fBNote:\fP
.RS 4
elektraMountDefault is not allowed to be executed before
.RE
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fImodules\fP the current list of loaded modules 
.br
\fIconfig\fP the configuration which should be used to build up the trie\&. 
.br
\fIerrorKey\fP the key used to report warnings 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.br
\fI0\fP on success 
.RE
.PP

.SS "int elektraMountVersion (KDB *kdb, Key *errorKey)"

.PP
Mount the version backend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkdb\fP the handle to work with 
.br
\fIerrorKey\fP the key used to report warnings
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP on success 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
