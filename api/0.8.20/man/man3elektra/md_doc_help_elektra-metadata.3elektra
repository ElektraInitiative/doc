.TH "md_doc_help_elektra-metadata" 3elektra "Tue Oct 31 2017" "Version 0.8.20" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_doc_help_elektra-metadataelektra-metadata(7) -- metadata 
 \- \fBMetadata\fP is data about data\&. In earlier versions of Elektra, there has been a limited number of metadata entries suited for \fCfilesys\fP\&. For \fCfilesys\fP this was efficient, but it was of limited use for every other backend\&. This situation has now changed fundamentally by introducing arbitrary metadata\&.
.PP
Metadata has different purposes:
.PP
.IP "\(bu" 2
Traditionally Elektra used metadata to carry file system semantics\&. The backend \fCfilesys\fP stores file metadata (File metadata in POSIX is returned by \fCstat()\fP) in a \fIstruct\fP with the same name\&. It contains a file type (directory, symbolic link,\&.\&.) as well as other metadata like uid, gid, owner, mode, atime, mtime and ctime\&. into the \fCKey\fP objects\&. This solution, however, only makes sense when each file shelters only one \fCKey\fP object\&.
.IP "\(bu" 2
The metaname \fCbinary\fP shows if a \fCKey\fP object contains binary data\&. Otherwise it has a null-terminated C string\&.
.IP "\(bu" 2
An application can set and get a flag in \fCKey\fP objects\&.
.IP "\(bu" 2
Comments and owner, together with the items above, were the only metadata possible before arbitrary metadata was introduced\&.
.IP "\(bu" 2
Further metadata can hold information on how to check and validate keys using types or regular expressions\&. Additional constraints concerning the validity of values can be convenient\&. Maximum length, forbidden characters and a specified range are examples of further constraints\&.
.IP "\(bu" 2
They can denote when the value has changed or can be informal comments about the content or the character set being used\&.
.IP "\(bu" 2
They can express the information the user has about the key, for example, comments in different languages\&. Language specific information can be supported by simply adding a unique language code to the metaname\&.
.IP "\(bu" 2
They can represent information to be used by storage plugins\&. Information can be stored as syntactic, semantic or additional information rather than text in the key database\&. This could be ordering or version information\&.
.IP "\(bu" 2
They can be interpreted by plugins, which is the most important purpose of metadata\&. Nearly all kinds of metadata mentioned above can belong to this category\&.
.IP "\(bu" 2
Metadata is used to pass error or warning information from plugins to the application\&. The application can decide to present it to the user\&. The information is uniquely identified by numerical codes\&. Metadata can also embed descriptive text specifying a reason for the error\&.
.IP "\(bu" 2
Applications can remember something about keys in metadata\&. Such metadata generalizes the application-defined flag\&.
.IP "\(bu" 2
A more advanced idea is to use metadata to generate forms in a programmatic way\&. While it is certainly possible to store the necessary expressive metadata, it is plenty of work to define the semantics needed to do that\&.
.PP
.PP
.SS "Usage"
.PP
Every key-value pair can have an arbitrary number of metakeys with metavalues attached\&. Identical to keys, metakeys are unique, but only within its key they are attached to\&.
.PP
To create a metakey, use \fBkdb-setmeta(1)\fP, to get metadata \fBkdb-getmeta(1)\fP\&.
.PP
The preferred way to use metadata is to set all metadata in the \fCspec\fP namespace and let the \fCspec\fP plugin copy the metadata to all other namespaces\&. 
