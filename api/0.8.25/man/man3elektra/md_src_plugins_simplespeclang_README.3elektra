.TH "md_src_plugins_simplespeclang_README" 3elektra "Sun Nov 18 2018" "Version 0.8.25" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_simplespeclang_READMEPlugin: simplespeclang 
 \- 
.IP "\(bu" 2
infos = Information about the simplespeclang plugin is in keys below
.IP "\(bu" 2
infos/author = Markus Raab elektra@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides = storage
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = getstorage setstorage
.IP "\(bu" 2
infos/status = maintained specific nodep preview experimental difficult unfinished old concept
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = provides conceptual specification language
.PP
.PP
See \fBthe validation tutorial\fP for introduction\&. This plugin provides a conceptual simplistic specification language\&.
.PP
It currently supports to specify:
.PP
.IP "\(bu" 2
structure (which keys are allowed)
.IP "\(bu" 2
enums (which values are allowed)
.IP "\(bu" 2
multi-enums (by name convention: if name ends with \fC*\fP)
.PP
.PP
.SS "Purpose"
.PP
The plugin demonstrates how simple a configuration specification can be within the Elektra framework\&. It is conceptual and mainly for educational usage\&. You can base your plugins
.PP
.SS "Configuration"
.PP
.IP "\(bu" 2
\fC/keyword/enum\fP, default \fCenum\fP: used as keywords for enum definitions\&.
.IP "\(bu" 2
\fC/keyword/assign\fP, default \fC=\fP: used as keywords for assignment\&.
.PP
.PP
Configuration within the specification language:
.PP
.IP "\(bu" 2
\fCmountpoint <filename>\fP: defines a file-name for \fCkdb spec-mount\fP
.IP "\(bu" 2
\fCplugins <pluginspec>\fP: defines list of plugins for \fCkdb spec-mount\fP
.PP
.PP
.SS "Usage"
.PP
First you need to mount the plugin to spec, e\&.g\&.:
.PP
.PP
.nf
sudo kdb mount myspec\&.ssl spec/test simplespeclang
.fi
.PP
.PP
Then you can write your specification (with default keywords):
.PP
.PP
.nf
cat > `kdb file spec/test` << HERE
mountpoint filename\&.txt
enum key = value1 value2 value3
enum key2 = value1 value2
HERE
.fi
.PP
.PP
And finally you need a specification mount, so that all necessary plugins are present:
.PP
.PP
.nf
kdb spec-mount /test
.fi
.PP
.PP
Also make sure that \fCspec\fP is mounted as global plugin:
.PP
.PP
.nf
kdb global-mount
.fi
.PP
.PP
Then you are only able to write valid keys:
.PP
.PP
.nf
kdb set /test/key value1  # accepted
kdb set /test/key2 value3 # rejected, no value3 for key2
kdb set /test/something else # rejected, no key something
.fi
.PP
 
