.TH "src_libs_README_md" 3elektra "Sun Jul 10 2022" "Version 0.9.10" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src_libs_README_md \- elektra-libs(7) -- libs overview 
 
.SH "Highlevel APIs"
.PP
.SS "Highlevel"
.PP
.nf
libelektra-highlevel\&.so
.fi
.PP
.PP
Contains the \fB\fBhighlevel API\fP\fP\&. See \fBalso examples\fP\&.
.SS "Notification"
.PP
.nf
libelektra-notification\&.so
.fi
.PP
.PP
\fB\fBnotification\fP\fP provides the \fCnotification API\fP\&. Usage examples:
.PP
.IP "\(bu" 2
\fCBasic notifications using polling\fP
.IP "\(bu" 2
\fCUsing asynchronous I/O bindings\fP
.IP "\(bu" 2
\fCReload KDB when Elektra's configuration has changed\fP
.PP
.SH "Base Elektra Libraries"
.PP
Since version \fB\fB0\&.8\&.15\fP\fP \fB\fBlibelektra\fP\fP is split into following libraries:
.PP
Overview of LibrariesOverview of LibrariesOverview of LibrariesOverview of Libraries
.SS "Libkdb"
.PP
.nf
libelektra-kdb\&.so
.fi
.PP
.PP
Accesses the configuration files by orchestrating the plugins\&. The implementation lives in \fBelektra\fP\&.
.PP
It coordinates the interactions between the applications and the plugins\&.
.PP
\fB\fBloader\fP\fP contains source files that implement the plugin loader functionality as used by \fClibelektra-kdb\fP\&.
.SS "Libcore"
.PP
.nf
libelektra-core\&.so
<kdbhelper\&.h>
<kdb\&.h> (key* and ks*)
.fi
.PP
.PP
Contains the fundamental data-structures every participant of Elektra needs to link against\&. It should be the only part that access the internal data structures\&. The implementation lives in \fBelektra\fP\&.
.SS "Libease"
.PP
.nf
libelektra-ease\&.so
.fi
.PP
.PP
\fB\fBlibease\fP\fP contains data-structure operations on top of libcore which do not depend on internals\&. Applications and plugins can choose to not link against it if they want to stay minimal\&. Its main goal is to make programming with Elektra easier if some extra kB are not an issue\&.
.SS "Libplugin"
.PP
.nf
libelektra-plugin\&.so
.fi
.PP
.PP
\fB\fBlibplugin\fP\fP contains \fCelektraPlugin*\fP symbols to be used by plugins\&.
.SS "Libmeta"
.PP
.nf
libelektra-meta\&.so
.fi
.PP
.PP
\fB\fClibmeta\fP\fP contains metadata operations as described in \fB\fCMETADATA\&.ini\fP\fP\&. Currently mainly contains legacy code and some generic metadata operations\&.
.SS "Libelektra"
Is a legacy library that provides the same functionality as \fClibelektra-kdb\fP and \fClibelektra-core\fP\&. The sources can be found in \fB\fBlibelektra\fP\fP\&.
.SH "Other Libraries"
.PP
.SS "Libpluginprocess"
.PP
.nf
libelektra-pluginprocess\&.so
.fi
.PP
.PP
\fB\fBlibpluginprocess\fP\fP contains functions aiding in executing plugins in a separate process and communicating with those child processes\&. This child process is forked from Elektra's main process each time such plugin is used and gets closed again afterwards\&. It uses a simple communication protocol based on a KeySet that gets serialized through a pipe via the dump plugin to orchestrate the processes\&.
.PP
This is useful for plugins which cause memory leaks to be isolated in an own process\&. Furthermore this is useful for runtimes or libraries that cannot be reinitialized in the same process after they have been used\&.
.SS "Libtools"
\fB\fBlibtools\fP\fP is a high-level C++ shared-code for tools\&. It includes:
.PP
.IP "\(bu" 2
plugin interface
.IP "\(bu" 2
backend interface
.IP "\(bu" 2
3-way merge
.PP
.SS "Utility"
\fB\fBlibutility\fP\fP provides utility functions to be used in plugins\&.
.SS "Libinvoke"
.PP
.nf
libelektra-invoke\&.so
.fi
.PP
.PP
\fB\fBlibinvoke\fP\fP provides a simple API allowing us to call functions exported by plugins\&.
.SS "IO"
.PP
.nf
libelektra-io\&.so
.fi
.PP
.PP
\fB\fBio\fP\fP provides the \fCcommon API\fP for using asynchronous I/O bindings\&.
.SS "Globbing"
.PP
.nf
libelektra-globbing\&.so
.fi
.PP
.PP
\fB\fBglobbing\fP\fP provides globbing functionality for Elektra\&.
.PP
The supported syntax is a superset of the syntax used by \fCglob(7)\fP\&. The following extensions are supported:
.PP
.IP "\(bu" 2
\fC#\fP, when used as \fC/#/\fP (or \fC/#"\fP at the end of the pattern), matches a valid array item
.IP "\(bu" 2
\fC_\fP is the exact opposite; it matches anything but a valid array item
.IP "\(bu" 2
if the pattern ends with \fC/__\fP, matching key names may contain arbitrary suffixes
.PP
.PP
For more info take a look a the documentation of \fC\fBelektraKeyGlob()\fP\fP and \fC\fBelektraKsGlob()\fP\fP\&. 
