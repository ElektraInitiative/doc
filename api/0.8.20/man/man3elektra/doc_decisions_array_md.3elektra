.TH "doc_decisions_array_md" 3elektra "Tue Oct 31 2017" "Version 0.8.20" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_array_mdArrays 
 \- 
.SS "Issue"
.PP
Currently it is inefficient to detect the length of an array and it is impossible to know if an key (without subkeys) should be an array or not\&.
.PP
For the latter problem different workarounds exist, such as \fC###empty_array\fP in \fCyajl\fP\&.
.PP
.SS "Constraints"
.PP
.IP "\(bu" 2
None
.PP
.PP
.SS "Assumptions"
.PP
.IP "\(bu" 2
None
.PP
.PP
.SS "Considered Alternatives"
.PP
.IP "\(bu" 2
\fC###empty_array\fP as in \fCyajl\fP, problem: does not allow efficient access of first element
.IP "\(bu" 2
store length (and not last element), problem: needs prepending of \fC#_\&.\&.\&.\fP
.IP "\(bu" 2
store element after last element (C++-Style), problem: very unusual style
.IP "\(bu" 2
use value and not metadata array, problem: is ambiguous
.PP
.PP
.SS "Decision"
.PP
Store length in metadata \fCarray\fP of key, or keep empty if empty array\&. For example (\fCni syntax\fP, sections used for metadata):
.PP
.PP
.nf
myarray/#0 = value0
myarray/#1 = value1
myarray/#2 = value2
myarray/#3 = value3
myarray/#4 = value4
myarray/#5 = value5
[myarray]
  array = #5
.fi
.PP
.PP
.SS "Argument"
.PP
.IP "\(bu" 2
Is very similar to \fCbinary\fP metadata\&.
.IP "\(bu" 2
The key alone suffices to know if its an array
.IP "\(bu" 2
one can distinguish an array with keys that are called by chance #0
.PP
.PP
.SS "Implications"
.PP
.IP "\(bu" 2
yajl needs to be fixed
.IP "\(bu" 2
metadata library needs to be adapted
.IP "\(bu" 2
spec plugin needs to be fixed
.PP
.PP
.SS "Related decisions"
.PP
.IP "\(bu" 2
\fBGlobal Validation\fP
.PP
.PP
.SS "Notes"
.PP
https://github.com/ElektraInitiative/libelektra/issues/182 
