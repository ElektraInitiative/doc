.TH "doc_api_review_core_keyGetName_md" 3elektra "Mon Apr 12 2021" "Version 0.9.5" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_api_review_core_keyGetName_mdkeyGetName 
 \- 
.IP "\(bu" 2
start = 2021-02-22 13:40
.IP "\(bu" 2
end = 2021-02-22 14:20
.IP "\(bu" 2
moderator = Stefan Hanreich stefanhani@gmail.com
.IP "\(bu" 2
reviewer = Philipp Gackstatter
.PP
.PP
\fCssize_t \fBkeyGetName(const Key *key, char *returnedName, size_t maxSize)\fP\fP
.PP
(bullet points are in order of appearance)
.PP
.IP "\(bu" 2
[ ] First line explains briefly what the function does
.IP "  \(bu" 4
[ ] owner still recent?
.PP

.IP "\(bu" 2
[ ] Simple example or snippet how to use the function
.IP "  \(bu" 4
[ ] move up
.PP

.IP "\(bu" 2
[ ] Longer description of function containing common use cases
.IP "  \(bu" 4
[ ] maxSize special case has very long description (>50% of body)
.IP "  \(bu" 4
[ ] maxSize special case move description to pre / post / return values
.IP "  \(bu" 4
[ ] mention explicitly, that user has to manage their buffer
.IP "  \(bu" 4
[ ] move special case 'not enough space' to return values / pre / post
.PP

.IP "\(bu" 2
[ ] Description of functions reads nicely
.IP "  \(bu" 4
[ ] remove / define abbreviated (make it more explicit)
.IP "  \(bu" 4
[ ] 'Writes keyName of `key` into the provided buffer `returnedName` if it is shorter than `maxSize`'
.PP

.IP "\(bu" 2
[ ] \fC@pre\fP
.IP "  \(bu" 4
[ ] \fCkey\fP is a valid Key
.IP "  \(bu" 4
[ ] \fCreturnedName\fP is a pre-allocated buffer
.IP "  \(bu" 4
[ ] maxSize is the size of \fCreturnedName\fP
.PP

.IP "\(bu" 2
[ ] \fC@post\fP
.IP "  \(bu" 4
[ ] \fCreturnedName\fP contains the name of the Key
.IP "  \(bu" 4
[ ] \fCkey\fP is not modified
.PP

.IP "\(bu" 2
[ ] \fC@invariant\fP
.IP "  \(bu" 4
[ ] \fCkey\fP is not modified
.PP

.IP "\(bu" 2
[ ] \fC@param\fP for every parameter
.IP "  \(bu" 4
[ ] \fCreturnedName\fP: pre-allocated buffer to write the key name into
.PP

.IP "\(bu" 2
[ ] \fC@return\fP / \fC@retval\fP
.IP "  \(bu" 4
[ ] \fC1\fP: when only a null-terminator was written
.IP "  \(bu" 4
[ ] \fC-1\fP: then -> than
.IP "  \(bu" 4
[ ] \fC-1\fP: standardize / change 'keyname' / 'key name' or 'Key name'
.IP "  \(bu" 4
[ ] \fC-1\fP check if null pointer case is even still applicable
.IP "  \(bu" 4
[ ] \fC-1\fP split into two lines: maxSize / NULL pointer
.PP

.IP "\(bu" 2
[ ] \fC@since\fP
.IP "  \(bu" 4
[ ] add
.PP

.IP "\(bu" 2
[x] `\fC\fP
.IP "\(bu" 2
\fC[ ]\fP
.PP
\fBSee also:\fP
.RS 4
`
.IP "  \(bu" 4
[ ] \fBkeyName\fP
.IP "  \(bu" 4
[ ] \fBkeyGetUnescapedName\fP
.IP "  \(bu" 4
[ ] \fBkeyGetBaseName\fP
.IP "  \(bu" 4
[ ] \fBkeyGetNamespace\fP
.PP
.RE
.PP

.PP
.PP
.IP "\(bu" 2
Abbreviations used in function names must be defined in the \fBGlossary\fP
.IP "\(bu" 2
[x] Function names should neither be too long, nor too short
.IP "\(bu" 2
[ ] Function name should be clear and unambiguous
.IP "  \(bu" 4
[ ] \fCkeyName\fP vs \fC\fBkeyGetName()\fP\fP
.PP

.IP "\(bu" 2
[ ] Abbreviations used in parameter names must be defined in the \fBGlossary\fP
.IP "  \(bu" 4
[ ] max - maybe just rename to \fCbufferSize\fP
.PP

.IP "\(bu" 2
[ ] Parameter names should neither be too long, nor too short
.IP "  \(bu" 4
[ ] \fCreturnedName\fP -> \fCname\fP / \fCnameBuffer\fP
.PP

.IP "\(bu" 2
[ ] Parameter names should be clear and unambiguous
.IP "  \(bu" 4
[ ] \fCmaxSize\fP -> \fCbufferSize\fP
.PP

.PP
.PP
(only in PRs)
.PP
.IP "\(bu" 2
\fBSymbol versioning\fP is correct for breaking changes
.IP "\(bu" 2
ABI/API changes are forward-compatible (breaking backwards-compatibility to add additional symbols is fine)
.PP
.PP
.IP "\(bu" 2
Function parameters should use enum types instead of boolean types wherever sensible
.IP "\(bu" 2
[x] Wherever possible, function parameters should be \fCconst\fP
.IP "\(bu" 2
[x] Wherever possible, return types should be \fCconst\fP
.IP "\(bu" 2
[x] Functions should have the least amount of parameters feasible
.PP
.PP
.IP "\(bu" 2
[x] Functions should do exactly one thing
.IP "\(bu" 2
[x] Function name has the appropriate prefix
.IP "\(bu" 2
[ ] Order of signatures in kdb\&.h\&.in is the same as Doxygen
.IP "  \(bu" 4
wrong order
.PP

.IP "\(bu" 2
[x] No functions with similar purpose exist
.PP
.PP
.IP "\(bu" 2
[ ] Memory Management should be handled by the function wherever possible
.IP "  \(bu" 4
[ ] pass variable and return size instead
.IP "  \(bu" 4
[ ] remove \fCmaxSize\fP param
.PP

.PP
.PP
.IP "\(bu" 2
[x] Function is easily extensible, e\&.g\&., with flags
.IP "\(bu" 2
[ ] Documentation does not impose limits, that would hinder further extensions
.IP "  \(bu" 4
[ ] nothing is written on maxSize < nameSize (would be fixed with memory management suggestion from above)
.PP

.PP
.PP
.IP "\(bu" 2
[ ] Function code is fully covered by tests
.IP "  \(bu" 4
Lines 365 / 366
.PP

.IP "\(bu" 2
[ ] All possible error states are covered by tests
.IP "  \(bu" 4
test empty string
.PP

.IP "\(bu" 2
All possible enum values are covered by tests
.IP "\(bu" 2
[x] No inconsistencies between tests and documentation
.PP
.PP
Different error codes for different errors
