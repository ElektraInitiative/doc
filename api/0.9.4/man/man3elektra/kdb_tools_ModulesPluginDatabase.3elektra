.TH "kdb::tools::ModulesPluginDatabase" 3elektra "Mon Feb 1 2021" "Version 0.9.4" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdb::tools::ModulesPluginDatabase \- A plugin database that works with installed modules\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <plugindatabase\&.hpp>\fP
.PP
Inherits \fBkdb::tools::PluginDatabase\fP\&.
.PP
Inherited by \fBkdb::tools::MockPluginDatabase\fP, and kdb::tools::PluginVariantDatabase\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::vector< std::string > \fBlistAllPlugins\fP () const"
.br
.RI "list all plugins "
.ti -1c
.RI "std::string \fBlookupInfo\fP (\fBPluginSpec\fP const &spec, std::string const &which) const"
.br
.RI "lookup contract clauses or dynamic information "
.ti -1c
.RI "func_t \fBgetSymbol\fP (\fBPluginSpec\fP const &whichplugin, std::string const &which) const"
.br
.RI "get exported plugin symbol "
.ti -1c
.RI "\fBPluginSpec\fP \fBlookupMetadata\fP (std::string const &which) const"
.br
.RI "lookup which plugin handles metadata "
.ti -1c
.RI "\fBPluginSpec\fP \fBlookupProvides\fP (std::string const &\fBprovides\fP) const"
.br
.RI "lookup which plugin is a provider for that plugin "
.ti -1c
.RI "std::map< int, \fBPluginSpec\fP > \fBlookupAllProvidesWithStatus\fP (std::string const &\fBprovides\fP) const"
.br
.RI "looks up all plugins which are a suitable provider "
.ti -1c
.RI "std::vector< \fBPluginSpec\fP > \fBlookupAllProvides\fP (std::string const &\fBprovides\fP) const"
.br
.RI "looks up all plugins which are a suitable provider "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A plugin database that works with installed modules\&. 
.SH "Member Function Documentation"
.PP 
.SS "PluginDatabase::func_t kdb::tools::ModulesPluginDatabase::getSymbol (\fBPluginSpec\fP const & whichplugin, std::string const & which) const\fC [virtual]\fP"

.PP
get exported plugin symbol 
.PP
\fBParameters:\fP
.RS 4
\fIwhichplugin\fP from which plugin? 
.br
\fIwhich\fP which symbol would you like to look up?
.RE
.PP
\fBReturns:\fP
.RS 4
the function pointer to the exported symbol or NULL if the symbol was not found 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.PP
Reimplemented in \fBkdb::tools::MockPluginDatabase\fP\&.
.SS "std::vector< std::string > kdb::tools::ModulesPluginDatabase::listAllPlugins () const\fC [virtual]\fP"

.PP
list all plugins If Elektra is compiled with plugins, it will search for shared libraries\&. In any case, if no shared libraries were found it will fallback to an internal list (plugins that were compiled together with Elektra)\&.
.PP
\fBReturns:\fP
.RS 4
a list of all available plugins 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.PP
Reimplemented in \fBkdb::tools::MockPluginDatabase\fP\&.
.SS "std::vector< \fBPluginSpec\fP > kdb::tools::ModulesPluginDatabase::lookupAllProvides (std::string const & provides) const\fC [virtual]\fP"

.PP
looks up all plugins which are a suitable provider 
.PP
\fBNote:\fP
.RS 4
in case a plugin name is provided, the plugin with the name will also be part of the result\&. But if there are other plugins providing the requirement, then they will also be part of the result\&. The ordering of the resulting vector has no special meaning\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBReturns:\fP
.RS 4
a vector of plugins offering the requirement or are named after it 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.SS "std::map< int, \fBPluginSpec\fP > kdb::tools::ModulesPluginDatabase::lookupAllProvidesWithStatus (std::string const & provides) const\fC [virtual]\fP"

.PP
looks up all plugins which are a suitable provider 
.PP
\fBNote:\fP
.RS 4
in case a plugin name is provided, the plugin with the name will also be part of the result\&. But if there are other plugins providing the requirement, then they will also be part of the result\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBReturns:\fP
.RS 4
a map of plugins with their status offering the requirement or are named after it 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.SS "std::string kdb::tools::ModulesPluginDatabase::lookupInfo (\fBPluginSpec\fP const & whichplugin, std::string const & which) const\fC [virtual]\fP"

.PP
lookup contract clauses or dynamic information 
.PP
\fBParameters:\fP
.RS 4
\fIwhichplugin\fP about which plugin? 
.br
\fIwhich\fP about which clause in the contract?
.RE
.PP
\fBReturns:\fP
.RS 4
the clause of the contract 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.PP
Reimplemented in \fBkdb::tools::MockPluginDatabase\fP\&.
.SS "\fBPluginSpec\fP kdb::tools::ModulesPluginDatabase::lookupMetadata (std::string const & which) const\fC [virtual]\fP"

.PP
lookup which plugin handles metadata 
.PP
\fBParameters:\fP
.RS 4
\fIwhich\fP the metadata of interest
.RE
.PP
\fBReturns:\fP
.RS 4
the best suited plugin specification which provides it 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.
.SS "\fBPluginSpec\fP kdb::tools::ModulesPluginDatabase::lookupProvides (std::string const & provides) const\fC [virtual]\fP"

.PP
lookup which plugin is a provider for that plugin 
.PP
\fBNote:\fP
.RS 4
will return a \fBPluginSpec\fP with getName() == provides if the string provides actually is a plugin name\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIprovides\fP is the provider to find
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINoPlugin\fP if no plugin that provides the functionality could be found
.RE
.PP
\fBReturns:\fP
.RS 4
the plugin itself or the best suited plugin specification which provides it 
.RE
.PP

.PP
Implements \fBkdb::tools::PluginDatabase\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
