.TH "doc_GOALS_md" 3elektra "Fri Jul 9 2021" "Version 0.9.7" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_GOALS_md \- Goals 
 The goal of Elektra is to make it trivial to access and specify configuration settings by an API\&. This helps in achieving the following goals:
.PP
.IP "\(bu" 2
Improve robustness of configuration systems by
.IP "  \(bu" 4
Avoiding common programming errors through the usage of the API\&.
.IP "  \(bu" 4
Getting more guarantees when accessing configuration settings\&.
.IP "  \(bu" 4
Rejecting invalid configurations\&.
.IP "  \(bu" 4
Avoiding reimplementation of parsers for the same configuration file format\&.
.PP

.IP "\(bu" 2
Allow software to be better integrated via configuration settings (e\&.g\&. via \fCFreedesktop\fP)\&.
.IP "\(bu" 2
Postpone some decisions from programmers to maintainers/administrators:
.IP "  \(bu" 4
Rejecting unwanted configuration settings\&.
.IP "  \(bu" 4
Uniformity of configuration access (logging, vcs commit, notifications)\&.
.IP "  \(bu" 4
Syntax of the configuration files (with limitations, see below)\&.
.PP

.PP
.PP
Elektra follows following goals, in order of preference\&. If goals conflict, the higher goal takes precedence\&.
.SH "0\&. Stability"
.PP
People need to be able to rely on the API/ABI to be stable\&. They expect their configuration settings to continue working, with minimal maintenance burden\&. In particular following parts must be immutable:
.PP
.IP "\(bu" 2
The API: Within a major release, the core API can only be extended\&. Every application that compiled with Elektra \fCx\&.0\&.0\fP must still compile with any \fCx\&.y\&.z\fP\&. Even with new major releases, only small adoptions in the source of applications or plugins might be needed\&.
.IP "\(bu" 2
The ABI: Even across major releases, the core ABI must stay compatible\&. Every application that links with Elektra \fCx\&.0\&.0\fP will continue to link with any future version of Elektra\&. We use \fBsymbol versioning\fP for that goal\&.
.IP "\(bu" 2
Key database and key names: Applications can rely on that whatever they once wrote into the key database, they will continue to get identical key names and values also with later versions of Elektra\&. Future extensions of the key database (e\&.g\&. new plugins) will not interfere\&.
.PP
.SH "1\&. Goal: Simplicity"
.PP
Elektra is based on key-value pairs, the simplest form of what could be called a database\&. Elektra's key value pair uniformity allows with a single concept configuration settings and configuration specifications to be written and to be introspected\&.
.PP
An overly complex system cannot be managed nor understood\&. Extensibility brings some complex issues, which need to be solved -- but in a way so that the user sees either nothing of it or only needs to understand very simple concepts\&. Special care for simplicity is taken for the users:
.PP
.IP "\(bu" 2
Endusers when reconfiguring or upgrading should never take any notice of Elektra, except that it works more robust and is better integrated\&.
.IP "\(bu" 2
Programmers should have multiple ways to take advantage of Elektra so that it flawlessly integrate with their system\&.
.IP "\(bu" 2
Plugin Programmers: it should be simple to extend Elektra in any desired way\&.
.PP
.SH "2\&. Goal: Robustness"
.PP
Configuration systems today suffer badly from:
.PP
.IP "\(bu" 2
Different behavior on different systems\&.
.IP "\(bu" 2
Missing or weak validation\&.
.IP "\(bu" 2
Faulty transformations from strings to concrete types\&.
.IP "\(bu" 2
No or misleading error messages\&.
.IP "\(bu" 2
Undefined behavior\&.
.IP "\(bu" 2
Not working migrations from one version to another\&.
.PP
.PP
We tackle this problem by introducing an abstraction layer where these problems are dealt with\&. The goal is that for improvements in these areas only code changes within Elektra are needed (and not within applications using Elektra)\&. This makes the application's code not only portable towards more systems, but also enables global improvements in configuration systems\&.
.SH "3\&. Goal: Extensibility"
.PP
There are many variants of
.PP
.IP "\(bu" 2
Storage formats\&.
.IP "\(bu" 2
Frontend integrations\&.
.IP "\(bu" 2
Bindings\&.
.PP
.PP
Nearly every aspect of Elektra must be extremely extensible\&. On the other side semantics must be very clear and well defined so that this extensible system works reproducible and predictable\&.
.PP
Only key-value pairs are the common factor and a way to get and set them, everything else is an extension\&.
.SH "4\&. Goal: Performance"
.PP
Accessing configuration settings has impact on bootup and startup-time of applications\&. Elektra needs to be similar fast then current solutions\&. Ideally it should get faster because of centralized optimization endeavours where everyone using Elektra can benefit from\&.
.PP
.RS 4
Only pay for what you need\&. 
.RE
.PP
.SH "Users"
.PP
These goals are about Elektra's users, again in order of importance\&. Again, lower goals need to be ignored if goals are in conflict\&.
.SS "1\&. Application Developers"
Elektra must be easy and robust for application developers to store any configuration settings referable by keys they need to store\&. After writing configuration settings (\fCkdbSet\fP) and reading them again (\fCkdbGet\fP) they get the same KeySet (aka 'round-trip')\&.
.PP
.RS 4
This means, they must be able to store keys with any name, any string or any binary data as needed for their purpose\&. 
.RE
.PP
.SS "2\&. Administrators"
Administrators should be empowered by good error messages and validation capabilities\&. Furthermore, they should be able to use their favorite tools and configuration file formats\&.
.PP
.RS 4
There are principal limitations of nearly all configuration file formats, so Elektra cannot enable that any configuration file format can be used with any application\&. If maintainers or administrators want to change the configuration file format of some application, they need to carefully test if it works\&. 
.RE
.PP
.SS "3\&. Maintainers"
Elektra must be available everywhere and flexible enough, so that maintainers can integrate different applications by specifying and mounting\&.
.PP
.RS 4
There might be some restrictions that some applications require some plugins to be mounted for their configuration settings\&. 
.RE
.PP
.SS "4\&. Possibility to Represent any Configuration File Format"
Elektra must be powerful and flexible enough to be able to represent any configuration file format\&. We support the development of fully-conforming parsers and emitters\&.
.PP
.RS 4
This means, that given a correctly written storage plugin, a KeySet can be found that represents the configuration settings, its metadata and the hierarchical structure of the configuration file\&. 
.RE
.PP
.SH "Non-Goals:"
.PP
.IP "\(bu" 2
Support semantics that do not fit into the KeySet (key-value pairs) with an \fC\fBkdbGet()\fP\fP/\fC\fBkdbSet()\fP\fP interface\&.
.IP "\(bu" 2
Support for non-configuration issues, e\&.g\&., storing key-value data unrelated to configuration settings\&.
.IP "\(bu" 2
Elektra is not a distributed configuration management tool: use your favorite configuration management tool on top or a distributed file system below Elektra\&.
.PP
.SS "Further Readings"
.IP "\(bu" 2
Continue reading: \fBWho uses Elektra?\fP 
.PP

