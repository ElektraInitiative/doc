.TH "doc_COMPILE_md" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_COMPILE_md \- Compile 

.SS "Dependencies"
.PP
For the base system you only need cmake and build-essential (make, gcc, some unix tools)\&.
.PP
To build documentation you need doxygen, graphviz and \fCronn\fP\&.
.PP
To build pdf documentation you need pdflatex with 
.PP
.nf
texlive-fonts-recommended
texlive-latex-recommended
texlive-latex-extra

.fi
.PP
.PP
For the debian package, please refer to debian/control (in the debian branch)\&.
.PP
For the plugins, please refer to the README\&.md of the respective plugin\&.
.PP
.SS "Preparation"
.PP
Elektra uses cmake\&. Tested are cmake version 2\&.8\&.9 and version 3\&.0\&.2\&.
.PP
To configure Elektra graphically (with curses) run (\fC\&.\&.\fP belongs to command): 
.PP
.nf
mkdir build && cd build && ccmake ..

.fi
.PP
.PP
and press 'c' to configure the cache (might be necessary multiple times)\&. After applying the desired settings, press 'g' to generate the make file\&.
.PP
All options described here, can also be used with cmake rather than ccmake (\fC\&.\&.\fP does also here belong to the command): 
.PP
.nf
mkdir build && cd build && cmake -D<OPTION1>=<VAR1> -D<OPTION2>=<VAR2> ..

.fi
.PP
.PP
For information what you can use as \fCOPTION1\fP and \fCOPTION2\fP, see above\&. Note: You have to enclose a value with quotes \fC''\fP if it contains a semicolon (\fC;\fP)\&. E\&.g\&.: 
.PP
.nf
cmake -DPLUGINS="dump;resolver;yajl" ..

.fi
.PP
.PP
Some scripts in the folder of the same name may help you running cmake\&.
.PP
.SS "Compilers"
.PP
For supported compilers have a look at the automatic build farm on http://build.libelektra.org:8080/
.PP
Additionally, gcc 4\&.6 armhf is tested regularly\&.
.PP
Compiler Version Target  gcc gcc (Debian 4\&.7\&.2-5) 4\&.7\&.2 i386 gcc gcc (Debian 4\&.7\&.2-5) 4\&.7\&.2 amd64 gcc gcc 4\&.8 amd64 gcc gcc 4\&.9 amd64 gcc (Debian 4\&.4\&.5-8) 4\&.4\&.5 amd64 gcc (Debian 4\&.4\&.5-8) 4\&.3 amd64 gcc 4\&.6 armhf mingw 4\&.6 i386 clang version 3\&.5\&.0-1~exp1 x86_64-pc-linux-gnu icc 14\&.0\&.2 20140120 x86_64-pc-linux-gnu gcc/g++ openbsd 4\&.9\&.3 (*) 
.PP
.RS 4
(*) OpenBSD ships an old version of GCC per default, which can not compile Elektra\&. A manual installation of egcc/eg++ is required\&. Note that not every OpenBSD mirror provides the eg++ package\&. Elektra builds are confirmed with egcc/eg++ 4\&.9\&.3 in OpenBSD 5\&.9\&. The packages are called gcc and g++\&. Compile with \fCCC=/usr/local/bin/egcc CXX=/usr/local/bin/eg++\fP\&. 
.RE
.PP
.PP
To change the compiler, use cmake settings \fCCMAKE_C_COMPILER\fP and \fCCMAKE_CXX_COMPILER\fP\&.
.PP
To use gcc-4\&.3 for example 
.PP
.nf
cmake -DCMAKE_C_COMPILER=gcc-4.3 -DCMAKE_CXX_COMPILER=g++-4.3 ..

.fi
.PP
.PP
To change the compiler with ccmake, you may need to toggle advanced options (key 't')\&.
.PP
.SS "Options"
.PP
Some options, i\&.e\&. \fCPLUGINS\fP, \fCBINDINGS\fP and \fCTOOLS\fP are either:
.PP
.IP "\(bu" 2
a list of elements separated with a semicolon (\fC;\fP) (note that shells typically need \fC;\fP to be escaped)
.IP "\(bu" 2
a special uppercase element that gets replaced by a list of elements, that are:
.IP "  \(bu" 4
\fCALL\fP to include all elements (except elements with unfulfilled dependencies)
.IP "  \(bu" 4
\fCNODE\fP to include all elements without dependencies
.PP

.IP "\(bu" 2
elements prefixed with a minus symbol (\fC-\fP) to exclude an element
.PP
.PP
Examples for this are especially in the subsection \fCPLUGINS\fP below, but they work in the same fashion for \fCBINDINGS\fP and \fCTOOLS\fP\&.
.PP
.SS "Plugins"
.PP
Read about available plugins \fBhere\fP\&.
.PP
Because the core of elektra is minimal, plugins are needed to actually read and write to configuration files (storage plugins), commit the changes (resolver plugin, also takes care about how the configuration files are named) and also do many other tasks related to configuration\&.
.PP
The minimal set of plugins you should add:
.IP "\(bu" 2
\fBdump\fP is the default storage\&. If you remove it, make sure you add another one and set \fCKDB_DEFAULT_STORAGE\fP to it\&.
.IP "\(bu" 2
\fBresolver\fP is the default resolver\&. If you remove it, make sure you add another one and set \fCKDB_DEFAULT_RESOLVER\fP to it\&.
.IP "\(bu" 2
\fBsync\fP is very useful to not lose any data\&. If you do not want to include it, make sure to set \fC/sw/elektra/kdb/#0/current/plugins\fP to a value not containing sync (e\&.g\&. an empty value)\&. See \fBkdb-mount(1)\fP\&.
.PP
.PP
By default nearly all plugins are added\&. Only experimental plugins will be omitted: 
.PP
.nf
-DPLUGINS="ALL;-EXPERIMENTAL"

.fi
.PP
.PP
To add also experimental plugins, you can use: 
.PP
.nf
-DPLUGINS=ALL

.fi
.PP
.PP
Note that plugins get dropped when dependencies are not satisfied\&. To add all plugins except some plugins you can use: 
.PP
.nf
-DPLUGINS="ALL;-plugin1;-plugin2"

.fi
.PP
.PP
E\&.g\&. if you want all plugins except the jni plugin you would use: 
.PP
.nf
-DPLUGINS="ALL;-jni"

.fi
.PP
.PP
To add all plugins not having additional dependencies (they need only POSIX), you can use 
.PP
.nf
-DPLUGINS=NODEP

.fi
.PP
.PP
Note, that every \fCinfos/provides\fP and \fCinfos/status\fP field written uppercase can be used to select plugins that way\&. You also can combine any of these fields and add/remove other plugins to/from it, e\&.g\&. to include all plugins without deps, that provide storage (except \fCyajl\fP) and are maintained, but not include all plugins that are experimental, you would use: 
.PP
.nf
-DPLUGINS="NODEP;STORAGE;-yajl;MAINTAINED;-EXPERIMENTAL"

.fi
.PP
.PP
The inclusion is determined by following preferences:
.PP
.IP "1." 4
if the plugin is explicit excluded with \fC-plugin\fP
.IP "2." 4
if the plugin is explicit included with \fCplugin\fP
.IP "3." 4
if the plugin is excluded via a category \fC-CATEGORY\fP
.IP "4." 4
if the plugin is included via a category \fCCATEGORY\fP
.IP "5." 4
the plugin is excluded if it is not mentioned at all
.PP
.PP
Note, that changing \fCPLUGINS\fP will not modifiy the defaults used after Elektra was installed\&. For this endeavour you need to change: 
.PP
.nf
-DKDB_DEFAULT_RESOLVER=resolver

.fi
.PP
.PP
and 
.PP
.nf
-DKDB_DEFAULT_STORAGE=dump

.fi
.PP
.PP
The default resolver and storage will write to \fCKDB_DB_FILE\fP and \fCKDB_DB_INIT\fP (\fBfor bootstrapping\fP)\&.
.PP
Obviously, you can pass the exact list of plugins you want, e\&.g\&.: 
.PP
.nf
-DPLUGINS="resolver;sync;dump"

.fi
.PP
.PP
Some plugins are compile-time configurable\&. Then you can choose which features are compiled in or out\&. This is especially important in the bootstrapping phase, because then only the compiled in configuration applies\&. To compile-time-configure a plugin, you just pass a underscore (\fC_\fP) and flags after the name of the plugin\&.
.PP
The resolver for example distinguish between 3 different kind of flags: 
.PP
.nf
-DPLUGINS="resolver_baseflags_userflags_systemflags"

.fi
.PP
.PP
Following baseflags are available:
.PP
.IP "\(bu" 2
\fCc\fP for debugging conflicts
.IP "\(bu" 2
\fCf\fP for enabling file locking
.IP "\(bu" 2
\fCm\fP for enabling mutex locking
.PP
.PP
The user flags are (the order matters!):
.PP
.IP "\(bu" 2
\fCp\fP use passwd/ldap to lookup home directory using \fCgetpwuid_r\fP
.IP "\(bu" 2
\fCh\fP use the environment variable HOME
.IP "\(bu" 2
\fCu\fP use the environment variable USER
.IP "\(bu" 2
\fCb\fP use the built-in default cmake variable \fCKDB_DB_HOME\fP
.PP
.PP
The system flags are (the order matters!):
.PP
.IP "\(bu" 2
\fCx\fP use the environment variable \fCXDG_CONFIG_DIRS\fP (\fC:\fP are interpreted as part of filename, no searching is done!) This option is not recommended (unless for testing), because it allows users to fake system configuration\&.
.IP "\(bu" 2
\fCb\fP use the built-in default cmake variable \fCKDB_DB_SYSTEM\fP
.IP "\(bu" 2
note: if a path that begins with a slash (\fC/\fP) is chosen, the system flags are irrelevant and the path is taken as-is\&.
.PP
.PP
E\&.g\&. one may use: 
.PP
.nf
-DPLUGINS="resolver_lm_uhpb_b"

.fi
.PP
.PP
To add \fCresolver_l_h_b\fP you need to specify 
.PP
.nf
-DPLUGINS="resolver;resolver_l_h_b"

.fi
.PP
.PP
You can add resolver with any combination of the flags, even if they are not available in \fCALL\fP\&.
.PP
.SS "Tools"
.PP
Tools are used to add extra functionality to Elektra\&. The flag used to specify which tools are compiled is \fC-DTOOLS\fP, thus flag works similarly to the \fC-DPLUGINS\fP flag, but is more limited in its functionality (which does not matter, because there are not so many tools)\&.
.PP
To add all tools, you can use:: 
.PP
.nf
-DTOOLS=ALL

.fi
.PP
.PP
To add all tools except of race, you can use: 
.PP
.nf
-DTOOLS="ALL;-race"

.fi
.PP
.PP
To specify specific tools you can use, e\&.g\&.: 
.PP
.nf
-DTOOLS=qt-gui;kdb

.fi
.PP
.PP
.SS "Bindings"
.PP
Bindings are used in the same way as \fCTOOLS\fP\&. For example you can use: 
.PP
.nf
-DBINDINGS=ALL

.fi
.PP
.PP
Note that the same languages are sometimes available over GI and SWIG\&. In this case, the SWIG bindings are preferred\&. The SWIG executable may be specified with: 
.PP
.nf
-DSWIG_EXECUTABLE=/usr/bin/swig3.0

.fi
.PP
.PP
If this option is not used, cmake will find the first occurrence of \fCswig\fP in your environment's path\&. Even with \fCALL\fP GI bindings (deprecated) and gsettings (experimental) are not included\&. To include them, use: 
.PP
.nf
-DBINDINGS="ALL;GI;gsettings"

.fi
.PP
.PP
Some bindings provide different APIs (and not a different language), e\&.g:
.PP
.IP "\(bu" 2
\fCgsettings\fP
.IP "\(bu" 2
\fCINTERCEPT\fP with \fCintercept_fs\fP and \fCintercept_env\fP
.PP
.PP
To not add such APIs, but only \fCswig\fP bindings and \fCcpp\fP, you can use: 
.PP
.nf
-DBINDINGS="SWIG;cpp"

.fi
.PP
.PP
.SS "CMAKE_BUILD_TYPE"
.PP
\fCDebug\fP, \fCRelease\fP or \fCRelWithDebInfo\fP See help bar at bottom of ccmake for that option or: http://www.cmake.org/Wiki/CMake_Useful_Variables
.PP
.SS "ELEKTRA_DEBUG_BUILD and ELEKTRA_VERBOSE_BUILD"
.PP
Only needed by Elektra developers\&. Make the library to output logging information\&. It is not recommended to use these options\&.
.PP
.SS "BUILD_DOCUMENTATION"
.PP
Build documentation with doxygen (API) and ronn (man pages)\&.
.PP
.SS "Developer Options"
.PP
As developer you should enable \fCENABLE_DEBUG\fP and \fCENABLE_LOGGER\fP\&. (By default they should be invisible!)
.PP
Then continue reading \fBtesting\fP for further options\&.
.PP
.SS "CMAKE_INSTALL_PREFIX"
.PP
\fCCMAKE_INSTALL_PREFIX\fP defaults to \fC/usr/local\fP\&. So by default most files will installed below \fC/usr/local\fP\&. Exceptions to this are files handled by \fCINSTALL_SYSTEM_FILES\fP\&.
.PP
Edit that cache entry to change that behavior\&. Also called system prefix within the documentation\&.
.PP
If you want to create a package afterwards it is ok to use paths that you can write to (e\&.g\&. \fC-DCMAKE_INSTALL_PREFIX=/home/username/\fP)
.PP
.SS "LIB_SUFFIX"
.PP
Lets you install libraries into architecture specific folder\&. E\&.g\&. for 32/64 bit systems you might install libraries under \fClib64\fP\&. Set \fCLIB_SUFFIX\fP to \fC64\fP to achieve exactly that\&. So the system library folder will be \fCCMAKE_INSTALL_PREFIX/lib64\fP then\&.
.PP
.SS "TARGET_INCLUDE_FOLDER"
.PP
By default include folders will be installed below \fCCMAKE_INSTALL_PREFIX/include/elektra\fP\&. This entry let you change the elektra\&. If the entry is empty, the include files will be installed directly to \fCCMAKE_INSTALL_PREFIX/include\fP\&.
.PP
.SS "TARGET_PLUGIN_FOLDER"
.PP
Similar to above, but with the plugins\&. Default is: \fCCMAKE_INSTALL_PREFIX/lib${LIB_SUFFIX}/elektra\fP It can be also left empty to install plugins next to other libraries\&.
.PP
.SS "GTEST_ROOT"
.PP
Specifies the root of the GoogleTest sources, to be used for some of the tests\&. A \fCCMakeLists\&.txt\fP inside \fCGTEST_ROOT\fP will be searched as way to detect a valid GoogleTest source directory\&. If it is empty (\fC''\fP), an internal version of gtest will be used\&.
.PP
It is recommended that you browse through all of the options using ccmake\&. Afterwards press 'c' again (maybe multiple times until all variables are resolved) and then 'g' to generate\&. Finally press 'e' to exit\&.
.PP
.SS "INSTALL_BUILD_TOOLS"
.PP
Specifies that the build tools, i\&.e\&. \fCelektra-export-symbols\fP and \fCelektra-export-symbols\fP are installed (by default off)\&. Is needed for cross-compilation\&.
.PP
.SS "INSTALL_SYSTEM_FILES"
.PP
Some of Elektras targets require to be installed into specific folders in the file system hierarchy to work properly\&.
.PP
This variable is enabled by default but requires the install target to have the rights to write into the corresponding folders\&. Set \fC-DINSTALL_SYSTEM_FILES=OFF\fP if you do not need any of them\&.
.PP
If you do not have root rights you can copy them manually to your user folder\&.
.PP
Currently the installed system files are as following:
.PP
Module Description Install Path  bash-completion bash tab auto completion file \fCcompletionsdir\fP from pkg-config (*) zsh-completion zsh tab auto completion file /usr/share/zsh/vendor-completions GIR introspection file for bindings \fCINTROSPECTION_GIRDIR\fP from pkg-config GSettings GSettings backend module \fCGIO_MODULE_DIR\fP from pkg-config 
.PP
.RS 4
(*) Or \fC/usr/share/bash-completion/completions\fP as fallback\&. 
.RE
.PP
.PP
.SS "ENABLE_OPTIMIZATIONS"
.PP
In order to keep the binaries as small as possible this flag allows to trade memory for speed\&.
.PP
.SS "Building"
.PP
.SS "Without IDE"
.PP
To build the source use: 
.PP
.nf
make

.fi
.PP
.PP
You can pass:
.IP "\(bu" 2
\fC-j\fP for parallel builds
.IP "\(bu" 2
\fCVERBOSE=1\fP to see the invocations of the compiler
.PP
.PP
Continue by reading \fBINSTALL\fP\&.
.PP
.SS "With CodeBlocks"
.PP
You can build Elektra using Code::Blocks under Gentoo:
.PP
Precondition: Make sure you have a compiler, xml2 (for kdb tool) and xsl (see later) installed\&. cmake configure will help you with that, it will make sure you don't forget something essential\&.
.PP
For Most Linux system all you have to do is open up a console and 
.PP
.nf
mkdir build
cd build
cmake .. -G 'CodeBlocks - Unix Makefiles'
make package

.fi
.PP
.PP
Note 1: You can use other editor if you like just type cmake at the console to get a list of option you can pass to cmake as long as well as a list of what code editor project cmake can create\&.
.PP
Note 2: For Unix if you have nCurses install you can run ccmake to set important option after running cmake like to enable debug symbol\&.
.PP
Note 3: for Gentoo is recommend to emerge sys-apps/lsb-release to name the package right even thou not required\&.
.PP
.SS "Troubleshooting"
.PP
.SS "missing links/libraries"
.PP
If you get errors that \fClibelektra-resolver\&.so\fP or \fClibelektra-storage\&.so\fP are missing, or the links do not work, you can use as workaround: 
.PP
.nf
    cmake -DBUILD_SHARED=OFF -DBUILD_FULL=ON ..

.fi
.PP
.PP
This issue was reported for:
.PP
.IP "\(bu" 2
OpenSuse 42 (when running \fCmake run_all\fP)
.IP "\(bu" 2
CLion IDE (does not allow to build)
.PP
.PP
.SS "See also"
.PP
.IP "\(bu" 2
\fBINSTALL\fP\&.
.IP "\(bu" 2
\fBTESTING\fP\&. 
.PP

