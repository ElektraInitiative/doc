.TH "md_src_plugins_blockresolver_README" 3elektra "Sat Sep 17 2016" "Version 0.8.18" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_blockresolver_README \- Plugin: blockresolver 

.IP "\(bu" 2
infos = Information about the blockresolver plugin is in keys below
.IP "\(bu" 2
infos/author = Name name@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides = resolver
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = rollback getresolver setresolver commit
.IP "\(bu" 2
infos/status = maintained conformant compatible coverage specific unittest tested nodep libc configurable preview experimental difficult unfinished concept
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description =
.PP
.PP
The \fCblockresolver\fP can be used to only resolved a tagged block inside a configuration file\&.
.PP
.SS "Implementation details"
.PP
\fCblockresolver\fP extracts the requested block from the configurations file and writes it into a temporary file\&. Afterwards Elektra will only work on the temporary file until kdbSet is called\&. On kdbSet the contents of the temporary file will be merged with parts outside of the requested block from the original file\&.
.PP
.SS "Usage"
.PP
\fCkdb mount -R blockresolver /path/to/my/file /mountpoint -c identifier='identifier-tag'\fP
.PP
where \fCidentifier\fP specifies the tag \fCblockresolver\fP will search for in the configuration file\&.
.PP
A block consists of 2 parts:
.IP "\(bu" 2
beginning: the identifier suffixed with \fCstart\fP
.IP "\(bu" 2
end: the identifier suffixed with \fCstop\fP
.PP
.PP
.SS "Limitations"
.PP
Currently the identifier must be unique\&.
.PP
.SS "Example"
.PP
``` % cat /tmp/test\&.block bla bla bla 
.SS "block config start"
.PP
[section1] key1 = val1 [section2] key2 = val2 
.SS "block config stop"
.PP
asdf asdf asdf
.PP
% kdb mount -R blockresolver /tmp/test\&.block system/blocktest -c identifier='### block config' % kdb export system/blocktest [section1] key1 = val1 [section2] key2 = val2
.PP
% kdb set system/blocktest/section1/key12 val12 Create a new key system/blocktest/section1/key12 with string val12
.PP
% cat /tmp/test\&.block bla bla bla 
.SS "block config start"
.PP
[section1] key1 = val1 key12 = val12 [section2] key2 = val2 
.SS "block config stop"
.PP
asdf asdf asdf ``` 
