.TH "doc_decisions_0_drafts_builder_functions_md" 3elektra "Tue Mar 14 2023" "Version 0.9.13" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_0_drafts_builder_functions_md \- Builder Functions for \fCKey\fP and \fCKeySet\fP 
 
.SH "Problem"
.PP
The structs for \fCKey\fP and \fCKeySet\fP are opaque, i\&.e\&., only the \fCtypedef\fPs are part of the public headers, the actual \fCstruct\fP definitions are in a private header\&. Because of that, \fClibelektra-core\fP must provide a way to construct a new \fCKey\fP or \fCKeySet\fP\&.
.PP
Both \fCKey\fP and \fCKeySet\fP are rather complex structures consisting of multiple parts (name, value, metadata, and collection of \fCKey\fPs respectively), and \fClibelektra-core\fP is supposed to be minimal\&. It therefore makes sense to provide additional functions outside \fClibelektra-core\fP that make building \fCKey\fPs and \fCKeySet\fPs easier\&.
.PP
We call these functions 'builder functions' compared to the \fBConstructor Functions for \fCKey\fP and \fCKeySet\fP\fPconstructor functions'' in \fClibelektra-core\fP\&.
.SH "Constraints"
.PP
.IP "\(bu" 2
If the builder functions are in a non-language specific library, they must be directly callable from all languages for which Elektra provides bindings\&.
.IP "\(bu" 2
In accordance with the \fBNamespace and Name of Keys\fPNamespace and Name of Keys' decision', the builder functions must not use the escaped name\&. Only the unescaped name may be used, but the namespace may be passed as a separate parameter, if this has benefits\&. Additionally, it might make sense to take the parts of a keyname as separate arguments\&.
.PP
.SH "Assumptions"
.PP
.SH "Considered Alternatives"
.PP
.SS "Language Agnostic"
.RS 4
\fBNote\fP: This is basically, the 'Full Arguments' solution from the \fBconstructor functions decision\fP\&. 
.RE
.PP
.PP
.nf
Key * keyBuild (const KeyName * name, const KeyValue * value, const KeyMeta metadata[]);

// allocates space for at least `alloc` keys
// inserts all keys from `keys` until it finds a NULL pointer, `keys` must contain at least one NULL
KeySet * ksBuild (size_t alloc, const Key * keys[]);
.fi
.PP
.PP
This could be called as:
.PP
.PP
.nf
int a = 7;

ksBuild(
  3,
  (Key*[]) {
    keyBuild (
      &(KeyName){\&.ns = ELEKTRA_NS_SYSTEM, \&.name = "foo\0bar", \&.size = 8 },
      &(KeyValue){\&.value = "1234", \&.size = 5},
      (KeyMeta[]){
        {\&.name = "type", \&.nameSize = 5, \&.value = {\&.value = "long", \&.size = 5}},
        {\&.name = "length\0min", \&.nameSize = 11, \&.value = {\&.value = "4", \&.size = 2}},
      }
    ),
    keyBuild (
      &(KeyName){\&.ns = ELEKTRA_NS_SYSTEM, \&.name = "foo", \&.size = 4 },
      &(KeyValue){\&.value = &a, \&.size = sizeof(a)},
      NULL
    ),
    keyBuild (&(KeyName){\&.ns = ELEKTRA_NS_SYSTEM, \&.name = "baz", \&.size = 4 }, NULL, NULL)
    NULL
  }
);
.fi
.PP
.PP
One neat benefit of this solution is that these simple functions can be called from any language\&.
.SS "Variadic Arguments"
.PP
.nf
Key * keyNew (ElektraNamespace ns, \&.\&.\&.);
.fi
.PP
.PP
This could be called as:
.PP
.PP
.nf
// system:/foo/bar with value 1234 and metadata: meta:/type=long, meta:/length/min=4
keyNew (ELEKTRA_NS_SYSTEM, "foo", "bar", NULL, KEY_VALUE, 5, "1234", KEY_META, "type", NULL, "long", KEY_META, "length", "min", NULL, 4, NULL);
// system:/foo/bar with value 1234 and no metadata
keyNew (ELEKTRA_NS_SYSTEM, "foo", "bar", NULL, KEY_VALUE, 5, "1234", NULL);
// system:/foo/bar with no value and no metadata
keyNew (ELEKTRA_NS_SYSTEM, "foo", "bar", NULL, NULL);
.fi
.PP
.PP
Compared to the language agnostic version, this loose type safety and doesn't really provide any advantages\&. Separating the keyname parts into separate arguments could also be done in the language agnostic version, by using an array \fCconst char * parts[]\fP inside the \fCKeyName\fP struct\&.
.SS "Macros and Bindings"
Some macros could make the language agnostic version above more ergonomic in C\&. Bindings in other languages, could also provide wrappers around the \fCkeyBuild\fP and \fCksBuild\fP functions\&. This could for example, take language-native array types as arguments to avoid passing sizes as separate arguments\&.
.PP
In C this could look like this:
.PP
.PP
.nf
#define KS_BUILD(\&.\&.\&.) (ksBuild (0, (Key *[]){__VA_ARGS__, NULL}))
#define KEY_NAME(ns_, name_) (KeyName){\&.ns = (ns_), \&.name = (name_), \&.size = sizeof (name_)}

#define KEY_VALUE_STRING(s) (KeyValue){\&.value = (s), \&.size = strlen((s))}
#define KEY_VALUE_PTR(v) (KeyValue){\&.value = &(v), \&.size = sizeof((v))

#define KEY_META_STRING(name_, value_) (KeyMeta){\&.name = (name_), \&.nameSize = sizeof (name_), \&.value = { \&.value = (value_), \&.size = strlen(value_) }}
.fi
.PP
.PP
This can be used like so:
.PP
.PP
.nf
int a = 7;

KS_BUILD(
  keyBuild (
    &KEY_NAME (ELEKTRA_NS_SYSTEM, "foo\0bar"),
    &KEY_VALUE_STRING ("1234"),
    (KeyMeta[]){
      KEY_META_STRING("type", "long"),
      KEY_META_STRING("length\0min", "4"),
    }
  ),
  keyBuild (
    &KEY_NAME (ELEKTRA_NS_SYSTEM, "foo"),
     &KEY_VALUE_PTR(a),
    NULL
  ),
  keyBuild (&KEY_NAME (ELEKTRA_NS_SYSTEM, "baz"), NULL, NULL)
);
.fi
.PP
.SH "Decision"
.PP
.SH "Rationale"
.PP
.SH "Implications"
.PP
.IP "\(bu" 2

.IP "\(bu" 2

.IP "\(bu" 2

.PP
.SH "Related Decisions"
.PP
.IP "\(bu" 2
[](\fBdoc_decisions_0_drafts__README_md\fP)
.IP "\(bu" 2
[](\fBdoc_decisions_0_drafts__README_md\fP)
.IP "\(bu" 2
[](\fBdoc_decisions_0_drafts__README_md\fP)
.PP
.SH "Notes"
.PP

