<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="http://www.libelektra.org/news/feed.rss" rel="self" type="application/rss+xml" />
<title>Elektra's Blog</title>
<description>NEWS around Elektra</description>
<link>http://www.libelektra.org/news/feed.rss</link>
<lastBuildDate>Sun, 18 Dec 2016 12:48:16 +0000</lastBuildDate>
<pubDate>Sun, 18 Dec 2016 12:48:16 +0000</pubDate>
<ttl>1800</ttl>
<item>
<title>0.8.19 Release #</title>
<guid isPermaLink="false">8e05231a-4f3d-488b-8dc2-5f0d5c474c39</guid>
<description>
&lt;h1&gt;0.8.19 Release&lt;/h1&gt;

&lt;h2&gt;What is Elektra?&lt;/h2&gt;

&lt;p&gt;Elektra solves a non-trivial issue: how to abstract configuration
in a way that software can be integrated and reconfiguration can
be automated.  Elektra solves this problem in a holistic way.
Read &lt;a href=&quot;http://tree.libelektra.org/doc/WHY.md&quot;&gt;why Elektra&lt;/a&gt;
for an explanation of why such a solution is necessary. It can be seen as a
&lt;a href=&quot;http://tree.libelektra.org/doc/BIGPICTURE.md&quot;&gt;virtual file system&lt;/a&gt;
for configuration files.&lt;/p&gt;

&lt;h2&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;more tutorials and getting started guides&lt;/li&gt;
&lt;li&gt;new Ruby bindings&lt;/li&gt;
&lt;li&gt;cleanup of core (only 124K for main library on Debian/amd64)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;More Tutorials&lt;/h3&gt;

&lt;p&gt;Elektra already has an open and welcoming environment, with many
interesting discussions.  It is our interest that we keep it
that way.  To make this a bit more formal we added a &lt;a href=&quot;http://tree.libelektra.org/doc/code_of_conduct.md&quot;&gt;code of
conduct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But without good introductions, it is easy to get lost in such
a large initiative like Elektra. Thus we focused on writing
great tutorials for this release!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We wrote an &lt;a href=&quot;http://tree.libelektra.org/doc/tutorials/README.md&quot;&gt;overview readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We wrote new tutorials about &lt;a href=&quot;http://tree.libelektra.org/doc/tutorials/mount.md&quot;&gt;mounting&lt;/a&gt;
and &lt;a href=&quot;http://tree.libelektra.org/doc/tutorials/validation.md&quot;&gt;validation&lt;/a&gt;
(thanks to Christoph Weber)&lt;/li&gt;
&lt;li&gt;We wrote a readme to shell recorder transpiler
which allows us to execute tutorials and verify that the examples in
them work. (thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/lua&quot;&gt;Lua&lt;/a&gt; and
&lt;a href=&quot;http://tree.libelektra.org/src/plugins/python&quot;&gt;Python&lt;/a&gt;
plugins got tutorials and better explanations!
(Thanks to Marvin Mall)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://doc.libelektra.org/api/0.8.19/html/&quot;&gt;doxygen&lt;/a&gt; docu now also
uses links to directories, thanks to Kurt Micheli!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to Armin Wurzinger for pointing to areas of improvement.
A big thanks to Marvin Mall, Kurt Micheli, Christoph Weber and Thomas Waser!&lt;/p&gt;

&lt;p&gt;If you like the tutorials, we would love to read from you.
Please feel free to &lt;a href=&quot;http://git.libelektra.org/issues/new&quot;&gt;start a discussion or ask a
question&lt;/a&gt;.
We also added a
&lt;a href=&quot;http://tree.libelektra.org/doc/help/elektra-faq.md&quot;&gt;FAQ&lt;/a&gt;
and updated
&lt;a href=&quot;http://tree.libelektra.org/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Ruby Bindings&lt;/h3&gt;

&lt;p&gt;We now provide Ruby bindings for Elektra. The bindings are based on the
C++ bindings and are generated by SWIG. A strong focus was put on a good
integration with standard Ruby features and conventions, such as naming
conventions, predicates, key and meta data iteration&amp;hellip;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://tree.libelektra.org/src/bindings/swig/ruby/README.md&quot;&gt;short introduction&lt;/a&gt;
shows some basic usage scenarios.  More detailed examples can be found in the
&lt;a href=&quot;http://tree.libelektra.org/src/bindings/swig/ruby/examples&quot;&gt;examples directory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A big thanks to Bernhard Denner!&lt;/p&gt;

&lt;h3&gt;Cleanup of Core&lt;/h3&gt;

&lt;p&gt;Following methods were hidden (&lt;code&gt;static&lt;/code&gt;) or removed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mount*&lt;/code&gt; methods&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trie*&lt;/code&gt; methods&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backend*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keyGetParentNameSize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keyGetParentName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are dozens of methods and it was required to adapt
the unit tests to work with the hidden methods.&lt;/p&gt;

&lt;p&gt;A big thanks to Kurt Micheli!&lt;/p&gt;

&lt;h2&gt;Usability&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Improved many error messages&lt;/li&gt;
&lt;li&gt;spelling&lt;/li&gt;
&lt;li&gt;be more friendly to the user&lt;/li&gt;
&lt;li&gt;capitalization&lt;/li&gt;
&lt;li&gt;mention &lt;code&gt;sudo !!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb set&lt;/code&gt;: do not print what was not done&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb editor&lt;/code&gt; handles non-modified files (will not do anything)&lt;/li&gt;
&lt;li&gt;Be more chatty about what &lt;code&gt;kdb&lt;/code&gt; does, can be disabled with &lt;code&gt;-q&lt;/code&gt; or
&lt;code&gt;/sw/elektra/kdb/#0/current/quiet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Furthermore, &lt;code&gt;-v&lt;/code&gt; now tells even more details (e.g. &lt;code&gt;kdb-import&lt;/code&gt; outputs
the key about to import)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Plugins&lt;/h2&gt;

&lt;h3&gt;New&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/c&quot;&gt;c plugin&lt;/a&gt; generates C code that represents
configuration. This is useful for unit tests or if you need to have hard-coded
fallback configuration in your C application.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/base64&quot;&gt;base64 plugin&lt;/a&gt; allows you to encode
binary data. This is especially handy in combination with the
&lt;a href=&quot;http://tree.libelektra.org/src/plugins/crypto&quot;&gt;crypto plugin&lt;/a&gt;
to avoid problems with non-printable characters in configuration files.
(Thanks to Peter Nirschl)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/fcrypt&quot;&gt;fcrypt plugin&lt;/a&gt; allows you to
fully encrypt configuration files. They are only decrypted when applications
access them. (Thanks to Peter Nirschl)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/required&quot;&gt;required plugin&lt;/a&gt; rejects
every key that is not required by an application.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/simplespeclang&quot;&gt;simple spec lang&lt;/a&gt; allows you
to define metadata for &lt;a href=&quot;http://tree.libelektra.org/src/plugins/enum&quot;&gt;enum&lt;/a&gt;
and required in a more compact way.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Major Enhancements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/simpleini&quot;&gt;simpleini&lt;/a&gt; got a configurable
format in which it will read and write configuration files. For example, one
can use &lt;code&gt;format=% -&amp;gt; %&lt;/code&gt; to have &lt;code&gt;key -&amp;gt; value&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/enum&quot;&gt;enum&lt;/a&gt; got support for multi-enums,
i.e., multiple separated values within one value. The error reporting was improved,
too. (Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/glob&quot;&gt;glob&lt;/a&gt; accepts a list of named flags
instead of an integer value and aborts matching after first hit.
(Thanks to Felix Berlakovich)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tree.libelektra.org/src/plugins/hosts&quot;&gt;hosts&lt;/a&gt; now only accepts &lt;code&gt;ipv4&lt;/code&gt; and
&lt;code&gt;ipv6&lt;/code&gt; keys.
(Thanks to Felix Berlakovich)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Development&lt;/h2&gt;

&lt;p&gt;In the perpetual effort to improve software quality, we made several improvements:
(This information is mainly intended for Elektra&amp;rsquo;s developers.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new logger encourages developers to write more comments (&lt;code&gt;ELEKTRA_LOG&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ELEKTRA_ASSERT&lt;/code&gt; prints better messages on failure and does not need &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; trick.&lt;/li&gt;
&lt;li&gt;get rid of previous &lt;code&gt;VERBOSE&lt;/code&gt; macro at many places.&lt;/li&gt;
&lt;li&gt;Many assertions were added in the low-level helpers (memory management)&lt;/li&gt;
&lt;li&gt;Using the assertions we fixed some undefined behavior.
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;added new &lt;code&gt;configure-debian-debug&lt;/code&gt; and &lt;code&gt;configure-debian-log&lt;/code&gt; helper scripts&lt;/li&gt;
&lt;li&gt;The build server now checks if builds with active logger and debugging
work correctly.&lt;/li&gt;
&lt;li&gt;Improved Coding Style in crypto_botan (thanks to Peter Nirschl)&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;external-links.txt&lt;/code&gt; to &lt;code&gt;outputs&lt;/code&gt;
(The file is generated in the build directory and contains
 all external-links. To validate them, use &lt;code&gt;./scripts/link-checker&lt;/code&gt;)
(Thanks to Kurt Micheli)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdownlinkconverter&lt;/code&gt; handles directories correctly (using &lt;code&gt;stat&lt;/code&gt;).
(Thanks to Kurt Micheli)&lt;/li&gt;
&lt;li&gt;Fixed compiler warning caused by libxml2 (different behavior since 2.9.4),
thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;added often used links in &lt;a href=&quot;http://tree.libelektra.org/README.md&quot;&gt;main README&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improve documentation about failing test cases and what to do about it.&lt;/li&gt;
&lt;li&gt;added &lt;a href=&quot;http://tree.libelektra.org/doc/decisions/&quot;&gt;decisions&lt;/a&gt; about &lt;code&gt;plugin_variants&lt;/code&gt;
and &lt;code&gt;array&lt;/code&gt;.
(Thanks to Marvin Mall)&lt;/li&gt;
&lt;li&gt;Rename to metadata, metakey, mountpoint
(Thanks to Peter Nirschl)&lt;/li&gt;
&lt;li&gt;std::ios_base::showbase can be used to output metadata when streaming keys (C++)&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;infos/status&lt;/code&gt;: &lt;code&gt;readonly&lt;/code&gt;, &lt;code&gt;writeonly&lt;/code&gt;, &lt;code&gt;limited&lt;/code&gt;
(Thanks to Marvin Mall)&lt;/li&gt;
&lt;li&gt;The tool &lt;code&gt;update-infos-status&lt;/code&gt; orders &lt;code&gt;infos/status&lt;/code&gt; and allows devs to easily add/rem
entries.  (Thanks to Kurt Micheli)&lt;/li&gt;
&lt;li&gt;Automatic setting of &lt;code&gt;infos/status&lt;/code&gt;: &lt;code&gt;nodoc&lt;/code&gt;, &lt;code&gt;nodep&lt;/code&gt;, &lt;code&gt;unittest&lt;/code&gt;, &lt;code&gt;memleak&lt;/code&gt;, &lt;code&gt;configurable&lt;/code&gt;
(Thanks to Kurt Micheli)&lt;/li&gt;
&lt;li&gt;Improve &lt;code&gt;create_lib_symlink&lt;/code&gt;, add &lt;code&gt;PLUGIN&lt;/code&gt; argument
and make it useful also for other library symlinks.&lt;/li&gt;
&lt;li&gt;New markdown style applied to most markdown files.
(Thanks to Marvin Mall)&lt;/li&gt;
&lt;li&gt;Tracer is now disabled, even for &lt;code&gt;ENABLE_DEBUG&lt;/code&gt;.
(Thanks to Marvin Mall)&lt;/li&gt;
&lt;li&gt;Updated &lt;a href=&quot;http://tree.libelektra.org/doc/SECURITY.md&quot;&gt;SECURITY document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Macro naming convention &lt;code&gt;ELEKTRA_&lt;/code&gt;, added &lt;code&gt;kdbmacros.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENABLE_DEBUG&lt;/code&gt; also works with &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;ENABLE_ASAN&lt;/code&gt; now allows devs
to additionally enable sanitizers.
Thanks to Gabriel Rauter.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the ABI and API of kdb.h is fully compatible, i.e. programs
compiled against an older 0.8 version of Elektra will continue to work
(ABI) and you will be able to recompile programs without errors (API).&lt;/p&gt;

&lt;p&gt;It is now possible to enquiry which plugins provide a specific format.
This needed changes in libtools, which got a new major revision.
Changes in the plugin&amp;rsquo;s contract are fully compatible:
You can now use &lt;code&gt;storage/ini&lt;/code&gt; instead of &lt;code&gt;storage ini&lt;/code&gt; in &lt;code&gt;infos/provides&lt;/code&gt;
which gives you the information that &lt;code&gt;ini&lt;/code&gt; is a storage format (and not
anything else the plugin might provide). For compatibility reasons,
the build system still adds &lt;code&gt;storage ini&lt;/code&gt; even if only &lt;code&gt;storage/ini&lt;/code&gt;
is specified.&lt;/p&gt;

&lt;p&gt;That means that &lt;code&gt;kdb mount file.json /examples/json json&lt;/code&gt; still will find
&lt;code&gt;json&lt;/code&gt; plugins even if they are not called &lt;code&gt;json&lt;/code&gt; but
&lt;a href=&quot;http://tree.libelektra.org/src/plugins/yajl&quot;&gt;yajl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another breaking change in &lt;code&gt;libtools&lt;/code&gt; is that &lt;code&gt;appendNamespace&lt;/code&gt; was renamed
to &lt;code&gt;prependNamespace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Error messages changed a bit, so if you tried to parse them, make sure
to make the &lt;code&gt;e&lt;/code&gt; of error case-insensitive (&lt;code&gt;[eE]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the C++ binding, &lt;code&gt;rewindMeta&lt;/code&gt; is now &lt;code&gt;const&lt;/code&gt; and some methods
to check if a key is in a namespace were added.&lt;/p&gt;

&lt;p&gt;The intercept libraries were moved to a &lt;a href=&quot;http://tree.libelektra.org/src/bindings/intercept&quot;&gt;common
folder&lt;/a&gt;.
They can now be included or excluded like other &lt;code&gt;BINDINGS&lt;/code&gt;.
For consistency reasons the libraries were also renamed
(&lt;code&gt;libelektraintercept-fs.so&lt;/code&gt; and &lt;code&gt;libelektraintercept-env.so.0&lt;/code&gt;),
but symlinks allow you to link against their old names
(&lt;code&gt;lib/libelektraintercept.so&lt;/code&gt; and &lt;code&gt;lib/libelektragetenv.so.0&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;Package Maintainers&lt;/h2&gt;

&lt;p&gt;This information is intended for package maintainers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GI Bindings were removed from &lt;code&gt;BINDINGS=ALL&lt;/code&gt;.
It is recommended to use &lt;code&gt;SWIG&lt;/code&gt; bindings instead, which
will be added with &lt;code&gt;ALL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Intercept libraries are part of &lt;code&gt;BINDINGS&lt;/code&gt;.
They will be added on glibc systems where &lt;code&gt;BINDINGS=ALL&lt;/code&gt; is used.&lt;/li&gt;
&lt;li&gt;Documentation in textfiles is now installed,
&lt;code&gt;TARGET_DOCUMENTATION_TEXT_FOLDER&lt;/code&gt; was added for that purpose.
The files are:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BIGPICTURE.md&lt;/code&gt;, &lt;code&gt;GOALS.md&lt;/code&gt;, &lt;code&gt;LICENSE.md&lt;/code&gt;, &lt;code&gt;METADATA.ini&lt;/code&gt;, &lt;code&gt;SECURITY.md&lt;/code&gt;, &lt;code&gt;AUTHORS&lt;/code&gt;, &lt;code&gt;CONTRACT.ini&lt;/code&gt;, &lt;code&gt;NEWS.md&lt;/code&gt;, and &lt;code&gt;WHY.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other new files are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plugins: &lt;code&gt;libelektra-base64.so&lt;/code&gt;, &lt;code&gt;libelektra-c.so&lt;/code&gt;, &lt;code&gt;libelektra-fcrypt.so&lt;/code&gt;
         &lt;code&gt;libelektra-required.so&lt;/code&gt;, &lt;code&gt;libelektra-simplespeclang.so&lt;/code&gt;
(only in &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, not added by default, but with &lt;code&gt;ALL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;site_ruby/_kdb.so&lt;/code&gt; (ruby binding, only in &lt;code&gt;ALL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;testcpp_keyio&lt;/code&gt;, &lt;code&gt;testkdb_error&lt;/code&gt;, &lt;code&gt;testmod_base64&lt;/code&gt;,
&lt;code&gt;testmod_fcrypt&lt;/code&gt; (test binaries in &lt;code&gt;TARGET_TOOL_EXEC_FOLDER&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Changed files are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libelektraintercept-env.so&lt;/code&gt; (renamed from &lt;code&gt;libelektragetenv.so.&lt;/code&gt;, but still available as symlink)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libelektraintercept-fs.so&lt;/code&gt; (renamed from &lt;code&gt;libelektraintercept.so&lt;/code&gt;, but still available as symlink)&lt;/li&gt;
&lt;li&gt;version upgrade: &lt;code&gt;libelektratools.so.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Portability&lt;/h2&gt;

&lt;p&gt;Elektra should work on every system that has &lt;code&gt;cmake&lt;/code&gt; and a &lt;code&gt;C/C++&lt;/code&gt; compiler.&lt;/p&gt;

&lt;p&gt;For this release we increased portability to better work with Mac OS X,
CentOS 7, and OpenSuse 42.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac OS X:&lt;/li&gt;
&lt;li&gt;Travis build server now also build qt-gui&lt;/li&gt;
&lt;li&gt;Support for xcode8 added (xcode6 still supported)&lt;/li&gt;
&lt;li&gt;fix lua != 5.2 issues (wrong output), update docu&lt;/li&gt;
&lt;li&gt;remove hard dependency to &lt;code&gt;pkg-config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove hard dependency to version 3 of &lt;code&gt;cmake&lt;/code&gt;
(most parts still work with version 2)&lt;/li&gt;
&lt;li&gt;make search for swig 2 visible&lt;/li&gt;
&lt;li&gt;fix plugin names and mounting on OpenSuse 42.1&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A big thanks to Kai-Uwe Behrmann, Mihael Pranjić and
Sebastian Bachmann.&lt;/p&gt;

&lt;h2&gt;Fixed Issues&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;simpleini: use correct error number when open file fails&lt;/li&gt;
&lt;li&gt;yajl: improve error message on non-utf8 text.
(Thanks to Christoph Weber)&lt;/li&gt;
&lt;li&gt;drop multiple &lt;code&gt;/&lt;/code&gt; from &lt;code&gt;~&lt;/code&gt; paths
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;fix failing testcases with &lt;code&gt;ENABLE_DEBUG&lt;/code&gt; #988
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;csvstorage: files in source are rewritten  #987
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;fix RTLD_NODELETE for OpenBSD
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;better handle adding/deleting of read-only (info) plugins.&lt;/li&gt;
&lt;li&gt;fix behavior of multiple plugins setting errors (first error wins,
later errors are transformed to warnings)
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;fix resolver logic for missing files&lt;/li&gt;
&lt;li&gt;regex string in conditionals
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;KDB&lt;/code&gt; environment variable in shell tests and fix counting of tests
for &lt;code&gt;kdb run_all&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;output to &lt;code&gt;stderr&lt;/code&gt; for &lt;code&gt;elektrify-*&lt;/code&gt; scripts&lt;/li&gt;
&lt;li&gt;make &lt;a href=&quot;http://tree.libelektra.org/src/plugins/desktop&quot;&gt;desktop plugin&lt;/a&gt;
mountable&lt;/li&gt;
&lt;li&gt;avoid cmake warnings in &lt;code&gt;make uninstall&lt;/code&gt; (avoid &lt;code&gt;@&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;fix quoting in ini plugin
(Thanks to Thomas Waser)&lt;/li&gt;
&lt;li&gt;fix plugin names and mounting with plugin pre/postfixes
(Thanks to Kai-Uwe Behrmann)&lt;/li&gt;
&lt;li&gt;mount-openicc: rename to openicc.json
(Thanks to Kai-Uwe Behrmann)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.19.tar.gz&quot;&gt;here&lt;/a&gt;
and also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.19.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.19.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2681639&lt;/li&gt;
&lt;li&gt;md5sum: 6669e765c834e259fb7570f126b85d7e&lt;/li&gt;
&lt;li&gt;sha1: 82cefe4cea58d6e6b0a99ddbda24d1b57e98d93a&lt;/li&gt;
&lt;li&gt;sha256: cc14f09539aa95623e884f28e8be7bd67c37550d25e08288108a54fd294fd2a8&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.19.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.19/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by email elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/8e05231a-4f3d-488b-8dc2-5f0d5c474c39.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 22 Nov 2016 22:04:59 +0100</pubDate>
<link>http://www.libelektra.org/news/8e05231a-4f3d-488b-8dc2-5f0d5c474c39.html</link>
</item>
<item>
<title>0.8.18 Release</title>
<guid isPermaLink="false">190576e0-9fef-486e-b8da-c4e75be08329</guid>
<description>
&lt;h1&gt;0.8.18 Release&lt;/h1&gt;

&lt;h2&gt;What is Elektra?&lt;/h2&gt;

&lt;p&gt;Elektra serves as a universal and secure framework to access configuration
parameters in a global, hierarchical key database.
For a small demo see here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/cantr04assr4jkv8v34uz9b8r&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/cantr04assr4jkv8v34uz9b8r.png&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intercept open syscalls which allows Elektra to dynamically
generate config files from Elektra&amp;rsquo;s database&lt;/li&gt;
&lt;li&gt;Experimental version of cryptographic plugins&lt;/li&gt;
&lt;li&gt;A new zsh completion file (next to the bash completion file)&lt;/li&gt;
&lt;li&gt;Gitresolver allows to directly read and write config files
from git instead of files present in the file system.&lt;/li&gt;
&lt;li&gt;Survey completed successfully (and debts paid), we are now
preparing raw data.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Crypto Plugin&lt;/h3&gt;

&lt;p&gt;Gpg is now used to decrypt a master password, which is used
by the individual crypto backends. So all necessary parts
for encryption of decryption of individual keys is present.&lt;/p&gt;

&lt;p&gt;Furthermore, a new &lt;a href=&quot;https://botan.randombit.net&quot;&gt;botan&lt;/a&gt; backend
was implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git.libelektra.org/tree/master/src/plugins/crypto&quot;&gt;See here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Peter Nirschl.&lt;/p&gt;

&lt;h3&gt;Open Interception&lt;/h3&gt;

&lt;p&gt;When Elektra directly modifies config files which are on the disc,
and applications read the config files without Elektra, Elektra has
no control over the access, e.g. we cannot dynamically calculate
values. To avoid this, we wrote a library that
intercepts the &lt;code&gt;open&lt;/code&gt;-call.&lt;/p&gt;

&lt;p&gt;Together with the &lt;code&gt;mozprefs&lt;/code&gt; plugin, we got control over the configuration
of Firefox and can dynamically change config values with all possibilities
Elektra provides.&lt;/p&gt;

&lt;p&gt;For easy setup, we implemented the script &lt;code&gt;configure-firefox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://git.libelektra.org/tree/master/src/bindings/intercept&quot;&gt;See here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser.&lt;/p&gt;

&lt;h3&gt;Resolver&lt;/h3&gt;

&lt;p&gt;Resolvers in Elektra are the code that are responsible to determine where
content should be read from and stored to. They are independent of the
actual configuration file syntax.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://git.libelektra.org/tree/master/src/plugins/gitresolver&quot;&gt;gitresolver&lt;/a&gt;
allows you to get/store config data in git.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://git.libelektra.org/tree/master/src/plugins/blockresolver&quot;&gt;blockresolver&lt;/a&gt;
allows Elektra to take control of parts of the configuration
file. This is useful for config files such as vim or zsh, which contain
program code. The plugin allows you to split config files with special markers
into parts containing code and others controlled by Elektra.&lt;/p&gt;

&lt;h3&gt;zsh completion&lt;/h3&gt;

&lt;p&gt;Added zsh completion file, and a script (&lt;code&gt;kdb install-sh-completion&lt;/code&gt;)
that installs bash+zsh completion when the default installation places
do not work (e.g. for Mac OS X).&lt;/p&gt;

&lt;p&gt;Thanks to Sebastian Bachmann.&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fix &lt;code&gt;kdb-import&lt;/code&gt; man page, thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;mark &lt;code&gt;keyIsSystem&lt;/code&gt;/&lt;code&gt;keyIsUser&lt;/code&gt; as internal&lt;/li&gt;
&lt;li&gt;fix doxygen reference to example&lt;/li&gt;
&lt;li&gt;better document that &lt;code&gt;global-mount&lt;/code&gt; or &lt;code&gt;gmount&lt;/code&gt; will overwrite
previously mounted global plugins&lt;/li&gt;
&lt;li&gt;fix spelling mistake, thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;Wrote tutorial how to use Elektra-python bindings,
thanks to Ulrike Schäfer&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Quality&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;shell recorder test cases now run during &lt;code&gt;make test&lt;/code&gt;, thanks to Kurt
Micheli and René Schwaiger (Warning: might remove present keys
when it conflicts with their mountpoints)&lt;/li&gt;
&lt;li&gt;find-tools now is pep and pyflakes happy, thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;fix bashism, thanks to Thomas Waser and Kurt Micheli&lt;/li&gt;
&lt;li&gt;better error message for conditionals plugin, thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;better error message for augeas plugin, thanks to Felix Berlakovich&lt;/li&gt;
&lt;li&gt;Many compilation warnings fixed, thanks to Gabriel Rauter, Thomas Waser&lt;/li&gt;
&lt;li&gt;GSettings: fix double free, thanks to Gabriel Rauter&lt;/li&gt;
&lt;li&gt;Fix external links and implement an external link checker,
thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;Fix openwrt/musl warnings with wrong printf format, thanks to
Thomas Waser&lt;/li&gt;
&lt;li&gt;Fix NODEP metadata, allows you to build all plugins that do not
have dependencies.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the ABI and API of kdb.h is fully compatible, i.e. programs
compiled against an older 0.8 version of Elektra will continue to work
(ABI) and you will be able to recompile programs without errors (API).&lt;/p&gt;

&lt;h3&gt;Libtools&lt;/h3&gt;

&lt;p&gt;Libtools got a new major version (SOVERSION 0 -&gt; 1):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backend/plugin configs are now validated by plugins (needed
by gpg plugin, which checks if wrong key IDs are supplied during mount)&lt;/li&gt;
&lt;li&gt;resolveRecommends was never implemented and was now removed&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Plugins&lt;/h3&gt;

&lt;p&gt;The plugins conditionals and mathcheck are incompatible in some cases
because of changes in syntax.&lt;/p&gt;

&lt;h3&gt;Proposal&lt;/h3&gt;

&lt;p&gt;New API: &lt;code&gt;keyRel2&lt;/code&gt; which differs from &lt;code&gt;keyRel&lt;/code&gt; by allowing you to
specify which relation should be checked.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;github descriptions+workflow (displayed by github when creating
PRs and issues)&lt;/li&gt;
&lt;li&gt;new trigger phases for github, see
&lt;a href=&quot;http://git.libelektra.org/tree/master/doc/GIT.md&quot;&gt;doc/GIT&lt;/a&gt;
thanks to Mihael Pranjić&lt;/li&gt;
&lt;li&gt;valgrind suppressions are great again, thanks to Peter Nirschl&lt;/li&gt;
&lt;li&gt;Plugins get a new namespace &lt;code&gt;internal&lt;/code&gt; which can be used for metadata
that is not relevant for other plugins.&lt;/li&gt;
&lt;li&gt;kdberrors.h is only generated once, which allows us to use other build
systems, thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INCLUDE_SYSTEM_DIRECTORIES&lt;/code&gt; in add_plugin allows you to add a include
path where warnings are suppressed (useful for boost).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infos/provides&lt;/code&gt; now allows multiple entries&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Packaging&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Plugin-provider &lt;code&gt;CRYPTO&lt;/code&gt; can be used to enable/disable all crypto
plugin variants (not enabled by default because its experimental).&lt;/li&gt;
&lt;li&gt;Config option &lt;code&gt;ENABLE_OPTIMIZATIONS&lt;/code&gt;, enable by default: trade more
memory for speed (can be turned off on embedded systems)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INSTALL_SYSTEM_FILES&lt;/code&gt; is now off by default on Mac OS X.&lt;/li&gt;
&lt;li&gt;bash-completion is installed to where pkg-config tells us,
thanks to Gabriel Rauter
(fallback is now &lt;code&gt;/usr/share/bash-completion/completions/kdb&lt;/code&gt;)
was &lt;code&gt;/etc/bash_completion.d/kdb&lt;/code&gt; (removed)&lt;/li&gt;
&lt;li&gt;zsh is now installed to &lt;code&gt;/usr/share/zsh/vendor-completions/_kdb&lt;/code&gt;
(except for Darwin, where &lt;code&gt;/usr/local/share/zsh/site-functions&lt;/code&gt; is used)&lt;/li&gt;
&lt;li&gt;removed &lt;code&gt;/etc/profile.d/kdb.sh&lt;/code&gt;: the script &lt;code&gt;elektraenv.sh&lt;/code&gt; was
removed (and is no longer installed), superseded by &lt;code&gt;elektrify-getenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;added scripts install-sh-completion configure-firefox elektrify-open&lt;/li&gt;
&lt;li&gt;added plugins libelektra-blockresolver.so  libelektra-boolean.so
libelektra-crypto_botan.so libelektra-crypto_openssl.so
libelektra-desktop.so libelektra-mozprefs.so libelektra-passwd.so&lt;/li&gt;
&lt;li&gt;added tests testmod_blockresolver testmod_boolean
testmod_crypto_botan testmod_crypto
gcrypt testmod_crypto_openssl testmod_mozprefs testmod_passwd
test_opmphm_vheap test_opmphm_vstack&lt;/li&gt;
&lt;li&gt;added test data blockresolver mozprefs passwd&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Conditionals and mathcheck plugins got support to specify relative
keys, thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb&lt;/code&gt; command-list: commands are written in bold&lt;/li&gt;
&lt;li&gt;GSettings backend can be build standalone, thanks to Gabriel Rauter&lt;/li&gt;
&lt;li&gt;first data structures for order preserving minimal perfect hash map,
thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;added a new passwd plugin, thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.libelektra.org/tree/master/src/plugins/boolean&quot;&gt;boolean&lt;/a&gt;
plugin to normalize boolean values, thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.libelektra.org/tree/master/src/plugins/desktop&quot;&gt;desktop&lt;/a&gt;
plugin to detect which desktop currently is running (supports kde,
gnome, tde, unity or any other XDG conformant desktop)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc/paper&lt;/code&gt; contains some info for &lt;a href=&quot;https://github.com/openjournals/joss&quot;&gt;joss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.18.tar.gz&quot;&gt;here&lt;/a&gt;
and also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.18.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;name: elektra-0.8.18.tar.gz
size: 2582183
md5sum: 62fe0fbf9ee57ffaa58a982f602f596a
sha1: 743484e16b102a00cd58956a49f0c558939d56a8
sha256: 9ee65895ba5cba6736c13c264637664c1410b25f4aaaeac8f1f83712ff93d53b&lt;/p&gt;

&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.18.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.18/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by email elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/190576e0-9fef-486e-b8da-c4e75be08329.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 16 Sep 2016 23:31:27 +0200</pubDate>
<link>http://www.libelektra.org/news/190576e0-9fef-486e-b8da-c4e75be08329.html</link>
</item>
<item>
<title>0.8.17 Release</title>
<guid isPermaLink="false">e6153a39-c4bd-41c3-bc86-785d451eb6c5</guid>
<description>
&lt;h1&gt;0.8.17 Release&lt;/h1&gt;

&lt;h2&gt;Survey&lt;/h2&gt;

&lt;p&gt;First off: We created a survey questionnaire to gather more knowledge
about the relevance of configuration systems.  If you are involved in
the development of free and open source software (FLOSS) you are the
person we are looking for.&lt;/p&gt;

&lt;p&gt;It would be a great help if you take this survey:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://elektra.limequery.org/625192&quot;&gt;survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be available till 18.07.2016 (anywhere on earth).&lt;/p&gt;

&lt;p&gt;For every thoroughly and not anonymously finished survey € 40 cent
will be donated to one of the following organizations of your choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LimeSurvey (LimeService, kindly hosts this survey)&lt;/li&gt;
&lt;li&gt;SPI (General Donation: 0 A.D., LibreOffice, Debian, ArchLinux, …)&lt;/li&gt;
&lt;li&gt;FSFE&lt;/li&gt;
&lt;li&gt;GNOME&lt;/li&gt;
&lt;li&gt;KDE&lt;/li&gt;
&lt;li&gt;Mozilla (Firefox)&lt;/li&gt;
&lt;li&gt;Wikimedia Foundation (Wikipedia)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Why should I use Elektra?&lt;/h2&gt;

&lt;p&gt;The three main points relevant for most people are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Even though Elektra provides a global keydatabase
configuration files stay human read- and writable
which allows us to integrate unmodified software.&lt;/li&gt;
&lt;li&gt;Flexible adoption on how the configuration is accessed
via plugins: you can run arbitrary code, e.g. do a
&lt;code&gt;git commit&lt;/code&gt; or log/notify when configuration files
are changed.&lt;/li&gt;
&lt;li&gt;Elektra allows you to specify configuration values:

&lt;ul&gt;
&lt;li&gt;use the value of other configuration values (symbolic links)&lt;/li&gt;
&lt;li&gt;calculate the values based on other configuration values&lt;/li&gt;
&lt;li&gt;validation configuration files&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/src/tools/gen&quot;&gt;generate code based on it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/src/plugins/README.md&quot;&gt;and much more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Read more about &lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/WHY.md&quot;&gt;Why using Elektra&lt;/a&gt;,
which also contains since this release unique features,
further reasons and limitations.&lt;/p&gt;

&lt;p&gt;For a small demo see here&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/cantr04assr4jkv8v34uz9b8r&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/cantr04assr4jkv8v34uz9b8r.png&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Qt-Gui reworked mounting and native icons&lt;/li&gt;
&lt;li&gt;Full Mac OS X Support, Build Server improvements
and new beginner friendly tasks&lt;/li&gt;
&lt;li&gt;allows us to mount csv, json and xml (and other common provider names)
without needing to know plugin names&lt;/li&gt;
&lt;li&gt;colored output for kdb tools&lt;/li&gt;
&lt;li&gt;Experimental GSettings support&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Beginner friendly tasks&lt;/h2&gt;

&lt;p&gt;In this release starting developing Elektra gets easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ELEKTRA_DEBUG&lt;/code&gt; adds run-time checks and makes stack traces
as if Elektra would not use plugins&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; for plugins got simplified, in most cases it
should be not more than calling a single function,
even if unit tests and test data are present&lt;/li&gt;
&lt;li&gt;We prepared &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/issues?q=is%3Aissue+is%3Aopen+label%3A%22beginner+friendly%22&quot;&gt;beginner friendly tasks&lt;/a&gt;
for you.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For details about &lt;code&gt;ELEKTRA_DEBUG&lt;/code&gt; and cmake, see individual points below.&lt;/p&gt;

&lt;h2&gt;Find-Tools&lt;/h2&gt;

&lt;p&gt;There is now a fine collection of external scripts which can
executed by &lt;code&gt;kdb + &amp;lt;script&amp;gt;&lt;/code&gt;. The new script &lt;code&gt;kdb find-tools&lt;/code&gt;
provides full text search over the metadata as provided by
the scripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;kdb find-tools -b BRIEF&lt;/code&gt; to search for a short text.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;kdb find-tools -a AUTHOR&lt;/code&gt; to search for a author.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;kdb find-tools -d DATE&lt;/code&gt; to search for a creation date.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;kdb find-tools -e EXECUTE&lt;/code&gt; to search for a type.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Developers should now &lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/scripts/README.md&quot;&gt;add MetaData for their scripts.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to Kurt Micheli!&lt;/p&gt;

&lt;h2&gt;Mac OS X Support&lt;/h2&gt;

&lt;p&gt;Because of its POSIX support one might think it would be trivial to
support Mac OS X. Unfortunately there were many small issues, especially
in the regular expression handling and the filesystem.&lt;/p&gt;

&lt;p&gt;Nevertheless we finally fully support Mac OS X and the newly added
travis build server makes sure it will stay this way.&lt;/p&gt;

&lt;p&gt;A huge thanks to Manuel Mausz and Mihael Pranjić for fixing the
issues and setting up travis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jni plugin now can load Elektra (avoids using &lt;code&gt;.so&lt;/code&gt;)
thanks to Mihael Pranjić&lt;/li&gt;
&lt;li&gt;initial creation of travis.yml
thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;Add all 3 different XCode setups and some Mac OS X fixes
thanks to Mihael Pranjić&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;jenkins&lt;/h2&gt;

&lt;p&gt;Now (nearly) every build job can be triggered from Pull Requests.
For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jenkins build &lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-git-buildpackage-jessie/&quot;&gt;git-buildpackage-jessie&lt;/a&gt; please&lt;/li&gt;
&lt;li&gt;jenkins build &lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-git-buildpackage-wheezy/&quot;&gt;git-buildpackage-wheezy&lt;/a&gt; please&lt;/li&gt;
&lt;li&gt;jenkins build &lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-icc/&quot;&gt;icc&lt;/a&gt; please&lt;/li&gt;
&lt;li&gt;jenkins build &lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-local-installation/&quot;&gt;local-installation&lt;/a&gt; please&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For a full list see &lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/GIT.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to Mihael Pranjić for the setup!&lt;/p&gt;

&lt;h2&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fix inconsistency with one excluded compilation variant,
thanks to Harald Geyer for reporting #698&lt;/li&gt;
&lt;li&gt;fix dynamic searching of installed plugins,
needed so that kdb list-tools works correctly
thanks to Harald Geyer for reporting&lt;/li&gt;
&lt;li&gt;kdbtimer, &lt;code&gt;include &amp;lt;vector&amp;gt;&lt;/code&gt; as needed by some compilers,
a big thanks to Andreas Bombe for the non-maintainer
upload in Debian to fix it for upcoming Debian release&lt;/li&gt;
&lt;li&gt;also find yajl header files if installed in non-standard
include directories,
thanks to Mihael Pranjić&lt;/li&gt;
&lt;li&gt;glib: make sure we use all definitions returned by pkg-config #719,
fixes build on FreeBSD
now glib bindings need cmake 2.8.12
thanks to Mihael Pranjić for reporting/testing
and Manuel Mausz  for fixing&lt;/li&gt;
&lt;li&gt;fix INI for Mac OS X (did require some non-portable sorting
properties of &lt;code&gt;qsort&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;INI makes INI-specific metadata private by prefixing &lt;code&gt;ini&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb export&lt;/code&gt; also works under MinGW,
thanks to Gabriel Rauter&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Rework Add Plugin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;prefer to link shared&lt;/li&gt;
&lt;li&gt;add plugin tests when using link shared&lt;/li&gt;
&lt;li&gt;make ADD_TEST simpler (without calling add_plugintest)&lt;/li&gt;
&lt;li&gt;make installation of test data simpler + honor INSTALL_TESTING option&lt;/li&gt;
&lt;li&gt;fix installation of test_data (do not install whole dir)&lt;/li&gt;
&lt;li&gt;introduce cache so that it is enough to pass parameters
to add_plugin* once&lt;/li&gt;
&lt;li&gt;avoid PLUGIN_DIRECTORY_NAME and change CMAKE_CURRENT_SOURCE_DIR
and CMAKE_CURRENT_BINARY_DIR instead&lt;/li&gt;
&lt;li&gt;add_plugin: remove unused option SHARED_SOURCES&lt;/li&gt;
&lt;li&gt;implement a 3rd phase to add test cases:
correctly handles dependencies of testcases to bindings&lt;/li&gt;
&lt;li&gt;fix testmod_jni&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;CMake&lt;/h2&gt;

&lt;p&gt;for maintainers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cmake variables KDB_DB_SYSTEM and KDB_DB_HOME are now STRING and not PATH.&lt;/li&gt;
&lt;li&gt;BUILD_FULL and BUILD_STATIC are now OFF by default&lt;/li&gt;
&lt;li&gt;building with BUILD_SHARED is now preferred (for all examples, test cases,&amp;hellip;)&lt;/li&gt;
&lt;li&gt;ELEKTRA_DEBUG_BUILD and ELEKTRA_VERBOSE_BUILD is not used anymore.&lt;/li&gt;
&lt;li&gt;ENABLE_DEBUG was added: it does not add debug symbols but run-time assertions.&lt;/li&gt;
&lt;li&gt;More cmake variables are marked as advanced.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;for developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BUILD_STATIC and BUILD_FULL is now OFF by default
(nearly) all unit tests now also work with BUILD_SHARED&lt;/li&gt;
&lt;li&gt;to support shared unit tests, a third phase was added when
adding plugins
inconsistent adding (across phases) of plugins and unit tests is reported&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;add_plugin&lt;/code&gt; remove SHARED_SOURCES, and add &lt;code&gt;ADD_TEST&lt;/code&gt; and &lt;code&gt;INSTALL_TEST_DATA&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;and fixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adding plugin tests is now much simpler, simply use &lt;code&gt;ADD_TEST&lt;/code&gt;
in &lt;code&gt;add_plugin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;KDB_DB_SYSTEM and KDB_DB_HOME are now STRING and not PATH because
of incorrect resolving of &lt;code&gt;~&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;lua bindings tests: make sure lua executable matches with the lua libraries version
thanks to Mihael Pranjić&lt;/li&gt;
&lt;li&gt;lua bindings: do not use hard-coded &lt;code&gt;lua&lt;/code&gt; executable.&lt;/li&gt;
&lt;li&gt;Fix cmake configure when BUILD_DOCUMENTATION is set to OFF
thanks to Kurt Micheli&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;See more about changes to plugin adding in cmake in the
&lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/decisions/cmake_plugins.md&quot;&gt;plugin decision&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Experimental GSettings support&lt;/h2&gt;

&lt;p&gt;As part of the ongoing work of the bachelor thesis
&lt;code&gt;Integration of Elektra into the GNOME desktop environment&lt;/code&gt;
we now have experimental support for Elektra as a GSettings backend on Linux
(We will look into getting OS X support on a later date).
When installed, applications using GSettings default backend will write to Elektra
below the &lt;code&gt;/sw&lt;/code&gt; key. The GSettings bindings are intended as a preview version so
please do not use them in a production system.&lt;/p&gt;

&lt;p&gt;To build the GSettings backend you have to explicitly add the binding even if &lt;code&gt;ALL&lt;/code&gt; is given.
e.g. &lt;code&gt;-DBINDINGS=gsettings&lt;/code&gt; &lt;code&gt;-DBINDINGS=&quot;ALL;gsettings&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All needed core functionality of a GSettings backend is already implemented.
This includes notification support if you have your &lt;code&gt;/sw&lt;/code&gt; mounted with the dbus plugin.&lt;/p&gt;

&lt;p&gt;Please report any bugs you encounter.&lt;/p&gt;

&lt;p&gt;For further information regarding the status of the implementations
please refer to the corresponding &lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/src/bindings/gsettings&quot;&gt;README&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/issues/775&quot;&gt;ticket&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Common Provider Names&lt;/h2&gt;

&lt;p&gt;Mounting now supports to mount commonly known names even if the name is not a plugin.
If more than one plugin is available automatically the best one is selected.
The selection process works by annotating different qualities of the plugins,
see &lt;code&gt;infos/status&lt;/code&gt; in the README.md of individual plugins.&lt;/p&gt;

&lt;p&gt;E.g. to mount a file using a json plugin (called yajl because of the library&amp;rsquo;s name
it build upon)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount file.json json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;New Cachefilter Plugin&lt;/h2&gt;

&lt;p&gt;stores filtered keys internally so that they
do not get accidentally lost and can be written to the storage again without
the user having to remember including them in the writeout&lt;/p&gt;

&lt;p&gt;The longer term goal is to add such global plugins per default, so that
the usage of the API is easier.&lt;/p&gt;

&lt;p&gt;For now you can simply add it using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; kdb global-mount cachefilter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Marvin Mall.&lt;/p&gt;

&lt;h2&gt;Qt GUI 0.0.12&lt;/h2&gt;

&lt;p&gt;The Qt GUI receives new features and a better gnome integration.
Its version number was updated to 0.0.12 (beta).
Major features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use native icons (Qt GUI xdg icon theme support rework)
thanks to Gabriel Rauter&lt;/li&gt;
&lt;li&gt;update desktop entry org.libelektra.elektra-qt-editor.desktop
with new symbolic icon of Elektra&amp;rsquo;s logo
so that qt-gui can nicely started from within Gnome
thanks to Gabriel Rauter&lt;/li&gt;
&lt;li&gt;Add new layout elements to backend wizard
and integrate new BackendBuilder functionality (See Common Provider Names) to qt-gui
thanks to Raffael Pancheri&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Bug fixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reset to defaults now reverts back to build-in defaults.&lt;/li&gt;
&lt;li&gt;Make clicks on search icon focus on search textfield.&lt;/li&gt;
&lt;li&gt;save settings when settings dialog is closed.&lt;/li&gt;
&lt;li&gt;fix crash of qt-gui when crypto plugin was enabled
(and added /shutdown option to enable previous behaviour)
thanks to Peter Nirschl&lt;/li&gt;
&lt;li&gt;fix qt-gui fails to synchronize because of readonly plugins
thanks to Raffael Pancheri&lt;/li&gt;
&lt;li&gt;Rename desktop file: correct reverse url from org.elektra to org.libelektra.&lt;/li&gt;
&lt;li&gt;Rename elektra-qt to elektra-qt-editor.&lt;/li&gt;
&lt;li&gt;Rename ChooseColorWindow: The ChooseColorWindows will be replaced by a
AppearanceSettingsWindow, all references to ChooseColor, choose color have been
replaced by AppearanceSettings or choose appearance.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;code&gt;elektra-qt-editor&lt;/code&gt; binary so both the desktop files TryExec works
and people not starting the gui trough &lt;code&gt;kdb qt-gui&lt;/code&gt; have a speaking name
in their process list.&lt;/li&gt;
&lt;li&gt;Replace occurences of &lt;code&gt;Elektra Editor&lt;/code&gt; with &lt;code&gt;Elektra Qt Editor&lt;/code&gt; so that
we use the same name in all places apart from the tools binary.&lt;/li&gt;
&lt;li&gt;Introduce Appearance Settings Window: Appearance Settings Window
contains both color settings as well as a switch to disable or enable
the system icon theme. For this to work we had to introduce the setting
in &lt;code&gt;guisettings&lt;/code&gt;. We also added a private function in &lt;code&gt;guisettings&lt;/code&gt; to
get and set settings with a boolean value.&lt;/li&gt;
&lt;li&gt;Tree reload on Settings close: We now synch and refresh the tree view on
closing of the settings window if any settings have been changed, so
changes can be seen imediatly in the tree.&lt;/li&gt;
&lt;li&gt;Add qt5 svg module as dependency: the qt5 svg module is needed so we can
display icon themes that provide svg as icon format.&lt;/li&gt;
&lt;li&gt;Add and install symbolic icon with the installation of the Elektra
Qt Editor.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to Gabriel Rauter and Raffael Pancheri for the engagement in
improving qt-gui.&lt;/p&gt;

&lt;h2&gt;Colored kdb tool&lt;/h2&gt;

&lt;p&gt;A big thanks to Gabriel Rauter for improving the user experience with the kdb tool.
On errors and in &lt;code&gt;kdb info&lt;/code&gt; it was often quite hard to find the relevant text.&lt;/p&gt;

&lt;p&gt;Now important parts are highlighted by bold or colorful text.
This helps to spot the important information immediately without sacrificing
information that would be important for a detailed analysis.&lt;/p&gt;

&lt;p&gt;Every tool now has the option &lt;code&gt;--color&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt; which is set to &lt;code&gt;auto&lt;/code&gt; per default.
By writing to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set user/sw/elektra/kdb/#0/color off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;one can go back to previous behavior.&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;improve documentation about how to pop a key&lt;/li&gt;
&lt;li&gt;document how to avoid running test cases as root in
&lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/TESTING.md&quot;&gt;TESTING.md&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;document guarantees of &lt;code&gt;elektraPluginGetData&lt;/code&gt;,
thanks to Marvin Mall&lt;/li&gt;
&lt;li&gt;doc mentions that -1 should be returned
&lt;em&gt;always&lt;/em&gt; when an error is set&lt;/li&gt;
&lt;li&gt;many more spelling mistakes were fixed and useless whitespace was removed,
thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;describe preferences when plugins are included/excluded&lt;/li&gt;
&lt;li&gt;improvements in &lt;code&gt;ksCopy&lt;/code&gt;, &lt;code&gt;ksPop&lt;/code&gt;, &lt;code&gt;kdbGet&lt;/code&gt; and &lt;code&gt;kdbSet&lt;/code&gt;
&lt;a href=&quot;http://doc.libelektra.org/api/0.8.17/html/&quot;&gt;API description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;added &lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/WHY.md&quot;&gt;WHY document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;updated &lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/decisions/cmake_plugins.md&quot;&gt;plugin decision&lt;/a&gt; to include 3rd phase&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;ELEKTRA_DEBUG build&lt;/h2&gt;

&lt;p&gt;ENABLE_DEBUG now enables a debug build for Elektra.
It has nothing to do with debug symbols, but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it enables assertions&lt;/li&gt;
&lt;li&gt;it enables &lt;a href=&quot;http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&quot;&gt;undefinied behavior sanitizer&lt;/a&gt;
for clang&lt;/li&gt;
&lt;li&gt;plugins will not be closed so that stack traces are more useful
(using &lt;code&gt;RTLD_NODELETE&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;code&gt;ENABLE_DEBUG&lt;/code&gt; is recommended for every developer, even if you are not
modifying Elektra itself. The assertions will give you hints on API misusage.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;keyNew&lt;/code&gt; was known to be error-prone. &lt;code&gt;ENABLE_DEBUG&lt;/code&gt; now will report
wrong parameters by an assertion.&lt;/p&gt;

&lt;p&gt;The old options &lt;code&gt;ELEKTRA_DEBUG&lt;/code&gt; and &lt;code&gt;ELEKTRA_VERBOSE&lt;/code&gt; are not available anymore.&lt;/p&gt;

&lt;p&gt;Thanks to:
- Thomas Waser for pointing to &lt;code&gt;RTLD_NODELETE&lt;/code&gt;
- Gabriel Rauter for fixing qt-gui with &lt;code&gt;-DENABLE_DEBUG=ON&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The constants plugin was updated to provide &lt;code&gt;cmake/ENABLE_LOGGER&lt;/code&gt; &lt;code&gt;cmake/ENABLE_DEBUG&lt;/code&gt;
and will no longer provide &lt;code&gt;cmake/ELEKTRA_DEBUG_BUILD&lt;/code&gt; &lt;code&gt;cmake/ELEKTRA_VERBOSE_BUILD&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gabriel Rauter is now listed in
&lt;a href=&quot;https://github.com/elektrainitiative/libelektra/tree/master/doc/AUTHORS&quot;&gt;AUTHORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;constants plugin: configure_file now uses current binary directory, not cluttering
the main build directory.&lt;/li&gt;
&lt;li&gt;fix ssize_t for VS2015,
thanks to Gabriel Rauter&lt;/li&gt;
&lt;li&gt;gtest: fix linking when using arch systemd-nspawn,
thanks to Marvin Mall&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; is added to lua and python bindings needed for Mac OS X,
thanks to Mihael Pranjić&lt;/li&gt;
&lt;li&gt;Fix external unit test for Ubuntu 15.04 by putting files before
the flags,
thanks to Marvin Mall&lt;/li&gt;
&lt;li&gt;symbols in Ni&lt;em&gt; namespace are now in elektraNi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;add more ipv4 and ipv6 test cases for IP adress validation
checker&lt;/li&gt;
&lt;li&gt;crypto-plugin avoid usage of hardcoded error numbers,
thanks to Peter Nirschl&lt;/li&gt;
&lt;li&gt;do not use number for resolver position&lt;/li&gt;
&lt;li&gt;to fix a compiler warning in Mac OS X, we made the printf
format specifier of time_t more portable,
thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;many preparations for global plugins and mmap&lt;/li&gt;
&lt;li&gt;in the constants plugin &lt;code&gt;cmake/BUILTIN_PLUGIN_FOLDER&lt;/code&gt;, &lt;code&gt;BUILTIN_DATA_FOLDER&lt;/code&gt;
and &lt;code&gt;BUILTIN_EXEC_FOLDER&lt;/code&gt; were added.&lt;/li&gt;
&lt;li&gt;doxygen is only run once during build,
thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;add script configure-home to build Elektra
that it will resolve all pathes to home-directories&lt;/li&gt;
&lt;li&gt;add script metaini-to-c that converts METADATA.ini
to C-code, thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;add note that default values must be present for
code generation, thanks to Martin Schleiss&lt;/li&gt;
&lt;li&gt;avoid &lt;code&gt;seq&lt;/code&gt; as it is not available in some &lt;code&gt;*BSD&lt;/code&gt;,
thanks to Mihael Pranjić&lt;/li&gt;
&lt;li&gt;make jni testmod check consistent to others&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the ABI and API is fully forward- and backward-compatible, i.e. programs
compiled against an older 0.8 version of Elektra will continue to work
(ABI) and you will be able to recompile every program without errors
(API). This time you can even compile programs against 0.8.17 and run with 0.8.16.&lt;/p&gt;

&lt;p&gt;For the qt-gui the svg module is added as dependency.&lt;/p&gt;

&lt;p&gt;New and missing files in the installation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elektra-qt-editor&lt;/code&gt; is installed in the path (needed for TryExec in Desktop file)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libelektrasettings.so&lt;/code&gt; will be installed if &lt;code&gt;gsettings&lt;/code&gt; binding is enabled&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libelektra-cachefilter.so&lt;/code&gt; is the new cachefilter plugin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tool_exec/testmod_cachefilter&lt;/code&gt; is its unit test&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tool_exec/find-tools&lt;/code&gt; is a new python script to find other tools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appdata/org.libelektra.elektra-qt-editor.appdata.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icons/hicolor/scalable/apps/elektra-symbolic.svg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;share/man/man1/kdb-find-tools.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Renamed files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;applications/org.elektra.elektra-qt.desktop&lt;/code&gt; got renamed to
&lt;code&gt;applications/org.libelektra.elektra-qt-editor.desktop&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Removed files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some of the installed &amp;ldquo;test data&amp;rdquo; actually was source code from
Elektra. Test data from the following plugins is affected:
&lt;code&gt;hosts&lt;/code&gt;, &lt;code&gt;ini&lt;/code&gt;, &lt;code&gt;lineendings&lt;/code&gt;,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Temporarily removed files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;testmod_lua&lt;/code&gt;, &lt;code&gt;testmod_python&lt;/code&gt; and &lt;code&gt;testmod_python2&lt;/code&gt; do not work in a shared build
and are temporarily disabled if &lt;code&gt;BUILD_SHARED&lt;/code&gt; is enabled.
Also their test data is affected.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.17.tar.gz&quot;&gt;here&lt;/a&gt;
and also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.17.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.17.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2459542&lt;/li&gt;
&lt;li&gt;md5sum: e53efdb9a5e0852c58b21280b1e6c07d&lt;/li&gt;
&lt;li&gt;sha1: a1abcd4ac5aabfc60c34da98a02c4636e4634b5c&lt;/li&gt;
&lt;li&gt;sha256: a6a41afb0160feef84f7d1e0d199da26022ff8cb52ed455a0d306b589838d8f5&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.17.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.17/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by email elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/e6153a39-c4bd-41c3-bc86-785d451eb6c5.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 14 Jun 2016 08:32:44 +0200</pubDate>
<link>http://www.libelektra.org/news/e6153a39-c4bd-41c3-bc86-785d451eb6c5.html</link>
</item>
<item>
<title>kdb set system/hosts/ipv6/localhost ::1</title>
<guid isPermaLink="false">9c9247ee-ee9c-4f4a-a68e-76959def9b82</guid>
<description>
&lt;h1&gt;0.8.16 Release&lt;/h1&gt;

&lt;p&gt;In case you do not yet know about it, here is an abstract about Elektra:&lt;/p&gt;

&lt;p&gt;Elektra serves as a universal and secure framework to access configuration
parameters in a global, hierarchical key database.
Elektra provides a mature, consistent and easily comprehensible API.
Its modularity effectively avoids code duplication across applications
and tools regarding configuration tasks. Elektra abstracts from
cross-platform-related issues and allows applications to be aware of other
applications' configurations, leveraging easy application integration.&lt;/p&gt;

&lt;p&gt;Elektra consists of three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;LibElektra&lt;/em&gt; is a modular configuration access toolkit to
construct and integrate applications into a global,
hierarchical key database. The building blocks are:

&lt;ul&gt;
&lt;li&gt;language bindings (inclusive high-level interfaces)&lt;/li&gt;
&lt;li&gt;GenElektra, the code generator for type-safe bindings&lt;/li&gt;
&lt;li&gt;plugins for configuration access behaviour and validation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SpecElektra&lt;/em&gt; is a configuration specification language
that is easy to use and self-contained in the same key database (i.e.
written in any of the configuration file formats Elektra supports).&lt;/li&gt;
&lt;li&gt;Tools on top of LibElektra for administrators, such as CLI tools and GUIs.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;See &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same text as follows is also available
&lt;a href=&quot;http://doc.libelektra.org/news/9c9247ee-ee9c-4f4a-a68e-76959def9b82.html&quot;&gt;here as html&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/NEWS.md&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Elektra now allows applications to support multiple
profiles with a plugin, thus &lt;em&gt;without code modifications&lt;/em&gt; in
Elektra applications.
That means a user can select multiple configuration files to use,
even if the application has no explicit support for it.
It completes the cascading feature (level $HOME before /etc), to allows
us also to select different configuration for the same level.&lt;/li&gt;
&lt;li&gt;Resolver can now better handle conflicts that happen
when files are removed and others that happen
within a single time tick (resolution of your clock)
and also better handles NFS and older file systems&lt;/li&gt;
&lt;li&gt;Default storage and resolver can be changed by symlink.
So no need to recompile Elektra to change the default storage
from INI to dump.
INI now works quite reliable as default plugin and already
used by default by its author Thomas Waser.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Other important features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;shell plugin allows you to execute shell commands on every KDB access
and curlget plugin allows you to download configuration files
from a URL during KDB access.&lt;/li&gt;
&lt;li&gt;Improvements in sync/merge of qt-gui with important fix
(Usage of 0.8.15 qt-gui is discouraged)&lt;/li&gt;
&lt;li&gt;Add plugin for dpkg database (read-only)&lt;/li&gt;
&lt;li&gt;Assignment for conditionals using &lt;code&gt;assign/condition&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Support for multiple and nested statements&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;condition/validsuffix&lt;/code&gt; which allows you to suffix
numbers with signs such as &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt;.
It does not check if the suffixes are identical.&lt;/li&gt;
&lt;li&gt;kdb mount now uses topological sorting to always
find a dependency solution if there is one,
many effort was put in that ordering is as requested, thanks to
Thomas Waser for the topological sorting implementation&lt;/li&gt;
&lt;li&gt;Frontend generated by GenElektra now also can reload its
values with taking the correct context into account.&lt;/li&gt;
&lt;li&gt;Source is now automatically formatted and formatting is checked on build server&lt;/li&gt;
&lt;li&gt;More flexible CMake syntax for PLUGINS&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Many new or vastly improved plugins are waiting to be explored.&lt;/p&gt;

&lt;h3&gt;curlget&lt;/h3&gt;

&lt;p&gt;The plugin curlget fetches a configuration file from a remote host before
the configuration is being accessed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount -R noresolver /tmp/curltest.ini system/curltest ini curlget url=&quot;https://raw.githubusercontent.com/ElektraInitiative/libelektra/master/src/plugins/ini/ini/plainini&quot;
kdb ls system/curltest  # every get access will redownload the file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h3&gt;INI&lt;/h3&gt;

&lt;p&gt;The INI plugin is still under heavy development and
was again nearly rewritten:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fixed key is below hacks&lt;/li&gt;
&lt;li&gt;fixed ordering&lt;/li&gt;
&lt;li&gt;custom delimiter&lt;/li&gt;
&lt;li&gt;use meta array for comments&lt;/li&gt;
&lt;li&gt;rewritten ordering&lt;/li&gt;
&lt;li&gt;best effort order&lt;/li&gt;
&lt;li&gt;fixed array support&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h3&gt;shell&lt;/h3&gt;

&lt;p&gt;This plugin allows you to executes shell commandos after kdbGet, kdbSet and kdbError (failing kdbSet):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount /tmp/test.ini system/shelltest ini array= shell 'execute/set=echo set &amp;gt;&amp;gt; /tmp/log,execute/get=echo get &amp;gt;&amp;gt; /tmp/log'
kdb set system/shelltest
cat /tmp/log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h3&gt;validation&lt;/h3&gt;

&lt;p&gt;The validation plugin is not new, but got many new features.
It allows you to match values by a regex and set your own
error messages in case a validation did not match.&lt;/p&gt;

&lt;p&gt;Up to now, the regex was given as is to regcomp, which means
that if the regex is contained &lt;em&gt;anywhere&lt;/em&gt; in the value, the
value is accepted.&lt;/p&gt;

&lt;p&gt;Often this is not what we want, thus Thomas Waser added special
support for icase, word and line validation.
Additionally, flags allow you now to ignore the case or invert
the match. This can be changed for every individual value
or for the whole mountpoint.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;code&gt;kdb vset&lt;/code&gt; validation was updated to use the new
metadata and correctly match against the whole value.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h3&gt;hosts&lt;/h3&gt;

&lt;p&gt;Only minor improvements were necessary for the host plugin but
it is quite matured already. The contract was changed so that
ipv6 addresses for ipv4 addresses will be rejected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# kdb mount --with-recommends /etc/hosts system/hosts hosts
# kdb set system/hosts/ipv4/localhost ::1
The command set failed...
Reason: localhost value: ::1 message: Address family not supported
# kdb set system/hosts/ipv6/localhost ::1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also comfortably and safely edit the hosts file
with: &lt;code&gt;kdb editor system/hosts hosts&lt;/code&gt;, then you have the
functionality &lt;code&gt;sudoedit&lt;/code&gt; for the hosts file.&lt;/p&gt;

&lt;h3&gt;rename&lt;/h3&gt;

&lt;p&gt;Again not a new plugin, but the plugin was greatly improved
and many test cases were added.&lt;/p&gt;

&lt;p&gt;Now you can set upper/lowercase individually for both sides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What applications see.&lt;/li&gt;
&lt;li&gt;What the configuration file contains.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For example, if you always want the keys in the configuration file upper case,
but for your application lower case you would use:
&lt;code&gt;
$ kdb mount caseconversion.ini /rename ini rename get/case=tolower,set/case=toupper
$ kdb set user/rename/section/key valu
$ cat ~/.config/caseconversion.ini
[SECTION]
KEY = value
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h3&gt;Resolver&lt;/h3&gt;

&lt;p&gt;Resolving by ~ as home directory now also for system and spec namespaces,
thanks to Thomas Waser.&lt;/p&gt;

&lt;p&gt;Files keep their previous owner, useful when root edits configuration
files of others, thanks to Thomas Waser.&lt;/p&gt;

&lt;p&gt;The resolver has many improvements to better detect conflicts.&lt;/p&gt;

&lt;p&gt;The lock is now extended longer after the commit and already requested
in the temporary file.&lt;/p&gt;

&lt;p&gt;The warnings were improved when &lt;code&gt;getcwd&lt;/code&gt; fails.&lt;/p&gt;

&lt;p&gt;Resolver now can correctly handle conflicts with empty files.  It can also
better cope with frequent commits of the same binary.  Elektra already
reached some limits filesystems have.&lt;/p&gt;

&lt;h2&gt;Bindings&lt;/h2&gt;

&lt;h3&gt;Java&lt;/h3&gt;

&lt;p&gt;Marvin Mall improved the Java binding, fixed the appending
of keysets, added lots of documentation, and many unit tests.&lt;/p&gt;

&lt;h3&gt;C++&lt;/h3&gt;

&lt;p&gt;Some kind of misusage of vaargs is now detected at compile-time instead
of crashing at runtime.&lt;/p&gt;

&lt;h3&gt;Generated C++&lt;/h3&gt;

&lt;p&gt;Value now supports convenience activations.
Values can be used to activate context, no more layers are needed.
Topological sorting makes sure that values are activated in the
correct order, loops are not allowed anymore.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bool operator&amp;lt;&lt;/code&gt; is now correctly inline (allows to use it in more than
one translation unit)&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;p&gt;René Schwaiger&lt;sanssecours&gt; reworked most of the documentation and
fixed countless spelling mistakes and other problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Peter Nirschl updated the status of the crypto-plugin
and fixed a typo&lt;/li&gt;
&lt;li&gt;Daniel Bugl wrote a cascading tutorial&lt;/li&gt;
&lt;li&gt;Daniel Bugl fixed all broken links&lt;/li&gt;
&lt;li&gt;René Schwaiger also drew a new logo with SVG.
It is already used on github as avatar for the organisation.&lt;/li&gt;
&lt;li&gt;make all é use the same code point 233.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Testing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tests work if the build path contains spaces&lt;/li&gt;
&lt;li&gt;Tests: Fix problems locating memory checker&lt;/li&gt;
&lt;li&gt;remove obsolete TestScript.cmake&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to René Schwaiger&lt;/p&gt;

&lt;h2&gt;Maintainer&lt;/h2&gt;

&lt;p&gt;By default now ALL plugins except EXPERIMENTAL are included.
Plugins will be automatically excluded if dependencies are missing.&lt;/p&gt;

&lt;p&gt;The PLUGINS syntax was vastly improved.  Now many categories can be
intermixed freely and also categories can be used for exclusion.&lt;/p&gt;

&lt;p&gt;E.g. to include all plugins without deps,
that provide storage (except yajl) and are maintained, but not include all plugins
that are experimental, you would use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-DPLUGINS=&quot;NODEP;STORAGE;-yajl;MAINTAINED;-EXPERIMENTAL&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Details see &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/doc/COMPILE.md&quot;&gt;/doc/COMPILE.md&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Renamed files:&lt;/h3&gt;

&lt;p&gt;/usr/include/elektra/merging/kdbmerge.hpp -&gt;
  /usr/include/elektra/merging/mergingkdb.hpp&lt;/p&gt;

&lt;p&gt;/etc/profile.d/kdb -&gt; /etc/profile.d/kdb.sh&lt;/p&gt;

&lt;p&gt;(So that it works on arch linux, thanks to Gabriel Rauter)&lt;/p&gt;

&lt;h3&gt;removed files:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/usr/lib/elektra/libelektra-crypto.so&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;was only necessary because of limitations of the build system and is
now removed.  It never had actual functionality, but was only a stub
without a crypto provider selected.&lt;/p&gt;

&lt;h3&gt;new files:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/usr/include/kdbease.h&lt;/li&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-curlget.so*&lt;/li&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-dpkg.so*&lt;/li&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-profile.so*&lt;/li&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-resolver_fm_hpu_b.so&lt;/li&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-shell.so*&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;more new files with ALL or EXPERIMENTAL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/usr/lib/elektra/libelektra-semlock.so&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;new tests all in folder /usr/lib/elektra/tool_exec:
testcpp_contextual_update testkdb_conflict test_keyname testmod_curlget
testmod_dpkg testmod_jni testmod_profile testmod_semlock testmod_shell
testtool_mergingkdb&lt;/p&gt;

&lt;p&gt;Following Plugins are excluded on specific platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mathcheck on Intel compiler (reason: failing test cases)&lt;/li&gt;
&lt;li&gt;simpleini on non-glibc systems (reason: not portable printf extension)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;new symlinks:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-storage.so&lt;/li&gt;
&lt;li&gt;/usr/lib/elektra4/libelektra-resolver.so&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;new releases&lt;/h3&gt;

&lt;p&gt;The first release of the libraries libelektratools-full, libelektratools
and libelektragetenv. They now have SOVERSION 0.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;

&lt;p&gt;You do not need to format the source manually anymore.
Make sure that you run scripts/reformat-source before
creating a PR.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;clang-tidy&lt;/code&gt; helps you to add blocks to have better
maintainable code.&lt;/p&gt;

&lt;p&gt;Felix Berlakovich improved the performance of the augeas plugin and
also contributed a script to benchmark different host plugin.
His thesis can be downloaded from &lt;a href=&quot;http://www.libelektra.org/ftp/elektra/berlakovich2016universal.pdf&quot;&gt;here&lt;/a&gt;.
It contains benchmarks and discussions about augeas.&lt;/p&gt;

&lt;p&gt;The CMake function &lt;code&gt;add_plugin&lt;/code&gt; was completely rewritten.
Now you do not have to register your plugin at multiple points
but instead information of README.md is parsed to correctly
register the plugin to categories as stated by &lt;code&gt;infos/status&lt;/code&gt;
and &lt;code&gt;infos/provides&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code generator for errors also yields macros. This
avoids usage of the IDs, which can be problematic if
multiple pullrequests are prepared at once.&lt;/p&gt;

&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;This might be the last release supporting wheezy, because
it gets more and more time-intensive to find workarounds
for the old compiler. The C++11 regex do not work at all.&lt;/p&gt;

&lt;h3&gt;Binary Compatibility Test&lt;/h3&gt;

&lt;p&gt;When you execute the testcases of 0.8.15 against Elektra 0.8.16
following testcases fail. None of them effect the API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test_splitget test_splitset .. Internal restructuring&lt;/li&gt;
&lt;li&gt;testmod_crypto .. not included by default now&lt;/li&gt;
&lt;li&gt;testmod_ini .. section handling changed, line 178:
              &lt;code&gt;nosectionkey contained no comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;testmod_rename .. internal API elektraKeyCreateNewName changed&lt;/li&gt;
&lt;li&gt;testmod_resolver .. internal data structure now contains more
                   members to remember uid and gid&lt;/li&gt;
&lt;li&gt;testmod_template .. not present by default&lt;/li&gt;
&lt;li&gt;testtool_backend testtool_backendbuilder testtool_backendparser&lt;/li&gt;
&lt;li&gt;testtool_specreader .. changes in KDB tool before release&lt;/li&gt;
&lt;li&gt;check_kdb_internal_check .. experimental plugins are now excluded&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Added API&lt;/h3&gt;

&lt;p&gt;in libease René Schwaiger added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern char const * elektraKeyGetRelativeName(Key const * cur, Key const * parentKey);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in libmeta Thomas Waser added (partly based on ideas/code from Felix Berlakovich):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern void elektraMetaArrayAdd(Key *, char const *, char const *);
extern KeySet * elektraMetaArrayToKS(Key *, char const *);
extern char * elektraMetaArrayToString(Key *, char const *, char const *);
extern int elektraSortTopology(KeySet *, Key * *);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Tools&lt;/h2&gt;

&lt;h3&gt;Qt-gui&lt;/h3&gt;

&lt;p&gt;Raffael Pancheri fixed an important issue which broke the synchronization
because an key related to Elektra&amp;rsquo;s internal version information was missing.&lt;/p&gt;

&lt;p&gt;Felix Berlakovich updated the qt-gui so that it uses a newly written sync-method
added in libtools.&lt;/p&gt;

&lt;p&gt;Gabriel Rauter added a desktop file that uses the new svg logo from
René Schwaiger.&lt;/p&gt;

&lt;h2&gt;Portability&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Peter Nirschl fixed code in the resolver that uses EBADMSG which was not
available in BSD.&lt;/li&gt;
&lt;li&gt;Peter Nirschl improved detection of librt&lt;/li&gt;
&lt;li&gt;Felix Berlakovich fixed searching of FindSystemd&lt;/li&gt;
&lt;li&gt;MinGW64 resolver now handles conflicts correctly and does not ignore them
anymore and now also is able to create empty files (but still not directories)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Mac OS X&lt;/h3&gt;

&lt;p&gt;A lot of effort was invested to all test cases also run on Mac OS X:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.template syntax&lt;/li&gt;
&lt;li&gt;linking errors&lt;/li&gt;
&lt;li&gt;fix regex in conditionals plugins&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to René Schwaiger&lt;/p&gt;

&lt;h2&gt;Bugs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;print null-environment correctly with &lt;code&gt;kdb getenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;keyIs(Direct)Below didn&amp;rsquo;t work with cascading keys&lt;/li&gt;
&lt;li&gt;fix elektraKeyGetRelativeName (needed by ni) for cascading
keys and move it to libease, thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;make nickel tests show correct test name, thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;glib: replace cursor_t with gssize so that GElektra-4.0.gir
builds with gobject-introspection later than 1.47, thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;fixed out-of-bounds bug in timeofday plugin&lt;/li&gt;
&lt;li&gt;elektraMetaArrayToKS correctly adds parent key, thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;kdb-shell: Do not abort ksOutput on binary data.&lt;/li&gt;
&lt;li&gt;some rework for global hooks, still not stable&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.16.tar.gz&quot;&gt;here&lt;/a&gt;
and now also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.16.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.16.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2405443&lt;/li&gt;
&lt;li&gt;md5sum: ef0c138b4a4fda017aa8bb6f812671ce&lt;/li&gt;
&lt;li&gt;sha1: c6a6f9c26addd5fcc274cea635de02ef680cfb1a&lt;/li&gt;
&lt;li&gt;sha256: 3cf0624eb027e533192ca9d612618df3d38ec3674c9cd20474f04ff269fad77e&lt;/li&gt;
&lt;li&gt;sha512: b225e61379907365a423ea75ec7138e5257bb78c526bb05a1ec21f66a52eb4bad9e6f1eb23209d700670b21b86166497b47c3bc46bc9d45f6d366cd544afc326&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.16.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.16/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by mail elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/9c9247ee-ee9c-4f4a-a68e-76959def9b82.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 29 Apr 2016 12:45:39 +0200</pubDate>
<link>http://www.libelektra.org/news/9c9247ee-ee9c-4f4a-a68e-76959def9b82.html</link>
</item>
<item>
<title>0.8.15 Release</title>
<guid isPermaLink="false">1ab4a560-c286-46d2-a058-1a8e7e208fe8</guid>
<description>
&lt;h1&gt;0.8.15 Release&lt;/h1&gt;

&lt;p&gt;In case you do not yet know about it, here is an abstract about Elektra:&lt;/p&gt;

&lt;p&gt;Elektra serves as a universal and secure framework to access configuration
parameters in a global, hierarchical key database.
Elektra provides a mature, consistent and easily comprehensible API.
Its modularity effectively avoids code duplication across applications
and tools regarding configuration tasks. Elektra abstracts from
cross-platform-related issues and allows applications to be aware of other
applications' configurations, leveraging easy application integration.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is one of the largest release up to now. It includes many
user-visible improvements. Some highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mounting is vastly improved:
think about Debian&amp;rsquo;s &amp;ldquo;dpkg&amp;rdquo; to &amp;ldquo;apt&amp;rdquo;-like functionality&lt;/li&gt;
&lt;li&gt;In previous releases you could already specify the structure
of the configuration. Now you can also automatically enforce
this property.&lt;/li&gt;
&lt;li&gt;We split the shared library &lt;code&gt;libelektra&lt;/code&gt; into smaller parts.
Now users can link against the parts of the library they need.&lt;/li&gt;
&lt;li&gt;As always, the ABI and API is fully forward-compatible.&lt;/li&gt;
&lt;li&gt;The release contains improvements in the
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/decisions/bootstrap.md&quot;&gt;bootstrapping process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We improved the &lt;code&gt;ini&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt; and &lt;code&gt;crypto&lt;/code&gt; plugins.&lt;/li&gt;
&lt;li&gt;The tool &lt;code&gt;kdb&lt;/code&gt; now supports bookmarks and profiles.&lt;/li&gt;
&lt;li&gt;The new tool &lt;code&gt;kdb editor&lt;/code&gt; allows you to edit KDB configuration in
your favorite text editor.&lt;/li&gt;
&lt;li&gt;We are glad of the new packages for Debian, Arch Linux and OpenWRT.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The same text as follows is also available
&lt;a href=&quot;http://doc.libelektra.org/news/1ab4a560-c286-46d2-a058-1a8e7e208fe8.html&quot;&gt;here as html&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/NEWS.md&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Global Mount&lt;/h2&gt;

&lt;p&gt;Sometimes you simply want some functionality for the whole key database.
For example, you want to enable logging or notification of configuration
changes. In previous versions, you had to change every mountpoint
individually.  Even more problematic, every mountpoint created its
individual logs and notifications, without any way for someone to know
if an application has issued its last log/notification.&lt;/p&gt;

&lt;p&gt;These problems are now solved by global plugins. The same plugins are
reused for this purpose. Also the mounting works nearly in the same way,
you only have to omit the configuration file and the mountpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb global-mount syslog journald dbus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà, from now on every configuration change gets logged to syslog
and journald. Additionally, every application gets notified via dbus.&lt;/p&gt;

&lt;p&gt;If you want it more verbose for debugging, you can easily do so by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb global-mount logchange counter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which gives you detailed information to standard output which keys
were changed/edited/deleted. Additionally, Elektra counts how often
the &lt;code&gt;counter&lt;/code&gt; plugin is invoked.&lt;/p&gt;

&lt;p&gt;The underlying work for the global plugins, i.e. hooks in the core
libraries and the &lt;code&gt;list&lt;/code&gt; plugin that allows us to use many plugins
without bloating the core was done by Thomas Waser.&lt;/p&gt;

&lt;p&gt;It was already possible in earlier versions of Elektra to specify the
configuration of your program. Until now, this specification could be
mainly used to to generate code as described
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/tools/gen&quot;&gt;here&lt;/a&gt;.
This release adds two more interesting options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the spec plugin, and&lt;/li&gt;
&lt;li&gt;the spec mount.&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Spec Plugin&lt;/h2&gt;

&lt;p&gt;The most important global plugin that is now newly introduced with this
release (thanks to Thomas Waser) is the &lt;code&gt;spec&lt;/code&gt; plugin.  By default it
will be added for every global-mount. So for a new installation make
sure you executed at least once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb global-mount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The spec plugin is a global plugin that copies metadata from the
&lt;code&gt;spec&lt;/code&gt;-namespace to other namespaces. That means, it reads the
specification, and makes sure that the configuration conforms to it. The
actual validation is done by the many validation plugins already present.&lt;/p&gt;

&lt;p&gt;Lets start by saying a key is a long and must have at least the
value 10:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb setmeta spec/example/longkey check/type long
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can create a key in a different namespace and see if the &lt;code&gt;spec&lt;/code&gt;
plugin applies the metadata correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set /example/longkey 25
kdb lsmeta /example/longkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should now at least print &lt;code&gt;check/type&lt;/code&gt;.
By itself, this is useful for documentation of keys.
For example, the application developer says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb setmeta spec/example/longkey description &quot;Do not change&quot;
kdb setmeta spec/example/longkey example 30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The user can retrieve this documentation by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb getmeta /example/longkey description
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we want &lt;code&gt;check/type&lt;/code&gt; to be not only a documentation, but also
enforced.&lt;/p&gt;

&lt;h2&gt;Spec Mount&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;kdb setmeta&lt;/code&gt; extensively and always looking out that all plugins
are mounted correctly is error-prone. So instead, one can directly mount
the plugins as specified.  For the example above one simply needs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb setmeta spec/example mountpoint example.ecf
kdb spec-mount /example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we try to modify &lt;code&gt;/example/longkey&lt;/code&gt; it will be validated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set /example/longkey a
&amp;gt; Error (#52) [...] long [not] matched [...] a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on the present metadata, the correct plugins (in this case &lt;code&gt;type&lt;/code&gt;
because of the metadata &lt;code&gt;check/type&lt;/code&gt;) will be loaded.&lt;/p&gt;

&lt;p&gt;We can also create a whole specification file, first mount the
specification and then the mountpoint according the specification, e.g
when we have &lt;code&gt;battery.ini&lt;/code&gt; in the folder &lt;code&gt;$(dirname $(kdb file spec))&lt;/code&gt;
with following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[]
mountpoint = battery.ini
infos/plugins = ini

[level]
check/enum = 'critical', 'low', 'high', 'full'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mount the file itself:
kdb mount battery.ini spec/example/battery ni
# make sure all plugins are present (e.g. enum for check/enum):
kdb spec-mount /example/battery
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets verify if it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb lsmeta /example/battery/level
# we see it has a check/enum
kdb getmeta /example/battery/level check/enum
# now we know allowed values
kdb set /example/battery/level low
# success, low is ok!
kdb set /example/battery/level wrong
# fails, not one of the allowed values!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main idea of the spec-mount is: search a plugin for every
specification (metadata) found in the spec-namespace.&lt;/p&gt;

&lt;h2&gt;General Mount Improvements&lt;/h2&gt;

&lt;p&gt;In earlier versions &lt;code&gt;kdb mount&lt;/code&gt; failed when plugin dependencies were
not satisfied.  Now dependencies will automatically be fulfilled, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount /etc/modules system/modules line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In earlier versions you would have got an error because of the missing
&lt;code&gt;null&lt;/code&gt; plugin. Now it simply adds the needed plugins.&lt;/p&gt;

&lt;p&gt;The plugins given in the command-line used to be real plugins. Now also
so called providers are accepted.&lt;/p&gt;

&lt;p&gt;To make providers useful we need to actually know which plugin is the
best candidate. To get the information we added a &lt;code&gt;infos/status&lt;/code&gt; clause
in the contract. In this clause the plugin developer adds many details
how well the plugin is tested, reviewed, documented, maintained and so
on. Based on this information, the best suited plugin will be chosen.
For example, you now can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount /etc/security/limits.conf system/limits augeas \
    lens=Limits.lns logging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the best suitable logger will automatically be chosen.&lt;/p&gt;

&lt;p&gt;The configuration variable &lt;code&gt;/sw/kdb/current/plugins&lt;/code&gt; now allows
us to pass plugin configuration with the same syntax as the plugin
specification passed on the commandline. A subtle difference is that
thus the shell-splitting of arguments is missing, it is not possible to
include whitespaces in the plugin configuration that way.&lt;/p&gt;

&lt;p&gt;Now it is also possible to include the same plugin multiple times and
also give them individual names. This feature is essential for
script-based plugins, e.g. you now might add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount file.x /example/mountpoint \
    lua#resolver script=resolver.lua \
    lua#storage script=storage.lua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Furthermore, &lt;code&gt;kdb mount&lt;/code&gt; now supports recommendations, which can be
enabled with &lt;code&gt;--with-recommends&lt;/code&gt;. E.g. supplied to the mount command
using augeas above, comments will automatically transformed to metadata
to avoid cluttering of the real configuration.&lt;/p&gt;

&lt;h2&gt;Library Split&lt;/h2&gt;

&lt;p&gt;Up to now, Elektra consisted only of a single shared library,
&lt;code&gt;libelektra.so&lt;/code&gt;.  Not all symbols in it were relevant to end users, for
example, some were only needed by plugins. Others were only proposed and
not yet part of the stable API. And finally, other symbols were not needed
in some situations, e.g.  the plugins do not need the &lt;code&gt;kdb&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;Thus, we split &lt;code&gt;libelektra.so&lt;/code&gt;, so that only coherent parts are in the
same library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libelektra-core.so&lt;/code&gt; only contains the &lt;code&gt;KeySet&lt;/code&gt; data structure and
module loading.  Every binary using Elektra should link against it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libelektra-kdb.so&lt;/code&gt; contains the missing &lt;code&gt;KDB&lt;/code&gt; symbols. Together with
the &lt;code&gt;core&lt;/code&gt; they contain everything declared in &lt;code&gt;kdb.h&lt;/code&gt;.
Michael Zehender  plans to have multiple variants of &lt;code&gt;libelektra-kdb.so&lt;/code&gt;
that use different kinds of concurrency.
Headerfile: &lt;code&gt;&amp;lt;kdb.h&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libelektra-ease.so&lt;/code&gt; adds functionality missing in &lt;code&gt;core&lt;/code&gt; to make the
life for C programmers easier.
New headerfile: &lt;code&gt;kdbease.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libelektra-proposal.so&lt;/code&gt; adds functionality proposed for &lt;code&gt;core&lt;/code&gt;. It
directly uses internal structures of &lt;code&gt;core&lt;/code&gt;, thus they always need to
have exactly the same version.
Headerfile: &lt;code&gt;kdbproposal.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The source code is now better organized by the introduction of a &lt;code&gt;libs&lt;/code&gt;
folder.  The explanation of every library can be found in
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/libs&quot;&gt;/src/libs/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rationale of the library split is documented
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/decisions/library_split.md&quot;&gt;here&lt;/a&gt;.
Shortly put, it was needed for further evolution and allowing us to grow
and enhance without getting a fat core.&lt;/p&gt;

&lt;p&gt;Thanks to Manuel Mausz for fixing many bugs related to the library split
and also adapting all the bindings for it.&lt;/p&gt;

&lt;h3&gt;Benchmark&lt;/h3&gt;

&lt;p&gt;To show that the split does not make Elektra slower, Mihael Pranjić made
a small benchmark. The real time of
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/benchmarks/large.c&quot;&gt;benchmarks/large&lt;/a&gt;
and revision 634ad924109d3cf5d9f83c33aacfdd341b8de17a&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;kdb-static: Median :0.8800&lt;/li&gt;
&lt;li&gt;kdb-full: Median :0.8700&lt;/li&gt;
&lt;li&gt;kdb: Median :0.8700&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So it seems that the split does not influence the time of running
elektrified processes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Times were measured with time(1) and the median is calculated for 21
runs of benchmarks/large. This was done using
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/scripts/benchmark_libsplit.sh&quot;&gt;scripts/benchmark_libsplit.sh&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the ABI and API is fully forward-compatible, i.e. programs
compiled against an older 0.8 version of Elektra will continue to work
(ABI) and you will be able to recompile every program without errors
(API).&lt;/p&gt;

&lt;p&gt;We added &lt;code&gt;keyGetNamespace&lt;/code&gt; which allows us to handle all namespaces
in a switch and to iterate all namespaces. This is essential, when
a new namespace is added, thus then the compiler can warn you about
every part where the new namespace is not yet considered. We currently
do not plan to add a new namespace, but better be safe than sorry.&lt;/p&gt;

&lt;p&gt;The internal function &lt;code&gt;keyCompare&lt;/code&gt; now also detects any metadata
change.&lt;/p&gt;

&lt;p&gt;libtools was nearly rewritten. Even though it is mostly API compatible
(you should not use the low-level &lt;code&gt;Backend&lt;/code&gt; anymore but instead use the
&lt;code&gt;BackendBuilder&lt;/code&gt;), it is certainly not ABI compatible.  If you have an
undefined symbol: &lt;code&gt;_ZN3kdb5tools7Backend9addPluginESsNS_6KeySetE&lt;/code&gt; you need
to recompile your tool. Even the merging part has ABI incompatibility
(different size of &lt;code&gt;_ZTVN3kdb5tools7merging14NewKeyStrategyE&lt;/code&gt;).
Unfortunately, we still cannot guarantee compatibility in &lt;code&gt;libtools&lt;/code&gt;,
further changes are planned (e.g. implementing mounting of lazy plugins).&lt;/p&gt;

&lt;p&gt;The python(2) and lua interfaces changed, an additional argument (the
plugin configuration) is passed to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The INI plugin was rewritten, so many options changed in incompatible ways.&lt;/p&gt;

&lt;p&gt;The default format plugin (e.g. for import/export) is no longer hardcoded
to be &lt;code&gt;dump&lt;/code&gt;.  Instead KDB_DEFAULT_STORAGE will be used.
To get KDB_DEFAULT_STORAGE you can use the constants plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount-info
kdb get system/info/constants/cmake/KDB_DEFAULT_STORAGE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Manuel Mausz plugins do no longer export any method other than
&lt;code&gt;elektraPluginSymbol&lt;/code&gt;. It now will fail if you directly linked against
plugins and did not correctly use their public interface. Please
use the module loading and access functions via the contract.&lt;/p&gt;

&lt;p&gt;The CMake and Pkgconfig Files now only link against &lt;code&gt;elektra-core&lt;/code&gt; and
&lt;code&gt;elektra-kdb&lt;/code&gt;.  If you used some symbols not present in &lt;code&gt;kdb.h&lt;/code&gt;, your
application might not work anymore.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;libelektra.so&lt;/code&gt; is still present for compatibility reasons.  It should
not be used for new applications.  Some unimportant parts, however,
moved to the &amp;ldquo;sugar&amp;rdquo; libraries.  E.g. the symbol &lt;code&gt;elektraKeyCutNamePart&lt;/code&gt;
is no longer part of &lt;code&gt;libelektra.so&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Bootstrapping&lt;/h3&gt;

&lt;p&gt;When you use &lt;code&gt;kdbOpen&lt;/code&gt; in Elektra as first step it reads mountpoint
configuration from &lt;code&gt;/elektra&lt;/code&gt;.  This step is the only hardcoded one,
and all other places of the KDB&amp;rsquo;s tree can be customized as desired
via mounting.&lt;/p&gt;

&lt;p&gt;The bootstrapping now changed, so that &lt;code&gt;/elektra&lt;/code&gt; is not part of the
default configuration &lt;code&gt;default.ecf&lt;/code&gt; (or as configured with &lt;code&gt;KDB_DB_FILE&lt;/code&gt;),
but instead we use &lt;code&gt;elektra.ecf&lt;/code&gt; (or as configured with &lt;code&gt;KDB_DB_INIT&lt;/code&gt;).
This behaviour solves the problem that &lt;code&gt;default.ecf&lt;/code&gt; was read twice
(and even differently, once for &lt;code&gt;/elektra&lt;/code&gt; and once for &lt;code&gt;/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To be fully compatible with previous mountpoints, Elektra will still read
mountpoints from &lt;code&gt;default.ecf&lt;/code&gt; as long as &lt;code&gt;elektra.ecf&lt;/code&gt; is not present.&lt;/p&gt;

&lt;p&gt;To migrate the mountpoints to the new method, simply use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb upgrade-bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which basically exports &lt;code&gt;system/elektra/mountpoints&lt;/code&gt;, then does &lt;code&gt;kdb rm
-r system/elektra/mountpoints&lt;/code&gt; so that &lt;code&gt;default.ecf&lt;/code&gt; will be without an
mountpoint and thus the compatibility mode does not apply anymore. As
last step it will import again what it exported before.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/decisions/bootstrap.md&quot;&gt;Details are here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Plugins&lt;/h2&gt;

&lt;p&gt;We already highlighted the new &lt;code&gt;spec&lt;/code&gt; plugin, but also other plugins
were improved at many places.  Small other changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conditionals now also support &lt;code&gt;assign/condition&lt;/code&gt; syntax,
thanks to Thomas Waser&lt;/li&gt;
&lt;li&gt;Lua and Python are not tagged experimental anymore.
They now correctly add their configuration to the open-call.&lt;/li&gt;
&lt;li&gt;The plugin &lt;code&gt;yajl&lt;/code&gt; (the json parser and generator) now also accepts the
type &lt;code&gt;string&lt;/code&gt; and yields better warnings on wrong types.&lt;/li&gt;
&lt;li&gt;Improved error message in the &lt;code&gt;type&lt;/code&gt; plugin.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Larger changes were done in the following plugins:&lt;/p&gt;

&lt;h3&gt;INI&lt;/h3&gt;

&lt;p&gt;The INI plugin was rewritten and a huge effort was taken so that it
fully-roundtrips and additionally preserves all comments and ordering.
Currently, it is brand new. It is planned that it will replace &lt;code&gt;dump&lt;/code&gt;
in the future.&lt;/p&gt;

&lt;p&gt;Currently is has some minor problems when used as KDB_DEFAULT_STORAGE.
You can avoid most problems by mounting a different file into root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount root.ini /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/plugins/ini&quot;&gt;here about the details&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A huge thanks to Thomas Waser.&lt;/p&gt;

&lt;h3&gt;Rename&lt;/h3&gt;

&lt;p&gt;Thanks to Thomas Waser &lt;code&gt;rename&lt;/code&gt; is now fixed for cascading keys.
Additionally, it does not change the &lt;code&gt;sync&lt;/code&gt; status of the keys so
that notification plugins work properly afterwards.&lt;/p&gt;

&lt;h3&gt;Crypto&lt;/h3&gt;

&lt;p&gt;The crypto plugin is a facility for securing sensitive Keys by symmetric
encryption of the value. It acts as a filter plugin and it will only
operate on Keys, which have the metakey „crypto/encrypt“ set.&lt;/p&gt;

&lt;p&gt;The key derivation is still work-in-progress, so the plugin does not
work with kdb yet. A planned method for key derivation is to utilize
the gpg-agent.&lt;/p&gt;

&lt;p&gt;For now the plugin requires the following Keys within the plugin
configuration in order to work properly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;/crypto/key - the cryptographic key (binary 256 bit long)&lt;/li&gt;
&lt;li&gt;/crypto/iv  - the initialization vector (binary 128 bit long)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Please note that this method of key input is for testing purposes only
and should never be used in a productive environment!&lt;/p&gt;

&lt;p&gt;Thanks to Peter Nirschl, especially the patience for also supporting
different platforms where dependencies need to be handled differently.&lt;/p&gt;

&lt;h2&gt;KDB&lt;/h2&gt;

&lt;p&gt;A technical preview of a new tool was added: &lt;code&gt;kdb editor&lt;/code&gt; allows you
to edit any part of Elektra&amp;rsquo;s configuration with any editor and any
syntax. It uses 3-way merging and other stable technology, but it
currently does not provides a way to abort editing. So you only should
use it with care.&lt;/p&gt;

&lt;p&gt;The tool &lt;code&gt;kdb list&lt;/code&gt; now searches in the rpath for libraries and thus
will also find plugins not present at compile time (using &lt;code&gt;glob&lt;/code&gt;).
Additionally, it sorts the plugins by &lt;code&gt;infos/status&lt;/code&gt; score, which can
also be printed with &lt;code&gt;-v&lt;/code&gt;. The last plugins printed are the ones ranked
highest.&lt;/p&gt;

&lt;p&gt;When running as root, &lt;code&gt;kdb&lt;/code&gt; will now use the &lt;code&gt;system&lt;/code&gt; namespace when
writing configuration to cascading key names.&lt;/p&gt;

&lt;p&gt;Long paths are cumbersome to enter in the CLI.  Thus one can define
bookmarks now. Bookmarks are key-names that start with &lt;code&gt;+&lt;/code&gt;.  They are
only recognized by the &lt;code&gt;kdb&lt;/code&gt; tool or tools that explicitly have support
for it. Applications should not depend on the presence of a bookmark. For
example, if you set the bookmark kdb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set user/sw/elektra/kdb/#0/current/bookmarks
kdb set user/sw/elektra/kdb/#0/current/bookmarks/kdb user/sw/elektra/kdb/#0/current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are able to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb ls +kdb/bookmarks
kdb set +kdb/format ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The kdb tool got much more robust when the initial configuration is broken,
no man page viewer is present or Elektra was installed wrongly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--help&lt;/code&gt; usage is unified and improved.&lt;/p&gt;

&lt;p&gt;The new keyname naming conventions are now used for
configuration of the &lt;code&gt;kdb&lt;/code&gt;-tool itself: &lt;code&gt;/sw/elektra/kdb/#0/%/&lt;/code&gt;
and &lt;code&gt;/sw/elektra/kdb/#0/current/&lt;/code&gt; are additionally read.  The option
&lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--profile&lt;/code&gt; is now supported for every command, it allows to fetch
configuration from &lt;code&gt;/sw/elektra/kdb/#0/&amp;lt;profile&amp;gt;/&lt;/code&gt; instead of &lt;code&gt;current&lt;/code&gt;.
KDB is more robust when it cannot fetch its own configuration due to
KDB errors.&lt;/p&gt;

&lt;h2&gt;Coding Guidelines&lt;/h2&gt;

&lt;p&gt;Thanks to Kurt Micheli the code guidelines are
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/CODING.md&quot;&gt;now properly documented&lt;/a&gt;.
Thanks to René Schwaiger we also provide a style file for clang-format.&lt;/p&gt;

&lt;p&gt;Furthermore we unified and fixed the source:
- only use @ for doxygen commands
- always use elektra* functions for allocation
- added a file header for every file&lt;/p&gt;

&lt;h2&gt;C++11 migration&lt;/h2&gt;

&lt;p&gt;Since we now only use C++11, we applied &lt;code&gt;clang-modernize&lt;/code&gt; which simplified
many loops and replaced many &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;nullptr&lt;/code&gt;. Additionally, we added
&lt;code&gt;override&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; at many places.&lt;/p&gt;

&lt;p&gt;We removed all places where we had &lt;code&gt;ifdefs&lt;/code&gt; to use &lt;code&gt;auto_ptr&lt;/code&gt; if no
modern smart pointer is available.&lt;/p&gt;

&lt;p&gt;Because of these changes there is no easy way to compile Elektra without
C++11 support, except by avoiding the C++ parts all together.&lt;/p&gt;

&lt;p&gt;The C++ &lt;code&gt;KeySet&lt;/code&gt; now also supports a &lt;code&gt;get&lt;/code&gt; to retrieve whole containers
at once.  By specializing &lt;code&gt;KeySetTypeWrapper&lt;/code&gt; you can support your own
containers.  Currently only &lt;code&gt;map&amp;lt;string, T&amp;gt;&lt;/code&gt; is supported (T is any type
supported by &lt;code&gt;Key::get&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t removed it from your flags already, there is no use
anymore to set &lt;code&gt;ENABLE_CXX11&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Documentation&lt;/h2&gt;

&lt;p&gt;The documentation was improved vastly.  Most thanks to Kurt Micheli who
did a lot of editing and fixed many places throughout the documentation
Also thanks to Michael Zehender who added two paragraphs in the main
README.md.&lt;/p&gt;

&lt;p&gt;Keynames of applications should be called &lt;code&gt;/sw/org/app/#0/current&lt;/code&gt;,
where &lt;code&gt;current&lt;/code&gt; is the default profile (non given). &lt;code&gt;org&lt;/code&gt; and
&lt;code&gt;app&lt;/code&gt; is supposed to not contain &lt;code&gt;/&lt;/code&gt; and be completely lowercase.
Keynames are documented &lt;a href=&quot;/doc/help/elektra-key-names.md&quot;&gt;here&lt;/a&gt;.
&lt;a href=&quot;/doc/tutorials/application-integration.md&quot;&gt;See also here&lt;/a&gt;. The main
reason for long paths is the provided flexibility in the future
(e.g. to use profiles and have a compatible path for new major versions
of configuration). By using bookmarks, users should not be confronted
by it too often.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;many man pages were improved&lt;/li&gt;
&lt;li&gt;many typos were fixed, thanks to Pino Toscano!&lt;/li&gt;
&lt;li&gt;Fix documentation for kdb list, thanks to Christian Berrer&lt;/li&gt;
&lt;li&gt;Compilation variants are explained better,
thanks to Peter Nirschl for pointing out what was missing&lt;/li&gt;
&lt;li&gt;document ronn as dependency, thanks to Michael Zehender&lt;/li&gt;
&lt;li&gt;fix broken links, thanks to Daniel Bugl&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to Kurt Micheli, developers are now warned during compilation on
broken links in Markdown.  The output format is the same as for gcc.
Additionally, the markdown documentation of plugins now get a proper
title in the pdf and html output of doxygen.&lt;/p&gt;

&lt;h2&gt;Qt-Gui 0.0.10&lt;/h2&gt;

&lt;p&gt;Raffael Pancheri again updated qt-gui with many nice improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;update existing nodes in case the config was changed outside the gui&lt;/li&gt;
&lt;li&gt;safely update tree&lt;/li&gt;
&lt;li&gt;add update signal to metadata&lt;/li&gt;
&lt;li&gt;fix crash when closing the GUI&lt;/li&gt;
&lt;li&gt;move Actions in separate file to make main.qml less clustered&lt;/li&gt;
&lt;li&gt;plugins do not output messages at startup&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BackendBuilder&lt;/code&gt; is now used, which automatically takes cares of the correct ordering of plugins&lt;/li&gt;
&lt;li&gt;Qt 5.4 compatibility is still ensured&lt;/li&gt;
&lt;li&gt;C++11 is now used in Qt-Gui, too&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Packaging and Build System&lt;/h2&gt;

&lt;p&gt;Elektra 0.8.14 now in Debian with qt-gui, man pages,
thanks to Pino Toscano
&lt;a href=&quot;https://packages.qa.debian.org/e/elektra/news/20151215T000031Z.html&quot;&gt;read more here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Gustavo Alvarez for updating and splitting the packages on
Arch Linux!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://friends.ccbib.org/harald/supporting/&quot;&gt;Harald Geyer&lt;/a&gt;,
Elektra is now packaged for OpenWRT.  We fixed a number of
cross-compilation issues and now officially support building against musl
libc, with one minor limitation: RPATH works differently on musl so you
need to install all plugins directly in /usr/lib/ or set LD_LIBRARY_PATH.
Report any bugs in
&lt;a href=&quot;https://github.com/haraldg/packages&quot;&gt;Harald&amp;rsquo;s OpenWRT packaging issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;export errors/symbols are now called &lt;code&gt;elektra-export-symbols&lt;/code&gt; and
&lt;code&gt;elektra-export-symbols&lt;/code&gt; and can be installed using &lt;code&gt;INSTALL_BUILD_TOOLS&lt;/code&gt;
(by default off).  This is needed for cross-compilation.
Thanks to Harald Geyer for reporting.&lt;/li&gt;
&lt;li&gt;some header files are renamed because they endlessly included themselves
if the header files were found in wrong order.
Thanks to Harald Geyer for reporting.&lt;/li&gt;
&lt;li&gt;fixed compilation when built on more than 20 cores with &gt;= -j15,
thanks to Gustavo Alvarez for reporting and Manuel Mausz for analyzing&lt;/li&gt;
&lt;li&gt;lua 5.1 now works too (except for iterators),
thanks to Harald Geyer for reporting.
thanks to Manuel Mausz for adding a new FindLua.cmake&lt;/li&gt;
&lt;li&gt;pdf builds do not fail due to half written files,
reported by René Schwaiger and fixed by Kurt Micheli&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Read about &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra#packages&quot;&gt;other packages here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Fixes and Improvements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;3 way merge now properly deals with binary data,
thanks to Felix Berlakovich&lt;/li&gt;
&lt;li&gt;getenv: fix wrapping on powerpc, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;markdownlinkconverter: fix char/int mismatch, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;wresolver: use KDB_MAX_PATH_LENGTH instead of PATH_MAX,
thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;Cleaning up #ifdefs that break statements, thanks to Romero Malaquias&lt;/li&gt;
&lt;li&gt;Daniel Bugl tested the INI plugin&lt;/li&gt;
&lt;li&gt;cmake list_filter was broken because of different behaviour in
cmake_parse_arguments, thanks to Christian Berrer for reporting&lt;/li&gt;
&lt;li&gt;g++5.3 is now supported&lt;/li&gt;
&lt;li&gt;gtest does not link against pthread if not needed&lt;/li&gt;
&lt;li&gt;testcases that are built with BUILD_SHARED also successfully work&lt;/li&gt;
&lt;li&gt;kdb list works when libs are in same path as plugins,
thanks to Harald Geyer for reporting&lt;/li&gt;
&lt;li&gt;fix Mac OS issues,
thanks to Peter Nirschl, René Schwaiger and Mihael Pranjic&lt;/li&gt;
&lt;li&gt;fix resolver-baseflag docu, thanks to Harald Geyer for reporting&lt;/li&gt;
&lt;li&gt;do not create wrong directories called &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; in source,
thanks to René Schwaiger&lt;/li&gt;
&lt;li&gt;fix cmake for systems where iconv is not part of libc,
thanks to Michael Zehender and Peter Kümmel (for FindIconv.cmake)&lt;/li&gt;
&lt;li&gt;fix segfault in libgetenv if root keys are present&lt;/li&gt;
&lt;li&gt;lua: fix Key:tostring(), thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;add list of &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/bindings&quot;&gt;supported bindings&lt;/a&gt;,
thanks to Manuel Mausz&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.15.tar.gz&quot;&gt;here&lt;/a&gt;
and now also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.15.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.15.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2338297&lt;/li&gt;
&lt;li&gt;md5sum: 33ec1e5982fb7fbd8893bf7b579b80f0&lt;/li&gt;
&lt;li&gt;sha1: 6b1fdd5aa5aaad6ba377b4bb5ef437e0c85319ff&lt;/li&gt;
&lt;li&gt;sha256: 6a406986cecb8d4a44485ced118ee803bc039b0824b72298e123b4dd47eb0b22&lt;/li&gt;
&lt;li&gt;sha512: 86a408dd546b33e3b437f92f415de7aee6a235189f9eab0762b3f44ab4c453ee369a53de10a9f5b0df1b446460b12c57c6b8b77c282648ec2a49f2328d9af13d&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.15.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.15/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by mail elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/1ab4a560-c286-46d2-a058-1a8e7e208fe8.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 16 Feb 2016 17:47:00 +0100</pubDate>
<link>http://www.libelektra.org/news/1ab4a560-c286-46d2-a058-1a8e7e208fe8.html</link>
</item>
<item>
<title>Qt-gui 0.0.9</title>
<guid isPermaLink="false">519cbfac-6db5-4594-8a38-dec4c84b134f</guid>
<description>
&lt;h1&gt;0.8.14 Release&lt;/h1&gt;

&lt;p&gt;Again we managed to release with many new features and plugins (lua, enum,
list, crypto, csvstorage, conditionals, mathcheck, filecheck, logchange)
many fixes, and especially with a vastly improved polished documentation.&lt;/p&gt;

&lt;h2&gt;Documentation Initiative&lt;/h2&gt;

&lt;p&gt;The Documentation Initiative is a huge success and now the documentation
of Elektra is in a state where someone (preferable a linux guru),
never heard of Elektra, still can use Elektra only by reading man pages.&lt;/p&gt;

&lt;p&gt;There are now many ways to show a man page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://libelektra.org/blob/master/doc/help/kdb.md&quot;&gt;on github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://doc.libelektra.org/api/latest/html/md_doc_help_kdb.html&quot;&gt;in the API docu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;by using &lt;code&gt;kdb --help&lt;/code&gt; or &lt;code&gt;kdb help &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;by using &lt;code&gt;man kdb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Help system&lt;/h3&gt;

&lt;p&gt;Ian Donnelly wrote man pages for all the tools delivered with Elektra.
Additionally, nearly all README.md are now also converted to man pages
and also to Doxygen.&lt;/p&gt;

&lt;h3&gt;Doxygen Filter&lt;/h3&gt;

&lt;p&gt;Kurt Micheli did an amazing work with a new doxygen filter.
The filter allows all Elektra markdown pages to be also included
in the doxygen documentation. Thus all technical concepts are now
explained in Markdown pages, this filter is essential.&lt;/p&gt;

&lt;p&gt;But even more, the filter also includes all man pages written
for the tools, giving a nice html view for them. (In addition to
the markdown rendering on github).&lt;/p&gt;

&lt;p&gt;Enjoy the &lt;a href=&quot;http://doc.libelektra.org/api/0.8.14/html/&quot;&gt;result&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A big thanks to Kurt Micheli!&lt;/p&gt;

&lt;h3&gt;Further Docu fixes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;getenv debugging docu was improved&lt;/li&gt;
&lt;li&gt;typo fix: Specify, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://libelektra.org/blob/master/doc/decisions&quot;&gt;Design decisions&lt;/a&gt;
Definition of Bool, capabilities and
Publish Subscribe (thanks to Daniel Bugl)&lt;/li&gt;
&lt;li&gt;Improve iconv docu&lt;/li&gt;
&lt;li&gt;usage examples for many plugins&lt;/li&gt;
&lt;li&gt;improve README for line plugin (thanks to Ian Donnelly)&lt;/li&gt;
&lt;li&gt;add docu about dependencies for some plugins (thanks to Ian Donnelly)&lt;/li&gt;
&lt;li&gt;create many new links within the documentation&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Simplicity&lt;/h2&gt;

&lt;p&gt;We shifted our &lt;a href=&quot;http://git.libelektra.org/blob/master/doc/GOALS.md&quot;&gt;goals&lt;/a&gt;
a bit: We want to prefer simplicity to flexibility.  Not because we
do no like flexibility, but because we think we achieved enough of it.
Currently (and in future) you can use Elektra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;obviously as primitive key/value storage&lt;/li&gt;
&lt;li&gt;with specifications and dozens of plugins driven by it&lt;/li&gt;
&lt;li&gt;with code generation&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But we cut flexibility regarding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;namespaces are only useful for configuration (not for arbitrary key/value)&lt;/li&gt;
&lt;li&gt;the semantics of &lt;a href=&quot;http://git.libelektra.org/blob/master/doc/METADATA.ini&quot;&gt;metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mounting functionality&lt;/li&gt;
&lt;li&gt;error code meanings are fixed, if a resolver detects a conflict, our defined
error must be used&lt;/li&gt;
&lt;li&gt;of course ABI, API&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Qt-gui 0.0.9&lt;/h1&gt;

&lt;p&gt;Raffael Pancheri again updated his qt-gui to version 0.0.9 (beta)
with important of fixes and improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fixes for Qt 5.5&lt;/li&gt;
&lt;li&gt;Handling of merge-conflicts improved&lt;/li&gt;
&lt;li&gt;Avoid rewriting on merge-conflicts&lt;/li&gt;
&lt;li&gt;Allow QML to destroy C++ owned model&lt;/li&gt;
&lt;li&gt;Dialog at startup&lt;/li&gt;
&lt;li&gt;Reduce memory footprint&lt;/li&gt;
&lt;li&gt;add man page&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A bit thanks to Raffael Pancheri!&lt;/p&gt;

&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the API and API is fully forward-compatible, i.e. programs
compiled against an older 0.8 versions of Elektra will continue to work.&lt;/p&gt;

&lt;p&gt;The behaviour of some plugins, however, changed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the INI plugin, the section handling was improved.&lt;/li&gt;
&lt;li&gt;in the NI plugin, the symbol Ni_GetVersion vanished&lt;/li&gt;
&lt;li&gt;in the resolver plugin files of other namespaces which are not
mounted are not resolved anymore&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Build System&lt;/h3&gt;

&lt;p&gt;ENABLE_CXX11 does not exist anymore, it is always on.
We do not care about 199711L compilers anymore, which
makes development easier, without losing any actually
used platform.&lt;/p&gt;

&lt;p&gt;Some programs that are only used in-source are not installed
anymore. (by Pino Toscano)&lt;/p&gt;

&lt;p&gt;Python and Lua plugins are enabled now in &lt;code&gt;-DPLUGINS=ALL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Python3 plugin was renamed to python.&lt;/p&gt;

&lt;h2&gt;Lua Plugin&lt;/h2&gt;

&lt;p&gt;Manuel Mausz add a lightweight alternative to the python plugin:
&lt;a href=&quot;http://libelektra.org/blob/master/src/plugins/lua/&quot;&gt;the lua plugin&lt;/a&gt;.
In a similar way, someone can write scripts, which are executed on every
access to the
&lt;a href=&quot;http://libelektra.org/blob/master/doc/help/elektra-glossary.md&quot;&gt;key database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To mount a lua based filter, you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount file.ini /lua ini lua script=/path/to/lua/lua_filter.lua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though it works well, it is classified as technical preview.&lt;/p&gt;

&lt;p&gt;Thanks to Manuel Mausz for this plugin!&lt;/p&gt;

&lt;h2&gt;Cryptography Plugin&lt;/h2&gt;

&lt;p&gt;In this technical preview, Peter Nirschl
&lt;a href=&quot;http://libelektra.org/blob/master/src/plugins/crypto/&quot;&gt;demonstrates how a plugin&lt;/a&gt;
can encrypt Elektra&amp;rsquo;s values. In testcases it is already able to do so,
but for the end user an easy way for key derivation is missing.&lt;/p&gt;

&lt;p&gt;A big thanks to Peter Nirschl!&lt;/p&gt;

&lt;h2&gt;INI Plugin&lt;/h2&gt;

&lt;p&gt;The INI plugin got a near rewrite. Now it handles many situations better,
has many more options and features, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;preserving the order&lt;/li&gt;
&lt;li&gt;using keys as metadata&lt;/li&gt;
&lt;li&gt;many new testcases&lt;/li&gt;
&lt;li&gt;fix escaping&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to Thomas Waser for this work!&lt;/p&gt;

&lt;h2&gt;Mathcheck plugin&lt;/h2&gt;

&lt;p&gt;This plugin allows you to check and even calculate keys from
other keys using an polish prefix notation.
It supports the typical operations &lt;code&gt;+ - / *&lt;/code&gt; and
&lt;code&gt;&amp;lt;, &amp;lt;=, ==, !=, =&amp;gt;, &amp;gt;, :=&lt;/code&gt;. To mount, check and
calculate values, one would use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount mathcheck.dump /example/mathcheck dump mathcheck
kdb setmeta user/example/mathcheck/k check/math &quot;== + a b&quot;
kdb setmeta user/example/mathcheck/k check/math &quot;:= + a b&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For details &lt;a href=&quot;http://libelektra.org/blob/master/src/plugins/mathcheck/&quot;&gt;see the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser for this important plugin!&lt;/p&gt;

&lt;h2&gt;List Plugin&lt;/h2&gt;

&lt;p&gt;Currently, Elektra has some limitations on how many plugins can be
added to certain
&lt;a href=&quot;http://libelektra.org/blob/master/doc/help/elektra-plugins-ordering.md&quot;&gt;placement&lt;/a&gt;.
Because of the rapidly growing number of plugins, some combinations
are not possible anymore.&lt;/p&gt;

&lt;p&gt;This plugin tackles the issue, by delegating the work to an arbitrary
number of subplugins. As a bonus, it works lazily and thus might avoid
the loading of some plugins all together.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser for this plugin!&lt;/p&gt;

&lt;h2&gt;Conditionals&lt;/h2&gt;

&lt;p&gt;Brings &lt;code&gt;if&lt;/code&gt; inside Elektra. It lets you check if some keys have
the values they should have.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount conditionals.dump /tmount/conditionals conditionals dump
kdb set user/tmount/conditionals/fkey 3.0
kdb set user/tmount/conditionals/hkey hello
kdb setmeta user/tmount/conditionals/key check/condition &quot;(hkey == 'hello') ? (fkey == '3.0')&quot; # success
kdb setmeta user/tmount/conditionals/key check/condition &quot;(hkey == 'hello') ? (fkey == '5.0')&quot; # fail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For details &lt;a href=&quot;http://libelektra.org/blob/master/src/plugins/conditionals/&quot;&gt;see the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Again, thanks to Thomas Waser for this plugin!&lt;/p&gt;

&lt;h2&gt;Csvstorage Plugin&lt;/h2&gt;

&lt;p&gt;You can now mount csv-files. To mount &lt;code&gt;test.csv&lt;/code&gt; simply use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount test.csv /csv csvstorage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many options, e.g. changing the delimiter, use header
for the key names or predefine how the columns should be named.
For details &lt;a href=&quot;http://libelektra.org/blob/master/src/plugins/csvstorage/&quot;&gt;see the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h2&gt;Filecheck plugin&lt;/h2&gt;

&lt;p&gt;This plugin lets you validate lineendings, encodings, null, bom and
unprintable characters.&lt;/p&gt;

&lt;p&gt;The also new plugin lineendings is already superseded by the filecheck
plugin.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h2&gt;Enum plugin&lt;/h2&gt;

&lt;p&gt;The Enum plugin checks string values of Keys by comparing it against a
list of valid values.&lt;/p&gt;

&lt;p&gt;Thanks to Thomas Waser!&lt;/p&gt;

&lt;h2&gt;Elektrify Machinekit.io&lt;/h2&gt;

&lt;p&gt;We are proud that &lt;a href=&quot;http://www.machinekit.io/&quot;&gt;Machinekit&lt;/a&gt; starts using
Elektra.&lt;/p&gt;

&lt;p&gt;Alexander Rössler is digging into all details, and already enhanced
the DBUS Plugin for their needs. DBus now can emit a message for every
changed key.&lt;/p&gt;

&lt;p&gt;A big thanks to Alexander Rössler!&lt;/p&gt;

&lt;h2&gt;Bugfixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;libgetenv did not reinitalized its mutexes on forks&lt;/li&gt;
&lt;li&gt;add needSync also in C++ binding&lt;/li&gt;
&lt;li&gt;handle removed current working directories (fallback to /)&lt;/li&gt;
&lt;li&gt;avoid segfault on missing version keys (when doing &lt;code&gt;kdb rm system/elektra/version&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;fix glob plugin + kdb mount with
&lt;a href=&quot;http://libelektra.org/blob/master/doc/help/elektra-contracts.md&quot;&gt;config/needs usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix different handling of strerror_r in Mac OS X (thanks to Daniel Bugl)&lt;/li&gt;
&lt;li&gt;do not change the users parentKey in early-error scenarios&lt;/li&gt;
&lt;li&gt;do not try to interpret some binary keys as function keys&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Other Gems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;getenv example: do not link to elektra/elektratools,
thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;fixes in other examples&lt;/li&gt;
&lt;li&gt;avoid useless UTF-8 chars and fix typos, thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;fix kdb check return code (open fail)&lt;/li&gt;
&lt;li&gt;pdf now also allows UTF-8 characters if added to
elektraSpecialCharacters.sty, thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;libgetenv: lookup also used for layers&lt;/li&gt;
&lt;li&gt;handle wrong arguments of metals better, thanks to Ian Donnelly&lt;/li&gt;
&lt;li&gt;Improvement of error messages in the augeas plugin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb set&lt;/code&gt; avoids fetching unnecessary namespaces&lt;/li&gt;
&lt;li&gt;verbose unmount&lt;/li&gt;
&lt;li&gt;logchange: small demonstration plugin to show how to log added,
removed and changed keys&lt;/li&gt;
&lt;li&gt;setmeta will use spec as default&lt;/li&gt;
&lt;li&gt;libtools: avoid useless getName, add verbosity flag for findBackend&lt;/li&gt;
&lt;li&gt;Improve iconv error messages&lt;/li&gt;
&lt;li&gt;That mount needs permissions to /etc should now really be obvious
with new error message&lt;/li&gt;
&lt;li&gt;many fixes in the template for new plugins&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.14.tar.gz&quot;&gt;here&lt;/a&gt;
and now also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.14.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.14.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2252008&lt;/li&gt;
&lt;li&gt;md5sum: a87cd3845e590bf413959dfd555e3704&lt;/li&gt;
&lt;li&gt;sha1: 2360603c347ae3f3a28e827eb9260ff0b9881e46&lt;/li&gt;
&lt;li&gt;sha256: af681a38c9c2921b8d249f98ab851c3d51371735471d8a1f833a224c4446fe2e&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.14.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.14/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by mail elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/519cbfac-6db5-4594-8a38-dec4c84b134f.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Btw. the whole release happened with
&lt;a href=&quot;http://libelektra.org/blob/master/src/libs/getenv/README.md&quot;&gt;elektrify-getenv&lt;/a&gt;
enabled.&lt;/p&gt;
</description>
<pubDate>Thu, 19 Nov 2015 17:48:14 +0100</pubDate>
<link>http://www.libelektra.org/news/519cbfac-6db5-4594-8a38-dec4c84b134f.html</link>
</item>
<item>
<title>0.8.13 Release</title>
<guid isPermaLink="false">3c00a5f1-c017-4555-92b5-a2cf6e0803e3</guid>
<description>
&lt;h1&gt;0.8.13 Release&lt;/h1&gt;

&lt;p&gt;Again we managed to release with many new features, many fixes
and also other improvements.&lt;/p&gt;

&lt;h2&gt;Elektrify-getenv&lt;/h2&gt;

&lt;p&gt;getenv(3) is one of the most popular ways to retrieve configuration,
even though it has many known problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no standard way to modify it&lt;/li&gt;
&lt;li&gt;relogin (or restart of shell) necessary&lt;/li&gt;
&lt;li&gt;names are flat (no hierarchical structure)&lt;/li&gt;
&lt;li&gt;cannot be set for individual applications&lt;/li&gt;
&lt;li&gt;different in at, cron and similar scripts&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With elektrify-getenv we wrote a solution which solves most of the
problems. We use the LD_PRELOAD technique to &lt;em&gt;additionally&lt;/em&gt; retrieve
values from Elektra, and not only the environment.&lt;/p&gt;

&lt;p&gt;You simply can do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;kdb set user/env/override/HTTP_PROXY &quot;http://my.proxy:8080&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will set the &lt;code&gt;HTTP_PROXY&lt;/code&gt; environment variable to &lt;code&gt;http://my.proxy:8080&lt;/code&gt;.
Configuration can be retrieved with &lt;code&gt;kdb get&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;kdb get user/env/override/HTTP_PROXY
lynx   # or start another www-browser with the newly set HTTP_PROXY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or using the man pages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb elektrify-getenv man man --elektra:MANWIDTH=40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will use MANWIDTH 40 for this invocation of man man.
This feature is handy, if an option is only available
by environment, but not by command-line arguments,
because sometimes environment variables are not trivial
to set (e.g. in Makefiles).&lt;/p&gt;

&lt;p&gt;Some more examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set user/env/override/MANOPT -- &quot;--regex -LC&quot;
kdb elektrify-getenv getenv MANOPT   # to check if it is set as expected
kdb getenv MANOPT   # if /etc/ld.so.preload is active
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So is this the final solution for configuration and manual elektrification
of applications is not needed anymore?&lt;/p&gt;

&lt;p&gt;The answer is: no and yes.&lt;/p&gt;

&lt;p&gt;It is quite satisfactory for configuration that is inherently sharable
(not different from one application to another) &lt;em&gt;and&lt;/em&gt; needs the environment
semantics, i.e. some subprocesses should have different configuration
than others, e.g. in a specific terminal.&lt;/p&gt;

&lt;p&gt;But it might not be a good solution for your own application, because
libgetenv(3) implies many architectural decision, that other elektrified
applications would decide differently, e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it uses global variables (getenv(3) has no handle)&lt;/li&gt;
&lt;li&gt;it uses mutex for multi-threading safety&lt;/li&gt;
&lt;li&gt;the API getenv(3) only returns &lt;code&gt;char*&lt;/code&gt; and has no support for other data types&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more information see &lt;a href=&quot;http://git.libelektra.org/blob/master/src/libs/getenv/README.md&quot;&gt;src/libgetenv/README.md&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the API and API is fully forward-compatible, i.e. programs compiled against an
older 0.8 versions of Elektra will continue to work.&lt;/p&gt;

&lt;p&gt;Because &lt;code&gt;keyUnescapedName&lt;/code&gt; and &lt;code&gt;keyGetUnescapedNameSize&lt;/code&gt; is added in this release, it is not backward-compatible,
i.e. programs compiled against 0.8.13, might &lt;em&gt;not&lt;/em&gt; work with older 0.8 libraries.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;keyUnescapedName&lt;/code&gt; provides access to an unescaped name, i.e. one where &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt; are
literal symbols and do not have any special meaning. &lt;code&gt;NULL&lt;/code&gt; characters are used as path separators.
This function makes it trivial and efficient to iterate over all path names, as already exploited
in all bindings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git.libelektra.org/blob/master/src/bindings/jna/HelloElektra.java&quot;&gt;jna (java)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.libelektra.org/blob/master/src/bindings/swig/lua/tests/test_key.lua&quot;&gt;lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.libelektra.org/blob/master/src/bindings/swig/python2/tests/testpy2_key.py&quot;&gt;python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.libelektra.org/blob/master/src/bindings/swig/python/tests/test_key.py&quot;&gt;python3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other small changes/additions in bindings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix key constructor, thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;add copy and deepcopy in python (+examples,+testcases), thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;dup() in python3 returned wrong type (SWIG wrapper), thanks to Toscano Pino for reporting, thanks to Manuel Mausz for fixing it&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Doxygen 1.8.8 is preferred and the configfile was updated to this version.&lt;/p&gt;

&lt;p&gt;The symbols of nickel (for the ni plugin) do not longer leak from the Elektra library.
As such, old versions of testmod_ni won&amp;rsquo;t work with Elektra 0.8.13.
A version-script is now in use to only export following symbols:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kdb*&lt;/li&gt;
&lt;li&gt;key*&lt;/li&gt;
&lt;li&gt;ks*&lt;/li&gt;
&lt;li&gt;libelektra* for module loading system&lt;/li&gt;
&lt;li&gt;elektra* for proposed and other functions (no ABI/API compatibility here!)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In this release, ENABLE_CXX11 was changed to &lt;code&gt;ON&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;Note that in the next release 0.8.14 there will be two changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;According to &lt;a href=&quot;http://git.libelektra.org/issues/262&quot;&gt;issue #262&lt;/a&gt;, we plan to remove the option ENABLE_CXX11
and require the compiler to be C++11 compatible.
If you have any system you are not able to build Elektra with -DENABLE_CXX11=ON (which is
the default for 0.8.13) please report that immediately.&lt;/li&gt;
&lt;li&gt;the python3 bindings will be renamed to python&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By not having to care for pre-C++11 compilers, we hope to attract more developers.
The core part is still in C99 so that Elektra can be used on systems where libc++ is not available.
Many new plugins are still written in C99, also with the purpose of not depending on C++.&lt;/p&gt;

&lt;h2&gt;Python Plugins&lt;/h2&gt;

&lt;p&gt;A technical preview of &lt;a href=&quot;http://git.libelektra.org/blob/master/src/plugins/python&quot;&gt;python3&lt;/a&gt;
and &lt;a href=&quot;http://git.libelektra.org/blob/master/src/plugins/python2&quot;&gt;python2&lt;/a&gt; plugins has been added.&lt;/p&gt;

&lt;p&gt;With them its possible to write any plugin with python scripts.&lt;/p&gt;

&lt;p&gt;Note, they are a technical preview. They might have severe bugs
and the API might change in the future.
Nevertheless, it is already possible to, e.g. develop storage plugins
with it.&lt;/p&gt;

&lt;p&gt;They are not included in &lt;code&gt;ALL&lt;/code&gt; plugins.  To use it, you have to specify it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-PLUGINS=&quot;ALL;python;python2&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Manuel Mausz for to this work on the plugins and the patience in all
the last minute fixes!&lt;/p&gt;

&lt;h2&gt;Qt-gui 0.0.8&lt;/h2&gt;

&lt;p&gt;The GUI was improved and the most annoying bugs are fixed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only reload and write config files if something has changed&lt;/li&gt;
&lt;li&gt;use merging in a way that only a conflict free merge will be written, thanks to Felix Berlakovich&lt;/li&gt;
&lt;li&gt;made sure keys can only be renamed if the new name/value/metadata is different from the existing ones&lt;/li&gt;
&lt;li&gt;fixed 1) and 2) of #233&lt;/li&gt;
&lt;li&gt;fixed #235&lt;/li&gt;
&lt;li&gt;fixed qml warning when deleting key&lt;/li&gt;
&lt;li&gt;fixed qml typerror when accepting an edit&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A big thanks to Raffael Pancheri!&lt;/p&gt;

&lt;h2&gt;KDB Tool&lt;/h2&gt;

&lt;p&gt;The commandline tool &lt;code&gt;kdb&lt;/code&gt; also got some improvements.
Most noteworthy is that &lt;code&gt;kdb get -v&lt;/code&gt; now gives a complete trace for
every key that was tried. This is very handy if you have a complex
specification with many fallback and override links.&lt;/p&gt;

&lt;p&gt;It also shows default values and warnings in the case of context-oriented
features.&lt;/p&gt;

&lt;p&gt;Furthermore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;-v&lt;/code&gt; for setmeta&lt;/li&gt;
&lt;li&gt;Copy will warn when it won&amp;rsquo;t overwrite another key (behaviour did not change)&lt;/li&gt;
&lt;li&gt;improve help text, thanks to Ian Donnelly&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Documentation Initiative&lt;/h2&gt;

&lt;p&gt;As Michael Haberler from &lt;a href=&quot;http://www.machinekit.io/&quot;&gt;machinekit&lt;/a&gt; pointed out it was certainly not easy for someone
to get started with Elektra. With the documentation initiative we are going to change that.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The discussion in &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;github issues&lt;/a&gt; should clarify many things&lt;/li&gt;
&lt;li&gt;We start writing man pages in ronn-format(7), thanks to Ian Donnelly for current work&lt;/li&gt;
&lt;li&gt;Kurt Micheli is woring on improved doxygen docu + pdf generation&lt;/li&gt;
&lt;li&gt;Daniel Bugl already restructed the main page&lt;/li&gt;
&lt;li&gt;Daniel Bugl also improved formatting&lt;/li&gt;
&lt;li&gt;doc: use @retval more, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;doxygen: fix template to use &lt;code&gt;@&lt;/code&gt; and not &lt;code&gt;\\&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;SVG logo is preferred, thanks to Daniel Bugl&lt;/li&gt;
&lt;li&gt;doc: use @retval more, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;many typo fixes, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;fix broken links, thanks to Manuel Mausz, Daniel Bugl and Michael Haberler&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any further help is very welcome! This call is especially addressed to beginners in Elektra because
they obviously know best which documentation is lacking and what they would need.&lt;/p&gt;

&lt;h2&gt;Portability&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kdb-full&lt;/code&gt; and &lt;code&gt;kdb-static&lt;/code&gt; work fine now for Windows 64bit, thanks to Manuel Mausz.
The wresolver is now more relaxed with unset environment.&lt;/p&gt;

&lt;p&gt;All issues for Mac OS X were resolved. With the exception of elektrify-getenv
everything should work now, thanks to Mihael Pranjic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix mktemp&lt;/li&gt;
&lt;li&gt;testscripts&lt;/li&gt;
&lt;li&gt;recursive mutex simplification&lt;/li&gt;
&lt;li&gt;clearenv ifdef&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;and thanks to Daniel Bugl:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RPATH fixed, so that &lt;code&gt;kdb&lt;/code&gt; works&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;furthermore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix &lt;code&gt;__FUNCTION__&lt;/code&gt; to &lt;code&gt;__func__&lt;/code&gt; (C99), thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;avoid compilation error when JNI_VERSION_1_8 is missing&lt;/li&gt;
&lt;li&gt;fix (twice, because of an accidental revert) the TARGET_CMAKE_FOLDER, thanks to Pino Toscano&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks to Manuel Mausz for to testing and improving portability!&lt;/p&gt;

&lt;h2&gt;Packaging and Build System&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://packages.qa.debian.org/e/elektra/news/20150726T155000Z.html&quot;&gt;0.8.12 packaged+migrated to testing&lt;/a&gt;, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;fix build with external gtest, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;switch from FindElektra.cmake to ElektraConfig.cmake, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;cmake_parse_arguments&lt;/code&gt; instead of &lt;code&gt;parse_arguments&lt;/code&gt;, thanks to Manuel Mausz&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Further Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Key::release() will also work when Key holds a null-pointer&lt;/li&gt;
&lt;li&gt;Key::getName() avoids std::string exception&lt;/li&gt;
&lt;li&gt;support for copy module was introduced, thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;be more POSIX compatible in shell scripts (&lt;code&gt;type&lt;/code&gt; to &lt;code&gt;command -v&lt;/code&gt; and avoid &lt;code&gt;echo -e&lt;/code&gt;) thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;fix vararg type for KEY_FLAGS, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;fix crash of example, thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;add proper licence file for Modules (COPYING-CMAKE-SCRIPTS), thanks to Pino Toscano&lt;/li&gt;
&lt;li&gt;fix XDG resolver issue when no given path in XDG_CONFIG_DIRS is valid&lt;/li&gt;
&lt;li&gt;make dbus example work again&lt;/li&gt;
&lt;li&gt;fix compiler warnings for gcc and clang&lt;/li&gt;
&lt;li&gt;fix valgrind suppressions&lt;/li&gt;
&lt;li&gt;Installation of GI binding is fixed, thanks to Dāvis&lt;/li&gt;
&lt;li&gt;make uninstall is fixed and docu improved&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Notes&lt;/h2&gt;

&lt;p&gt;There are some misconceptions about Elektra and semi structured data (like XML, JSON).
Elektra is a key/value storage, that internally represents everything with key and values.
Even though, Elektra can use XML and JSON files elegantly, there are limitations what
XML and JSON can represent. XML, e.g., cannot have holes within its structure, while this
is obviously easily possible with key/value. And JSON, e.g., cannot have non-array entries
within an array. This is a more general issue of that configuration files in general
are constrained in what they are able to express. The solution to this problem is
validation, i.e. keys that does not fit in the underlying format are rejected.
Note there is no issue the other way round: special characteristics of configuration
files can always be captured in Elektra&amp;rsquo;s metadata.&lt;/p&gt;

&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.13.tar.gz&quot;&gt;here&lt;/a&gt;
and now also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.13.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.13.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2141758&lt;/li&gt;
&lt;li&gt;md5sum: 6e7640338f440e67aba91bd64b64f613&lt;/li&gt;
&lt;li&gt;sha1: ca58524d78e5d39a540a4db83ad527354524db5e&lt;/li&gt;
&lt;li&gt;sha256: f5c672ef9f7826023a577ca8643d0dcf20c3ad85720f36e39f98fe61ffe74637&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.13.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.13/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by mail elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/3c00a5f1-c017-4555-92b5-a2cf6e0803e3.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;http://libelektra.org&quot;&gt;http://libelektra.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 17 Sep 2015 17:32:16 +0200</pubDate>
<link>http://www.libelektra.org/news/3c00a5f1-c017-4555-92b5-a2cf6e0803e3.html</link>
</item>
<item>
<title>0.8.12 Release</title>
<guid isPermaLink="false">98770541-32a1-486a-98a1-d02f26afc81a</guid>
<description>
&lt;h1&gt;0.8.12 Release&lt;/h1&gt;

&lt;p&gt;Again we managed to release with new features, many build system
fixes and also other improvements.&lt;/p&gt;

&lt;h2&gt;dir namespace&lt;/h2&gt;

&lt;p&gt;This namespace adds per-project or per-directory (hence the name) configurations.
E.g. think how git works: not only /etc and ~ are relevant sources
for configuration but also the nearest .git directory.&lt;/p&gt;

&lt;p&gt;This technique is, however, much more widely useful than just for git
repositories! Nearly every application can benefit from such a per-dir
configuration. Its almost certain that you have already run into the
problem that different projects have different guidelines
(e.g. coding conventions, languages, whitespace requirements, line breaks, ..).
Obviously, thats not a per-user configuration and
its also not a per-file issue (thats how its usually solved today).
So in fact you want, e.g., your editor to have an additional per-project layer
to choose between such settings.&lt;/p&gt;

&lt;p&gt;The technique is useful for nearly every other tool:
- different color palettes in gimp, inkscape,..
- different languages for libreoffice
- different security settings for media players, interpreters (e.g. when in Download folder)
- per-folder .htaccess in apache or other web servers
- any other per-dir configuration you can imagine..&lt;/p&gt;

&lt;p&gt;It is simple to use, also for the administrative side. First, change to the folder to your
folder (e.g. where a project is):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/projects/abc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add some user (or system or spec) configuration to have some default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set user/sw/editor/textwidth 72
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then verify that we get this value back when we do a cascading lookup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb get /sw/editor/textwidth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default configuration file for the dir-namespace is &lt;code&gt;pwd&lt;/code&gt;/KDB_DB_DIR/filename:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb file dir/sw/editor/textwidth
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;KDB_DB_DIR can be modified at compile-time and is &lt;code&gt;.dir&lt;/code&gt; per default&lt;/li&gt;
&lt;li&gt;filename can be modified by mounting, see below, and is &lt;code&gt;default.ecf&lt;/code&gt; by default&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We assume, that the project abc has the policy to use textwidth 120, so
we change the dir-configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set dir/sw/editor/textwidth 120
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will get the value 120 in the folder ~/projects/abc and its
subdirectories (!), but everywhere else we still get 72:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb get /sw/editor/textwidth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, that does not only work with kdb, but with every elektrified tool.&lt;/p&gt;

&lt;h3&gt;mount files in dir namespaces&lt;/h3&gt;

&lt;p&gt;For cascading mountpoints, the dir name is also automatically mounted, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount editor.ini /sw/editor ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But its also possible to only mount for the namespace dir if no cascading mountpoint is
present already:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount app.ini dir/sw/app tcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In both cases keys below dir/sw/editor would be in the INI file
&lt;code&gt;.dir/editor.ini&lt;/code&gt; and not in the file &lt;code&gt;.dir/default.ecf&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;dir together with spec namespace&lt;/h3&gt;

&lt;p&gt;In the project P we had the following issue: We needed on a specific computer the
configuration in /etc to be used in favour of the dir config.&lt;/p&gt;

&lt;p&gt;We could easily solve the problem using the specification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb setmeta spec/sw/P/current/org/base override/#0 /sw/P/override/org/base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence, we could create system/sw/P/override/org/base which would be in favour of dir/sw/P/current/org/base.
So we get system/sw/P/override/org/base when we do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb get /sw/P/current/org/base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, one could also use the specification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb setmeta spec/sw/P/current/org/base namespace/#0 user
kdb setmeta spec/sw/P/current/org/base namespace/#1 system
kdb setmeta spec/sw/P/current/org/base namespace/#2 dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes dir the namespace with the least priority and system would be preferred.
This was less suitable for our purpose, because we needed the override
only on one computer. For all other computers we wanted dir
to be preferred with only one specification.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The great thing is, that every elektrified application, automatically gets all the mentioned features.
Not even a recompilation of the application is necessary.&lt;/p&gt;

&lt;p&gt;Especially the specification provides flexibility not present in other configuration systems.&lt;/p&gt;

&lt;h2&gt;Qt-Gui 0.0.7&lt;/h2&gt;

&lt;p&gt;Raffael Pancheri again did a lot of stabilizing work:
- show errormessage on exception when starting gui
- Correctly update keyAreaView property when selecting item in TreeView
- Fix crash when creating key in MountingWizard
- Remove information on successful export
- Show error dialog on failed import
- Remove namefilters (every syntax can have any file extension)
- other namespaces (including dir) are included&lt;/p&gt;

&lt;p&gt;The GUI can be handy for many purposes, e.g. we use it already as xml and json editor.
Note that there are still &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;some bugs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Other fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;constants now additionally gives information about SPEC and DIR.&lt;/li&gt;
&lt;li&gt;Doku about CMake variables &lt;code&gt;ELEKTRA_DEBUG_BUILD&lt;/code&gt; and &lt;code&gt;ELEKTRA_VERBOSE_BUILD&lt;/code&gt; fixed, thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;Fixed compilation of &lt;code&gt;ELEKTRA_DEBUG_BUILD&lt;/code&gt; and &lt;code&gt;ELEKTRA_VERBOSE_BUILD&lt;/code&gt;, thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;Example with error handling added, thanks to Kurt Micheli&lt;/li&gt;
&lt;li&gt;Add design decision about global plugins&lt;/li&gt;
&lt;li&gt;Split dependencies document to individual README.md, thanks to Ian Donnelly&lt;/li&gt;
&lt;li&gt;Fix nearly all compilation warnings of SWIG, thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;CMake: Fix gtest to be build if &lt;code&gt;BUILD_TESTING&lt;/code&gt; activated, but not &lt;code&gt;ENABLE_TESTING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CMake: Allow compilation without BUILD_STATIC&lt;/li&gt;
&lt;li&gt;Explain compilation options more, thanks to Kai-Uwe Behrmann for asking the question&lt;/li&gt;
&lt;li&gt;CMake: always build examples, allow one to only build documentation&lt;/li&gt;
&lt;li&gt;add common header file for C++ plugins (used by plugins struct and type)&lt;/li&gt;
&lt;li&gt;fix compilation of race tool under oS-11.4 thanks to Kai-Uwe Behrmann&lt;/li&gt;
&lt;li&gt;CMake: find python3 correctly&lt;/li&gt;
&lt;li&gt;CMake: fix BUILD_SHARED_LIBS&lt;/li&gt;
&lt;li&gt;Doxygen: remove &lt;code&gt;HTML_TIMESTAMP&lt;/code&gt; to make build reproduceable&lt;/li&gt;
&lt;li&gt;Doxygen: rewrite of main page+add info about all five namespaces&lt;/li&gt;
&lt;li&gt;CMake: allow one to use qt-gui with qt built with -reduce-relocations&lt;/li&gt;
&lt;li&gt;fix kdb ls, get to list warnings during open&lt;/li&gt;
&lt;li&gt;during kdbOpen() use Configfile: to state phase&lt;/li&gt;
&lt;li&gt;add -f option to kdb check+improve docu&lt;/li&gt;
&lt;li&gt;improve readability of warning output&lt;/li&gt;
&lt;li&gt;run_all always uses dump for backups&lt;/li&gt;
&lt;li&gt;line plugin roundtrips correctly&lt;/li&gt;
&lt;li&gt;untypical resolvers have their non-existant filename handled correctly + sync ignored them correctly&lt;/li&gt;
&lt;li&gt;cmake-3.0 fixes&lt;/li&gt;
&lt;li&gt;cascading merging, a big thanks to Felix Berlakovich for the last minute fix&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;As always, the API and API is fully compatible. Because nothing was added, its even
possible to link against an older version of Elektra (if compiled against 0.8.12).&lt;/p&gt;

&lt;p&gt;In plugins some small changes may effect compatibility:
- in rename the handling of parent key is different (see #206)
- resolving of spec absolute and relative paths are no more handled identical.
  Instead absolute paths will be searched absolutely, while relatives are below KDB_DB_SPEC (as before).
  This behaviour is consistent to the behaviour of the other namespaces.&lt;/p&gt;

&lt;p&gt;These two points are also the only unit tests that fail when Elektra 0.8.12 is used with 0.8.11 unit tests.&lt;/p&gt;

&lt;h2&gt;Build Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;special github command to build bindings &amp;ldquo;jenkins build bindings please&amp;rdquo;, thanks to Manuel Mausz&lt;/li&gt;
&lt;li&gt;open build service update
For &lt;a href=&quot;https://build.opensuse.org/package/show/home:bekun:devel/elektra&quot;&gt;OpenSUSE, CentOS, Fedora, RHEL and SLE&lt;/a&gt;
Kai-Uwe Behrmann kindly provides packages &lt;a href=&quot;http://software.opensuse.org/download.html?project=home%3Abekun%3Adevel&amp;amp;package=libelektra4&quot;&gt;for download&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.12.tar.gz&quot;&gt;here&lt;/a&gt;
and now also &lt;a href=&quot;https://github.com/ElektraInitiative/ftp/tree/master/releases/elektra-0.8.12.tar.gz&quot;&gt;here on github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.12.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2102450&lt;/li&gt;
&lt;li&gt;md5sum: a40a33ae6661ebfa096378f0986ede6c&lt;/li&gt;
&lt;li&gt;sha1: 3594ef58b6e3b0ffa9589d787679b6e739fbb0dd&lt;/li&gt;
&lt;li&gt;sha256: 562432bea9455a61ff6e6b3263078ea9b26bef2ed177a04b5f9b181d605bc021&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.libelektra.org/ftp/elektra/releases/elektra-0.8.12.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.12/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
the issue tracker &lt;a href=&quot;http://git.libelektra.org/issues&quot;&gt;on github&lt;/a&gt;
or by mail elektra@markus-raab.org.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/98770541-32a1-486a-98a1-d02f26afc81a.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see http://libelektra.org&lt;/p&gt;
</description>
<pubDate>Sun, 12 Jul 2015 20:14:09 +0200</pubDate>
<link>http://www.libelektra.org/news/98770541-32a1-486a-98a1-d02f26afc81a.html</link>
</item>
<item>
<title>0.8.11 Release</title>
<guid isPermaLink="false">7d4647d4-4131-411e-9c2a-2aca39446e18</guid>
<description>
&lt;h1&gt;0.8.11 Release&lt;/h1&gt;

&lt;p&gt;From the beginning of the Elektra Initiative, Elektra aimed at avoiding
hard-coded information in the application and to make the application&amp;rsquo;s
configuration more transparent. While avoiding any paths to files was
reality from the first released Elektra version, now also hard-coding
default values, fallback mechanisms and even Elektra&amp;rsquo;s paths to keys
can be avoided.&lt;/p&gt;

&lt;p&gt;How does that work?&lt;/p&gt;

&lt;p&gt;Elektra 0.8.11 introduces a so called specification for the
application&amp;rsquo;s configuration. It is located below its own namespace
&lt;code&gt;spec&lt;/code&gt; (next to user and system).&lt;/p&gt;

&lt;p&gt;Once the base path is known, the user can find out all Elektra
paths used by an application, using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb ls spec/basepath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keys in &lt;code&gt;spec&lt;/code&gt; allow us to specify which keys are read by the application,
which fallback it might have and which is the default value using
metadata. The implementation of these features happened in &lt;code&gt;ksLookup&lt;/code&gt;.
When cascading keys (those starting with &lt;code&gt;/&lt;/code&gt;) are used following features
are now available (in the metadata of respective &lt;code&gt;spec&lt;/code&gt;-keys):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;override/#&lt;/code&gt;: use these keys &lt;em&gt;in favour&lt;/em&gt; of the key itself (note that
  &lt;code&gt;#&lt;/code&gt; is the syntax for arrays, e.g. &lt;code&gt;#0&lt;/code&gt; for the first element,
  &lt;code&gt;#_10&lt;/code&gt; for the 11th and so on)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namespace/#&lt;/code&gt;: instead of using all namespaces in the predefined order,
  one can specify which namespaces should be searched in which order&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fallback/#&lt;/code&gt;: when no key was found in any of the (specified) namespaces
  the &lt;code&gt;fallback&lt;/code&gt;-keys will be searched&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;: this value will be used if nothing else was found&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This technique does not only give you the obvious advantages, but
also provides complete transparency how a program will fetch a configuration
value. In practice that means that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb get &quot;/sw/app/#0/promise&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you the &lt;em&gt;exact same value&lt;/em&gt; as the application uses when it
lookups the key &lt;code&gt;promise&lt;/code&gt;. Many &lt;code&gt;if&lt;/code&gt;s and hardcoded values are avoided,
we simply fetch and lookup the configuration by following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Key *parentKey = keyNew(&quot;/sw/app/#0&quot;, KEY_CASCADING_NAME, KEY_END);
kdbGet(kdb, ks, parentKey);

ksLookupByName(ks, &quot;/sw/app/#0/promise&quot;, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see in that example that only Elektra paths are hardcoded in
the application.  But those can be found out easily, completely without
looking in the source code. The technique is simple: append a
logger plugin and the KDB base path is printed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stdout in the case of the plugin tracer&lt;/li&gt;
&lt;li&gt;syslog in the case of the plugin syslog&lt;/li&gt;
&lt;li&gt;journald in the case of the plugin journald&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What we do not see in the program above are the default values and
fallbacks. They are only present in the so specification (namespace &lt;code&gt;spec&lt;/code&gt;).
Luckily, the specification are key/value pairs, too. So we do not have
to learn something new, e.g. using the ni plugin we can specify:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[promise]
default=20
fallback/#0=/somewhere/else
namespace/#0=user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.) When this file is mounted to &lt;code&gt;spec/sw/app/#0&lt;/code&gt; we specify, that
    for the key &lt;code&gt;/sw/app/#0/promise&lt;/code&gt; only the namespace &lt;code&gt;user&lt;/code&gt; should be
    used.
2.) If this key was not found, but &lt;code&gt;/somewhere/else&lt;/code&gt; is present, we will use
    this key instead.  The &lt;code&gt;fallback&lt;/code&gt; technique is very powerful: it allows
    us to have (recursive) links between applications. In the example above,
    the application is tricked in receiving e.g. the key &lt;code&gt;user/somewhere/else&lt;/code&gt;
    when &lt;code&gt;promise&lt;/code&gt; was not available.
3.) The value &lt;code&gt;20&lt;/code&gt; will be used as default, even if no configuration file
    is found.&lt;/p&gt;

&lt;p&gt;Note that the fallback, override and cascading works on &lt;em&gt;key level&lt;/em&gt;,
and not like most other systems have implemented, on
configuration &lt;em&gt;file level&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Namespaces&lt;/h2&gt;

&lt;p&gt;The specification gives the namespaces clearer semantics and
purpose. Key names starting with a namespace are connected to a
configuration source. E.g. keys starting with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt; are keys from the home directory of the current user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system&lt;/code&gt; are keys from the &lt;code&gt;/etc&lt;/code&gt; directory of the current system&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt; are keys from the specification directory (configurable
  with KDB_DB_SPEC, typically &lt;code&gt;/usr/share/elektra/specification&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When a key name starts with an &lt;code&gt;/&lt;/code&gt; it means that it is looked up by
specification. Such a cascading key is not really present in the keyset
(except when a default value was found). They are neither received
nor stored by &lt;code&gt;kdbGet&lt;/code&gt; and &lt;code&gt;kdbSet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Applications shall only lookup using cascading keys (starting with &lt;code&gt;/&lt;/code&gt;).
If no specification is present, cascading of all namespaces is used as before.&lt;/p&gt;

&lt;p&gt;Elektra will (always) continue to work for applications that do not have a
specification. We strongly encourage you, however, to write such a
specification, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it helps the administrator to know which keys exist&lt;/li&gt;
&lt;li&gt;it documents the keys (including lookup behaviour and default value)&lt;/li&gt;
&lt;li&gt;and many more advantages to come in future releases..&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For a tutorial how to actually elektrify an application and for more
background to Elektra,
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/tutorials/application-integration.md&quot;&gt;read this document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a full list of proposed and implemented metadata,
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/help/elektra-namespaces.md&quot;&gt;read this document&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Simplification in the merging framework&lt;/h2&gt;

&lt;p&gt;As it turned out the concept of very granular merge strategies was hard to understand
for users of the three-way merging framework that emerged in the last year&amp;rsquo;s
GSoC. While this granularity is desirable for flexibility, we
additionally wanted something easy to use. For that reason merge
configurations were introduced. These are simply preconfigured configurations for a merger
that arrange required strategies for the most common merging scenarios. Especially
they make sure that meta merging is handled correctly.&lt;/p&gt;

&lt;p&gt;Have a look at the changes in the example
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/src/libs/tools/examples/merging.cpp&quot;&gt;/src/libs/tools/examples/merging.cpp&lt;/a&gt;
for an glimpse of the simplifications.&lt;/p&gt;

&lt;p&gt;A big thanks to Felix Berlakovich!&lt;/p&gt;

&lt;p&gt;The header files will be installed to /usr/include/elektra/merging, but they are
subject to be changed in the future (e.g. as they did in this release).&lt;/p&gt;

&lt;p&gt;From the merging improvements some minor incompatibility happened in
&lt;code&gt;kdb import&lt;/code&gt;. Not all merging strategies that worked in 0.8.10 work
anymore. Luckily, now its much simpler to choose the strategies.&lt;/p&gt;

&lt;h2&gt;API&lt;/h2&gt;

&lt;p&gt;The main API kdb.h has two added lines. First a new method was added:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssize_t keyAddName(Key *key, const char *addName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method is already used heavily in many parts. Contrary to &lt;code&gt;keySetBaseName&lt;/code&gt; and
&lt;code&gt;keyAddBaseName&lt;/code&gt; it allows us to extend the path with more than one Element at once,
i.e. &lt;code&gt;/&lt;/code&gt; are not escaped.&lt;/p&gt;

&lt;p&gt;The other new line is the new enum value &lt;code&gt;KEY_FLAGS&lt;/code&gt;.
This feature allows bindings to use any flags in keyNew without actually
building up variable argument lists.  (Thanks to Manuel Mausz)&lt;/p&gt;

&lt;p&gt;As always, API+ABI is stable and compatible.&lt;/p&gt;

&lt;h2&gt;Proposed&lt;/h2&gt;

&lt;p&gt;Many new functions are proposed and can be found in
&lt;a href=&quot;http://doc.libelektra.org/api/0.8.11/html&quot;&gt;the doxygen docu&lt;/a&gt; and in
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/src/include/kdbproposal.h&quot;&gt;kdbproposal.h&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Noteworthy is the method &lt;code&gt;keyGetNamespace&lt;/code&gt; which allows us to query all
namespaces. Since this release we changed every occurrence of namespaces
(except documentation) with switch-statements around &lt;code&gt;keyGetNamespace&lt;/code&gt;.
This allows us to add new more namespaces more easily. (Although its
currently not planned to add further namespaces.)&lt;/p&gt;

&lt;p&gt;Finally, a bunch of new lookup options were added, which might not be
useful for the public API (they allow us to disable the
specification-aware features mentioned in the beginning).&lt;/p&gt;

&lt;h2&gt;Obsolete and removed concepts&lt;/h2&gt;

&lt;h3&gt;umount&lt;/h3&gt;

&lt;p&gt;The concept that backends have a name (other than their mountpoint)
is now gone. Backends will simply be named with their escaped mountpath
below system/elektra/mountpoints without any confusing additional name.&lt;/p&gt;

&lt;p&gt;Unmounting still works with the mountpath.&lt;/p&gt;

&lt;p&gt;Removing this concept makes Elektra easier to understand and it also
removes some bugs. E.g. having mountpoints which do not differ except
having a &lt;code&gt;_&lt;/code&gt; instead of a &lt;code&gt;/&lt;/code&gt; would have caused problems with the
automatic name generation of Elektra 0.8.10.&lt;/p&gt;

&lt;p&gt;Old mountpoints need to be removed with their 0.8.10 name
(&lt;code&gt;_&lt;/code&gt; instead of &lt;code&gt;/&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;directory keys&lt;/h3&gt;

&lt;p&gt;Additionally, the so called directory keys were also removed.
Elektra was and still is completely key/value based. The &lt;code&gt;/&lt;/code&gt; separator
is only used for mountpoints.&lt;/p&gt;

&lt;h3&gt;fstab&lt;/h3&gt;

&lt;p&gt;The plugin fstab is also improved: Slashes in mountpoints are
escaped properly with the internal escaping engine of keyAddBaseName()
(i.e. without any problematic &lt;code&gt;/&lt;/code&gt; replacements).&lt;/p&gt;

&lt;h3&gt;dirname&lt;/h3&gt;

&lt;p&gt;getDirName() was removed from C++, gi-lua, gi-python2, gi-python3,
swig-lua, swig-python2 and swig-python3. It was never present in C and
did not fit well with keyBaseName() (which returns an unescaped name,
which is not possible for the dirname). (Thanks to Manuel Mausz)&lt;/p&gt;

&lt;h3&gt;invalid parent names&lt;/h3&gt;

&lt;p&gt;While empty (=invalid) names are still accepted as parentName to &lt;code&gt;kdbGet&lt;/code&gt;
and &lt;code&gt;kdbSet&lt;/code&gt; for compatibility reasons, but the parentKey&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Key *parentKey = keyNew(&quot;/&quot;, KEY_END);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should be used instead (if you want to get or store everything).
They have identical behaviour, except that
invalid names (that cannot be distinguished from empty names) will
produce a warning. In the next major version invalid parentNames
will produce an error.&lt;/p&gt;

&lt;h2&gt;KDB Behaviour&lt;/h2&gt;

&lt;p&gt;It is now enforced that before a kdbSet() on a specific path a kdbGet()
on that path needs to be done. This was always documented that way and
is the only way to correctly detect conflicts, updates and missing
configuration files. Error #107 will be reported on violations.&lt;/p&gt;

&lt;p&gt;Additionally, the handling with missing files was improved. Empty
keysets for a mountpoint now will remove a file. Such an empty file
is always up-to-date. Removing files has the same atomicity guarantees
as other operations.&lt;/p&gt;

&lt;p&gt;The concurrency behaviour is at a very high level: as expected many processes
with many threads can each concurrently write to the key database,
without any inconsistent states: This is noted here because Elektra
works on standard configuration files without any guarding processes.&lt;/p&gt;

&lt;p&gt;Filesystem problems, e.g. permission, now always lead to the same errors
(#9, #75, #109, #110), regardless of the storage plugin.&lt;/p&gt;

&lt;h2&gt;Qt-Gui 0.0.6&lt;/h2&gt;

&lt;p&gt;Raffael Pancheri was very busy and did a lot of stabilizing work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added markdown converter functionality for plugin documentation&lt;/li&gt;
&lt;li&gt;Integrated help (Whats this?)&lt;/li&gt;
&lt;li&gt;Added credits to other authors&lt;/li&gt;
&lt;li&gt;do not show storage/resolver plugins if a plugin of that kind has been selected&lt;/li&gt;
&lt;li&gt;added menu to newkey toolbar button to allow new array entries&lt;/li&gt;
&lt;li&gt;added option to include a configuration keyset when adding a plugin&lt;/li&gt;
&lt;li&gt;show included keys when creating the plugin configuration&lt;/li&gt;
&lt;li&gt;Added all storageplugins to namefilters&lt;/li&gt;
&lt;li&gt;Reimplement ErrorDialog&lt;/li&gt;
&lt;li&gt;Added undo/redo of all commands and correctly update the view&lt;/li&gt;
&lt;li&gt;modified ToolTip size&lt;/li&gt;
&lt;li&gt;Color animation on search results&lt;/li&gt;
&lt;li&gt;Refactored Buttons to accept shortcuts&lt;/li&gt;
&lt;li&gt;Updated Translations&lt;/li&gt;
&lt;li&gt;Colors are now customizeable&lt;/li&gt;
&lt;li&gt;Many small fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The gui is already used and the remaining small bugs (see github)
are going to be fixed soon. One of the highlights is undo for
nearly every action, so nothing prevents you from trying it out!&lt;/p&gt;

&lt;p&gt;A huge thanks to Raffael Pancheri for his contributions. His thesis can
be found at &lt;a href=&quot;http://www.libelektra.org/ftp/elektra/pancheri2015gui.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Bug fixing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fix issues with escaped backslashes in front of slashes&lt;/li&gt;
&lt;li&gt;atomic commits across namespaces work again&lt;/li&gt;
&lt;li&gt;memleak on ReadFile error in ni plugin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb getmeta&lt;/code&gt; reports errorcode if key, but no meta was found&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ksLookup&lt;/code&gt; now will also work if a key of the keyset is used as
  search-key (aliasing problem fixed by dup() on namelock)&lt;/li&gt;
&lt;li&gt;resolver regex does not match to wrongly written plugins&lt;/li&gt;
&lt;li&gt;jna plugin is now named libelektra-0.8.11.jar, with proper symlink to current version, for every CMake version&lt;/li&gt;
&lt;li&gt;fix bashism ($RANDOM)&lt;/li&gt;
&lt;li&gt;new keys are correctly renamed, fixes OpenICC (thanks to Felix Berlakovich)&lt;/li&gt;
&lt;li&gt;comments in host keys are correctly restored (thanks to Felix Berlakovich)&lt;/li&gt;
&lt;li&gt;output stream in type checking is no longer locale dependent (thanks to Manuel Mausz)&lt;/li&gt;
&lt;li&gt;cmake uninstall works again&lt;/li&gt;
&lt;li&gt;simplify CMAKE_DL_LIBS (thanks to Manuel Mausz)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Further gems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Examples were improved, added (e.g. cascading, namespace) and included in
&lt;a href=&quot;http://doc.libelektra.org/api/0.8.11/html&quot;&gt;Doxygen docu&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/METADATA.ini&quot;&gt;METADATA specification&lt;/a&gt;
  was nearly completely rewritten (thanks to Felix Berlakovich)&lt;/li&gt;
&lt;li&gt;benchmarks were greatly enhanced (runtime+heap profiling),
  and some important performance improvements were done&lt;/li&gt;
&lt;li&gt;All plugins now use the cmake function &lt;code&gt;add_plugin&lt;/code&gt;
  (thanks to Ian Donnelly for most of the work)&lt;/li&gt;
&lt;li&gt;data directory (keysets as C-files) is now shared between different
  kinds of test suites.&lt;/li&gt;
&lt;li&gt;many more tests were added, e.g. distribution tests, KDB API tests;
and allocation tests were readded&lt;/li&gt;
&lt;li&gt;now all kdb commands accept cascading keys.&lt;/li&gt;
&lt;li&gt;More compiler warning-flags are added and many warnings are fixed&lt;/li&gt;
&lt;li&gt;cleanup of old unused &lt;code&gt;keyName&lt;/code&gt; methods&lt;/li&gt;
&lt;li&gt;The key &lt;code&gt;system/elektra/mountpoints&lt;/code&gt; itself was always created and a
  left-over on a freshly installed system after the unit tests run the
  first time. The physical presence of the key is now irrelevant and
  it won&amp;rsquo;t be created automatically.&lt;/li&gt;
&lt;li&gt;Bash completion was greatly improved (thanks to Manuel Mausz)&lt;/li&gt;
&lt;li&gt;Configure scripts were refactored and are now much shorter (thanks to Manuel Mausz)&lt;/li&gt;
&lt;li&gt;New Debian build agents were added that are magnitutes faster than the old ones (a big thanks to Manuel Mausz)&lt;/li&gt;
&lt;li&gt;Many KDB tests, written in C, lua and python were added (thanks to Manuel Mausz)&lt;/li&gt;
&lt;li&gt;SWIG3 is preferred when available&lt;/li&gt;
&lt;li&gt;add the plugin counter that counts how often the methods of a plugin are called&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kdb list-tools&lt;/code&gt; is now advertised in &lt;code&gt;kdb --help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mac OS X support was greatly improved, thanks to Peter Nirschl
and Kai-Uwe Behrmann. The feature rich resolver, now also works
for Mac OS X.  wresolver is now only needed for mingw.&lt;/li&gt;
&lt;li&gt;Elektra still compiles with gcc (also mingw variants), icc and clang.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Further Notes&lt;/h2&gt;

&lt;p&gt;With 471 files changed, 27978 insertions(+), 11512 deletions(-) this
release is huge. With 773 commits over four month much more changes
happened which did not find their place in these release notes, even
though the notes are much less detailed than usual.&lt;/p&gt;

&lt;p&gt;Thanks for all contributions that are not enlisted here!&lt;/p&gt;

&lt;p&gt;For any questions and comments, please contact the
&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/registry-list&quot;&gt;Mailing List&lt;/a&gt;
or elektra@markus-raab.org.&lt;/p&gt;

&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.11.tar.gz&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: elektra-0.8.11.tar.gz&lt;/li&gt;
&lt;li&gt;size: 2022129&lt;/li&gt;
&lt;li&gt;md5sum: c53a8151aab760851842d745e904a4f8&lt;/li&gt;
&lt;li&gt;sha1: d7929d17d1a6529089d156f1910d87f678b84998&lt;/li&gt;
&lt;li&gt;sha256: c20fefcfba62cc906228f9b55d1f411ef8f884ff9d75774a0dd4f8eb8f5b48f6&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release tarball now is also available
&lt;a href=&quot;http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.11.tar.gz.gpg&quot;&gt;signed by me using gpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;already built API-Docu can be found &lt;a href=&quot;http://doc.libelektra.org/api/0.8.11/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;new RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/7d4647d4-4131-411e-9c2a-2aca39446e18.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see http://www.libelektra.org&lt;/p&gt;
</description>
<pubDate>Fri, 03 Apr 2015 02:39:37 +0200</pubDate>
<link>http://www.libelektra.org/news/7d4647d4-4131-411e-9c2a-2aca39446e18.html</link>
</item>
<item>
<title>0.8.10 Release</title>
<guid isPermaLink="false">6ce57ecf-420a-4a31-821e-1c5fe5532eb4</guid>
<description>
&lt;h1&gt;0.8.10 Release&lt;/h1&gt;

&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;we are delighted to announce our latest feature release providing
major updates in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;compatibility with standards,&lt;/li&gt;
&lt;li&gt;tooling,&lt;/li&gt;
&lt;li&gt;plugins (hosts, rename),&lt;/li&gt;
&lt;li&gt;Qt-Gui and&lt;/li&gt;
&lt;li&gt;a new Java binding&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;XDG Compatibility&lt;/h2&gt;

&lt;p&gt;Elektra now is
&lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-0.8.html&quot;&gt;fully XDG 0.8&lt;/a&gt;
compliant. Following changes were necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;newly created configuration files for user/ now have the permissions
0600&lt;/li&gt;
&lt;li&gt;newly created configuration directories for user/ now have the
permissions 0700&lt;/li&gt;
&lt;li&gt;existing configuration files will retain their permissions.&lt;/li&gt;
&lt;li&gt;The default path to store user configuration is now ~/.config&lt;/li&gt;
&lt;li&gt;A new resolver variant x (for user and system) is introduced&lt;/li&gt;
&lt;li&gt;implements handling of XDG environment variables&lt;/li&gt;
&lt;li&gt;ignores empty dirs and absolute paths in envvar&lt;/li&gt;
&lt;li&gt;add new shell based test suite for (xdg)-resolver&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For example, we could use resolver_fm_xhp_x:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount --resolver=resolver_fm_xhp_x file.dump /example dump
kdb file user/example
kdb file system/example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will show you that for both user+system the resolver respects
XDG environment variables, e.g. above lines will print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/m/.config/file.dump
/etc/xdg/file.dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, any attempts to get and set keys below user/example and
system/example will also be in these files.&lt;/p&gt;

&lt;p&gt;The letters after _ describe the variant of the resolver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;f .. file based locking&lt;/li&gt;
&lt;li&gt;m .. mutex based locking (for multiple KDB per process)&lt;/li&gt;
&lt;li&gt;for user configuration (after next _)&lt;/li&gt;
&lt;li&gt;x .. first check XDG_CONFIG_HOME environment&lt;/li&gt;
&lt;li&gt;h .. then check HOME environment&lt;/li&gt;
&lt;li&gt;p .. then fall back to passwd&lt;/li&gt;
&lt;li&gt;for system configuration (after next _)&lt;/li&gt;
&lt;li&gt;x .. check all paths in XDG_CONFIG_DIRS and falls back to /etc/xdg&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A lot of such resolver variants are added when -DPLUGINS=ALL is used.
Of course you can create new variants with different behaviour by adding
them to PLUGINS.&lt;/p&gt;

&lt;p&gt;To make your application (that uses Elektra) XDG aware, you have nothing
to do: you get it to free. Make sure to always use cascading lookup.
Additionally, an XDG conforming application should not write system/
keys.&lt;/p&gt;

&lt;h2&gt;OpenICC Compatibility&lt;/h2&gt;

&lt;p&gt;Based on that, Elektra now also implements the draft for
&lt;a href=&quot;http://www.openicc.info/wiki/index.php?title=OpenICC_Configuration_0.1&quot;&gt;the OpenICC specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The mount command looks like quite complicated, but it consists of
simple parts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount --resolver=resolver_fm_xhp_x \
  color/settings/openicc-devices.json /org/freedesktop/openicc \
  yajl rename cut=org/freedesktop/openicc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We already know the first two lines: we use the XDG resolver already
introduced above. Only the file name and the path where it should be
mounted differs.&lt;/p&gt;

&lt;p&gt;The plugin yajl is a storage plugin that reads/writes json. The plugin
rename was the missing link to support OpenICC (thanks to Felix
Berlakovich for closing this gap). It is needed, because every OpenICC
file starts like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &quot;org&quot;: { &quot;freedesktop&quot;: { &quot;openicc&quot;: {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the backend is mounted at /org/freedesktop/openicc, it would
lead to keys below /org/freedesktop/openicc/org/freedesktop/openicc
which we obviously do not want. So we simply get rid of the common
prefix by cutting it out using the rename plugin.&lt;/p&gt;

&lt;p&gt;Of course this renaming functionality can be used in every situation and
is not limited to OpenICC.&lt;/p&gt;

&lt;h2&gt;Tools&lt;/h2&gt;

&lt;p&gt;A large number of old and new tools were added, mostly for convenience
e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount-openicc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;saves you from writing the long mount command we had in the previous
section.&lt;/p&gt;

&lt;p&gt;To get a list of all tools that are installed, now the command (which is
also an external tool and as such currently not displayed in kdb &amp;ndash;help):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb list-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is available. Do not be surprised: on typical installations this will
be a large list. You can run each of these tools by using kdb &lt;command&gt;.
Most of the tools, however, are part of the test suite,
which you can run using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb run_all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other tools are &amp;ldquo;old friends&amp;rdquo;, e.g. convert-fstab written in 2006 by Avi
Alkalay still works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb convert-fstab | kdb import system/filesystems xmltool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will parse your /etc/fstab and generate a XML. This XML then can be
imported. Other convert tools directly produce kdb commands, though.&lt;/p&gt;

&lt;p&gt;kdb now uses KDB itself for many commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/sw/kdb/current/resolver .. You always want a different default
  resolver than that was compiled in as default when mounting
  backends?&lt;/li&gt;
&lt;li&gt;/sw/kdb/current/format .. If you are annoyed by the default format
  dump format for import/export.&lt;/li&gt;
&lt;li&gt;/sw/kdb/current/plugins .. If you always forget to add some plugins
  when mounting something.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By default the plugin &amp;ldquo;sync&amp;rdquo; is added automatically (it makes sure that
fsync is executed on config files, the directory is already done by the
resolver), you should not remove it from /sw/kdb/current/plugins
otherwise the next mount command will not add it. To preserve it use a
space separated list, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb set user/sw/kdb/current/plugins &quot;sync syslog&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last, but not least, kdb get now supports cascading get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb get /sw/kdb/current/plugins
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature allows you to see the configuration exactly as seen by the
application.&lt;/p&gt;

&lt;p&gt;Other options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-123 options for hiding nth column in &lt;code&gt;kdb mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;hide warnings during script usage of &lt;code&gt;kdb mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-0 option accepted in some tools (null termination)&lt;/li&gt;
&lt;li&gt;Mount got a new -c option for backend configuration. For example
-c cut=org/freedesktop/openicc would be the parameter cut for all
plugins. Have a look at #146 if you want to use it.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;The core API (kdb.h), as always, stayed API/ABI compatible. The only
changes in kdb.h is the addition of KEY_CASCADING_NAME and
KEY_META_NAME. So applications compiled against 0.8.10 and using these
constants, will not work with Elektra 0.8.9.&lt;/p&gt;

&lt;p&gt;The constants allow us to create following kinds of keys:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;empty names: this was always possible, because invalid names
(including empty names) did not cause keyNew to abort&lt;/li&gt;
&lt;li&gt;metanames: this is a new feature that allows us to compare key names
with metakeys&lt;/li&gt;
&lt;li&gt;cascading names: names starting with / have the special meaning that
they do not specify which namespace they have. When such names are
used for

&lt;ul&gt;
&lt;li&gt;kdbGet() and kdbSet() keys are retrieved from all namespaces&lt;/li&gt;
&lt;li&gt;ksLookup() keys are searched in all namespaces&lt;/li&gt;
&lt;li&gt;ksLookupByName() is now just a wrapper for ksLookup().
  The method does not do much except creating a key and passing
  them to ksLookup().&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Usage in C is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Key *c = keyNew(&quot;/org/freedesktop&quot;, KEY_CASCADING_NAME, KEY_END);
Key *m = keyNew(&quot;comment/#0&quot;, KEY_META_NAME, KEY_END);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same functionality exists, of course, in available in all bindings,
too.&lt;/p&gt;

&lt;p&gt;Changes in non-core API are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xmltool now does not output default (unchanged) uid,gid and mode&lt;/li&gt;
&lt;li&gt;ksLookupBySpec from kdbproposal.h was removed, is now integrated into
  ksLookup&lt;/li&gt;
&lt;li&gt;extension keyNameGetNamespace was removed&lt;/li&gt;
&lt;li&gt;the hosts comment format has changed&lt;/li&gt;
&lt;li&gt;the default resolver has changed (uses passwd)&lt;/li&gt;
&lt;li&gt;kdb::tools::Backend::Backend constructor, tryPlugin and addPlugin
have changed:&lt;/li&gt;
&lt;li&gt;mountname is now automatically calculated&lt;/li&gt;
&lt;li&gt;addPlugin allows us to add a KeySet to validate plugins with different
  contracts correctly&lt;/li&gt;
&lt;li&gt;C++ binding now throws std::bad_alloc on allocation problems (and not
InvalidName)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;CMake&lt;/h2&gt;

&lt;p&gt;It is now possible to remove a plugin/binding/tools by prefixing a name
with &amp;ldquo;-&amp;rdquo;.  The new &amp;ldquo;-element&amp;rdquo; syntax is accepted by TOOLS, BINDINGS and
PLUGINS. It is very handy in combination with ALL, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-DPLUGINS=&quot;ALL;-xmltool&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will include all plugins except xmltool.&lt;/p&gt;

&lt;h2&gt;Improved comments&lt;/h2&gt;

&lt;p&gt;Comment preserving was improved a lot. Especially, the hosts plugin was
rewritten completely. Now multiple different comment styles can be
intermixed without losing information. E.g. some INI formats support
both ; and # for comments. With the new comments it is possible to
preserve that information and even better: applications can iterate
over that information (metadata).&lt;/p&gt;

&lt;p&gt;To mount the new hosts plugin use (if you already have mounted it, you
have nothing to do):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb mount /etc/hosts system/hosts hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hosts plugin now seperates from ipv4 and ipv6 which makes the host
names canonical again, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb get system/hosts/ipv4/localhost
kdb get system/hosts/ipv6/localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To access the inline-comment, use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb getmeta system/hosts/ipv4/localhost &quot;comment/#0&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other meta information, see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kdb lsmeta system/hosts/ipv4/localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, a small API for specific metadata operations emerges.
These operations will be moved to a separate library and will not stay
in Elektra&amp;rsquo;s core library.&lt;/p&gt;

&lt;h2&gt;Proposal&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lookup options:&lt;/li&gt;
&lt;li&gt;KDB_O_SPEC uses the lookup key as specification&lt;/li&gt;
&lt;li&gt;KDB_O_CREATE creates a key if it could not be found&lt;/li&gt;
&lt;li&gt;elektraKeyGetMetaKeySet creates a KeySet from metadata&lt;/li&gt;
&lt;li&gt;elektraKsFilter allows us to filter a KeySet arbitrarily (not only
  keyIsBelow in case of ksCut). It reintroduces more functional
  programming.&lt;/li&gt;
&lt;li&gt;keyGetNamespace was reintroduced. In one of the next versions of
Elektra we will introduce new namespaces. keyGetNamespace allows the
compiler to output a warning when some namespaces are not handled in
your C/C++ code.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Java binding&lt;/h2&gt;

&lt;p&gt;Elektra now fully supports applications written in Java and also Plugins
written in the same language.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/bindings/jna&quot;&gt;new binding was developed using jna.&lt;/a&gt;
For the
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/plugins/jni&quot;&gt;plugin interface JNI&lt;/a&gt;
was used.
We developed already
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/bindings/jna/elektra/plugin&quot;&gt;some plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Qt-Gui&lt;/h2&gt;

&lt;p&gt;Raffael Pancheri released the version 0.0.2 of the Qt-Gui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;added Backend Wizard for mounting&lt;/li&gt;
&lt;li&gt;user can hover over TreeView items and quickly see keyname, keyvalue
and metakeys&lt;/li&gt;
&lt;li&gt;it is now easily possible to create and edit arrays&lt;/li&gt;
&lt;li&gt;added header to MetaArea for better clarity&lt;/li&gt;
&lt;li&gt;many small layout and view update fixes&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Further stuff and small fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Two new error/warnings information: mountpoint and configfile.
  It is added automatically and all tools will print it.&lt;/li&gt;
&lt;li&gt;C++ I/O for key(s) now allows null terminator next to new-line
  terminator&lt;/li&gt;
&lt;li&gt;fix error plugin: now use on_open/trigger_warnings to be consistent&lt;/li&gt;
&lt;li&gt;fix metaset: now correctly append new key&lt;/li&gt;
&lt;li&gt;arrays are also available when compiled with mingw
 (but tests still have to be excluded for successful compilation)&lt;/li&gt;
&lt;li&gt;fix #136&lt;/li&gt;
&lt;li&gt;fix long help text in &lt;code&gt;kdb check&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;signed release tags are now used&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.10.tar.gz&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;size: 1915277&lt;/li&gt;
&lt;li&gt;md5sum: 2b16a4b555bc187562a0b38919d822a1&lt;/li&gt;
&lt;li&gt;sha1: 08b1d0139fc5eb0d03c52408478e68b91b1825dc&lt;/li&gt;
&lt;li&gt;sha256: 526e2ed61e87d89966eb36ddad78d8139b976e01ce18aab340d8a1df47132355&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;already built API-Docu can be found
&lt;a href=&quot;http://doc.libelektra.org/api/0.8.10/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;p&gt;Subscribe to the
&lt;a href=&quot;http://doc.libelektra.org/news/feed.rss&quot;&gt;new RSS feed&lt;/a&gt;
to always get the release notifications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://doc.libelektra.org/news/6ce57ecf-420a-4a31-821e-1c5fe5532eb4.html&quot;&gt;Permalink to this NEWS entry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see http://www.libelektra.org&lt;/p&gt;
</description>
<pubDate>Tue, 02 Dec 2014 18:37:51 +0100</pubDate>
<link>http://www.libelektra.org/news/6ce57ecf-420a-4a31-821e-1c5fe5532eb4.html</link>
</item>
<item>
<title>0.8.9 Release</title>
<guid isPermaLink="false">38640673-3e07-4cff-9647-f6bdd89b1b08</guid>
<description>
&lt;h1&gt;0.8.9 Release&lt;/h1&gt;

&lt;p&gt;Again we managed to do an amazing feature release in just two month.
In 416 commits we modified 393 files with 23462 insertions(+) and
9046 deletions(-).&lt;/p&gt;

&lt;h2&gt;Most awaited&lt;/h2&gt;

&lt;p&gt;The most awaited feature in this release is certainly the &lt;em&gt;qt-gui&lt;/em&gt;
developed by Raffael Pancheri. It includes a rich feature set including
searching, unmounting, importing and exporting. A lot of functionality
is quite stable now, even though its version is 0.0.1 alpha. If you find
any bugs or want to give general feedback, feel free to use the issue
tracker of the Elektra project. A screenshot can be found
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/blob/master/doc/images/screenshot-qt-gui.png&quot;&gt;here&lt;/a&gt;
To compile it (together with Elektra), see the README
&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/tools/qt-gui&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manuel Mausz also has been very active and developed glib+gi bindings.
These bindings make Elektra more friendly to the glib/gtk/gnome world.
Using the gobject introspection python3 and lua bindings were developed.
Additionally he got rid of all clang warnings.&lt;/p&gt;

&lt;p&gt;Felix Berlakovich also made progress: &lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/plugins/ini&quot;&gt;the ini
plugin&lt;/a&gt;
now supports multiline and
which can be dynamically turned on and off, i.e. during mounting
(thanks to Felix)&lt;/p&gt;

&lt;p&gt;Last, but not least, Kai-Uwe ported Elektra to Windows7. MinGW is now
one more supported compiler (tested on build-server, see later).
Astonishingly, it was only little effort necessary:
Basically we only needed a new implementation of the resolver, which
is now called &lt;em&gt;wresolver&lt;/em&gt;. Different from the &lt;em&gt;resolver&lt;/em&gt; it lacks the
sophisticated multi-process and multi-thread atomicity properties. On
the plus side we now have a resolver that is very easy to study and
understand and still works as file resolver (&lt;em&gt;noresolver&lt;/em&gt; does not).&lt;/p&gt;

&lt;h2&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;ABI/API of the C-API is still completely stable even though under the
hood a lot was changed. All testcases compiled against the previous
version still run against Elektra 0.8.9.&lt;/p&gt;

&lt;p&gt;This is, however, not the case for libtools. For MinGW porting it was
necessary to rename an enum related to merging because it conflicted
with an already defined MACRO.&lt;/p&gt;

&lt;p&gt;For maintainers also some changes are necessary. For MinGW and to
actually use the flexibility of the new resolver variants two new CMake
Variables are introduced: KDB_DEFAULT_RESOLVER and KDB_DEFAULT_STORAGE.&lt;/p&gt;

&lt;p&gt;More importantly for maintainers the CMake variables regarding SWIG
bindings are now abandoned in favour to the new variable BINDINGS that
works like PLUGINS and TOOLS. Just start with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-DBINDINGS=ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and CMake should remove the bindings that have missing dependencies
on your system. Remember that glib and gi (i.e. &lt;em&gt;gi_python3&lt;/em&gt; and
&lt;em&gt;gi_lua&lt;/em&gt;) bindings were introduced, too. Additionally, the &lt;em&gt;cpp&lt;/em&gt;
binding can now be deactivated if not added to BINDINGS.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;em&gt;gen&lt;/em&gt; tool added a Python package called &lt;code&gt;support&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Other Bits&lt;/h2&gt;

&lt;p&gt;A proof of concept storage plugin &lt;code&gt;regexstore&lt;/code&gt; was added. It allows one to
capture individual configuration options within an otherwise not
understood configuration file (e.g. for vimrc or emacs where
the configuration file may contain programming constructs).&lt;/p&gt;

&lt;p&gt;Most tests now also work with the BUILD_SHARED variant (from our
knowledge all would work now, but some are still excluded if
BUILD_FULL and BUILD_STATIC is disabled. Please report issues
if you want to use uncommon CMake combinations).&lt;/p&gt;

&lt;p&gt;A small but very important step towards specifying configuration files
is the new proposed API method ksLookupBySpec (and ksLookup implementing
cascading search). It introduces a &lt;code&gt;logical view&lt;/code&gt; of
configuration that in difference to the &lt;code&gt;physical view&lt;/code&gt; of
configuration does not have namespaces, but everything is below the root
&amp;ldquo;/&amp;rdquo;. Additionally, contextual values now allow one to be compile-time
configured using C++-Policies. These are small puzzle pieces that will
fit into a greater picture at a later time.&lt;/p&gt;

&lt;p&gt;A (data) race detection tool was implemented. Using it a configurable
number of processes and threads it tries to kdbSet() a different
configuration at (nearly) the same time.&lt;/p&gt;

&lt;p&gt;With this tool the resolver could be greatly be improved (again). It now
uses stat with nanosecond precision that will be updated for every
successful kdbSet(). Even if the configuration file was modified
manually (not using Elektra) the next kdbSet() then is much more likely
to fail.  Additionally a recursive mutex now protects the file locking
mechanism.&lt;/p&gt;

&lt;p&gt;The build server now additionally has following build jobs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-gcc-i386/&quot;&gt;i386 build:&lt;/a&gt;:
We had an i386 regression, because none of the developers
seems to use i386 anymore.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-gcc-configure-debian/&quot;&gt;Configure Debian Script&lt;/a&gt;
Calls the scripts/configure-debian(-wheezy).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-local-installation/&quot;&gt;Local Installation:&lt;/a&gt;
We had an regression that local installation was not possible because
of a bash completion file installed to /etc. This build tests if it is
possible to install Elektra in your home directory (and calls kdb
run_all afterwards)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-test-bindings/&quot;&gt;Test bindings:&lt;/a&gt;
Compiles and tests ALL bindings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://build.libelektra.org:8080/job/elektra-gcc-configure-mingw-w64/&quot;&gt;Mingw:&lt;/a&gt;
Compiles Elektra using mingw.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Many more examples were written and are used within doxygen. Most
snippets now can also be found in compilable files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/examples/keyNew.c&quot;&gt;keyNew examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/examples/keyCopy.c&quot;&gt;keyCopy examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/bindings/cpp/examples/cpp_example_dup.cpp&quot;&gt;C++ deep dup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/src/bindings/cpp/examples/cpp_example_ordering.cpp&quot;&gt;How to put Key in different data structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/scripts/mount-augeas&quot;&gt;Mount some config files using augeas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElektraInitiative/libelektra/tree/master/scripts/mount-info&quot;&gt;Mount system information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Most plugins now internally use the same CMake function &lt;code&gt;add_plugin&lt;/code&gt;
which makes plugin handling more consistent.&lt;/p&gt;

&lt;p&gt;Felix converted the METADATA spec to ini files and added a proposal
how comments can be improved.&lt;/p&gt;

&lt;h3&gt;Refactoring:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;reuse of utilities in gen code generator&lt;/li&gt;
&lt;li&gt;the gen support library is now in its own package (&lt;code&gt;support&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;refactor array handling&lt;/li&gt;
&lt;li&gt;internal comparision functions (keyCompareByName)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Optimization:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;lookupByName does not need to allocate two keys&lt;/li&gt;
&lt;li&gt;lookups in generated code&lt;/li&gt;
&lt;li&gt;prefer to use allocation on stack&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Fixes:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;disable cast that segfaults on i386 (only testing code was affected)&lt;/li&gt;
&lt;li&gt;fix keyAddBaseName in xmltool and testing code&lt;/li&gt;
&lt;li&gt;support non-system installation (e.g. in home directory)&lt;/li&gt;
&lt;li&gt;rewrote test cases to use succeed_if_same to avoid crashes on
null pointers&lt;/li&gt;
&lt;li&gt;allow one to use python 2.6 for kdb gen&lt;/li&gt;
&lt;li&gt;improve exception messages&lt;/li&gt;
&lt;li&gt;use memcasecmp (fix lookup ignoring case)&lt;/li&gt;
&lt;li&gt;fix memory leaks (ini)&lt;/li&gt;
&lt;li&gt;text messages for some warnings/errors&lt;/li&gt;
&lt;li&gt;fix many issues regarding CMake, more variants of setting CMake
options are now allowed.&lt;/li&gt;
&lt;li&gt;cmake policies fixes allow us to use cmake version &gt; 3&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from
&lt;a href=&quot;http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.9.tar.gz&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;size: 1936524&lt;/li&gt;
&lt;li&gt;md5sum: 001c4ec67229046509a0cb9eda223dc6&lt;/li&gt;
&lt;li&gt;sha1: 79ea9b83c08ed4c347ed0100b5e0e2d3309b9d04&lt;/li&gt;
&lt;li&gt;sha256: e0895bba28a27fb37f36f59ef77c95235f3a9c54fb71aa6f648566774d276568&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;already built API-Docu can be found
&lt;a href=&quot;http://doc.libelektra.org/api/0.8.9/html/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, see http://www.libelektra.org&lt;/p&gt;
</description>
<pubDate>Tue, 04 Nov 2014 10:48:14 +0100</pubDate>
<link>http://www.libelektra.org/news/38640673-3e07-4cff-9647-f6bdd89b1b08.html</link>
</item>
<item>
<title>0.8.8 Release</title>
<guid isPermaLink="false">eca69e19-5ddb-438c-ac06-57c20b1a9160</guid>
<description>
&lt;h1&gt;0.8.8 Release&lt;/h1&gt;

&lt;p&gt;In this release we changed 578 files in 473 commits
(68596 insertions(+), 59260 deletions(-) compared to Elektra 0.8.7).
We assume thats the largest change set for any of Elektra&amp;rsquo;s releases
up to now. It happened only within a bit more than a month up
(0.8.7 was released 28.07.2014).&lt;/p&gt;

&lt;h2&gt;New features&lt;/h2&gt;

&lt;p&gt;GSoC finished successfully (thanks Ian and Felix)
See http://community.libelektra.org/wp for the latest results.
So Elektra now has a 3-way merging framework that is superior
to text-based merging in many scenarios (e.g. moving configuration
options within a file or with in-line comments) iff a storage plugin
creates key names that are not only line numbers.
We love to get Feedback!&lt;/p&gt;

&lt;p&gt;Writing plugins is now even more comfortable.
A plugin writer tutorial was written (thanks Ian):
https://github.com/ElektraInitiative/libelektra/blob/master/doc/tutorials/plugins.md
The documentation was completely reworked:
http://doc.libelektra.org/api/0.8.7/html/group__plugin.html
And two new macros allow printf formating for warnings and errors
(ELEKTRA_ADD_WARNINGF and ELEKTRA_SET_ERRORF).&lt;/p&gt;

&lt;p&gt;The ini plugin was greatly improved (tested with samba configurations
and added to ALL plugins) and the hosts plugin was rewritten to support
ipv6 properly (thanks to Felix).&lt;/p&gt;

&lt;p&gt;The constants plugin was added and allows introspection of Elektra&amp;rsquo;s
cmake variables. Because such non-file based plugins (e.g. also uname)
do not need resolving, the plugin noresolver was added. It supersedes
the success plugin.&lt;/p&gt;

&lt;p&gt;Elektra now allows one to correctly fsync its configuration files
(sync plugin) and the folders where files are stored (resolver plugin).
Just make sure to add the &amp;ldquo;sync&amp;rdquo; plugin using kdb mount.
The resolver plugin now reads from passwd and no longer needs
environment variables.  Additionally, the resolver plugin was prepared
to support other variants by so called compilation variants.&lt;/p&gt;

&lt;p&gt;The error plugin now allows, next to list all possible errors, to
provoke errors when opening plugins. We fixed some issues related
to plugins having errors when they initialize themselves.&lt;/p&gt;

&lt;p&gt;So following plugins were added: sync noresolver line ini constants
Nearly all plugins now have a README.md for further information
(thanks to Ian). An overview of all plugin is on with links to them:
https://github.com/ElektraInitiative/libelektra/blob/master/src/plugins/&lt;/p&gt;

&lt;p&gt;The kdb tools were greatly improved (thanks to Felix):
- added remount tool
- umount now also accepts mountpath
- mount allows one to specify different resolvers
- import now can use merge strategies
- check without arguments checks key database
- mount is now more verbose when validation fails&lt;/p&gt;

&lt;p&gt;New/improved scripts/make targets (note that scripts can be executed by
kdb scriptname):
- mounting, unmounting scripts were added
- generate template for a new plugin was improved
- configure-debian was added
- added targets run_all and run_memcheck
- bash completion file now installed
- ucf integration
- merging scripts were added for the usage with ucf
- scripts doing internal checks on source of plugins&lt;/p&gt;

&lt;h2&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;This time we had to break compatibility. We did not change the ABI (your
application still will be able to use Elektra 0.8.8) and we did not
change the API (your application still will compile against Elektra). We
changed the third part of our interface: the semantic interface.&lt;/p&gt;

&lt;p&gt;The problems were following:
keyAddBaseName/keySetBaseName did something obvious when no special
characters were in the baseName. But once there were, there are two
different interpretations what it should do:
1.) add/set a basename, so escape characters that are not canonical
    in the basename
2.) add all parts of the name given (with slashes)&lt;/p&gt;

&lt;p&gt;The methods were used in both ways, so it was obvious that something is
very wrong. We decided that it should do what the name says, that is
add/set a basename (variant 1).&lt;/p&gt;

&lt;p&gt;The variant 2, to add any name was added and is called keyAddName() and
added as proposal.&lt;/p&gt;

&lt;p&gt;(Thank Felix for implementations and Manuel for investigations)&lt;/p&gt;

&lt;p&gt;When keys are renamed after adding to a keyset is a bad thing because it
destroys the order of the keyset. This is now avoided by keyLock.
Use keyDup() to get rid of such locks.&lt;/p&gt;

&lt;p&gt;Another, even larger, change is also about ordering of keys in keysets.
Elektra now internally has an null-terminated unescaped keyname.
Ordering of keysets will always happen on this name. The keyCmp() tool
can be used to check this order. It works very efficiently with
memcmp() and never gets confused by ASCII ordering of / (because / is
0 in the unescaped keyname).&lt;/p&gt;

&lt;p&gt;The syntax, semantics and conventions of key names is now documented in
detail:
http://doc.libelektra.org/api/0.8.8/html/group__keyname.html&lt;/p&gt;

&lt;p&gt;ksNew() does now return a keyset with a properly set cursor (ksRewind).&lt;/p&gt;

&lt;p&gt;Because its always possible that software relies on bugs the
better way to deal with such a situation (as the keySetBaseName()
situation described above) is to provide the same function twice.
Manuel said he will create a prototype to introduce symbol versioning
in Elektra. With that, old customers would still receive the old
behaviour, but people compiling against a new version would get the new
behaviour. So in one of the next releases we will also avoid semantic
interface changes when there is a valid use case for it (there is none
if the program e.g.  crashes).&lt;/p&gt;

&lt;p&gt;Symbol versioning also allows one to compile against old versions on
purpose if you do not want the new behaviour.&lt;/p&gt;

&lt;p&gt;We have prepared an ABI-test suite, that also checks behaviour,
for that purpose, but we also improved testing in other parts:
- (New Test strategy)[/doc/TESTING.md]
- New resolver tests for conflicts (needs tty)&lt;/p&gt;

&lt;p&gt;If you try to execute test_ks from 0.8.7 with libelektra 0.8.8 it will
crash, but not because of any incompatibility, but because of strcmp in
the test itself gets a null pointer. The pointer is now null, because
ksNew correctly rewinds its internal cursor (see above). Amusingly,
it says on that line 94 in test_ks.c:
  // TODO: why is the cursor here?&lt;/p&gt;

&lt;h2&gt;API Proposals&lt;/h2&gt;

&lt;p&gt;see above for more information:
- keyAddName         ..  add key name without escaping, like keySetName
- keyUnescapedName   ..  get access to null-separated unescaped name
- keyLock            ..  to allow one to secure keys against modifications&lt;/p&gt;

&lt;p&gt;some new ideas:
- keySetStringF      ..  printf format-style changing of the key string
- elektraKeySetName  ..  to allow one to set meta + cascading keys&lt;/p&gt;

&lt;p&gt;elektraArrayIncName() now works correctly with empty arrays embedded in
other arrays (yajl+line plugin)&lt;/p&gt;

&lt;p&gt;elektraArrayValidateName() was also added, thanks to Felix.&lt;/p&gt;

&lt;p&gt;These methods are declared in the file kdbproposal.h
but do not guarantee any forms of compatibility (they might
even be removed).&lt;/p&gt;

&lt;h2&gt;Issues&lt;/h2&gt;

&lt;p&gt;Many issues were resolved as you can see in github:
https://github.com/ElektraInitiative/libelektra/issues
Alone for the milestone 0.8.8 we closed 17 issues, including
those mentioned in &amp;ldquo;Compatibility&amp;rdquo;. Other issues (not all were
tracked on github):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix undefined errors in kdbOpen() or kdbClose()&lt;/li&gt;
&lt;li&gt;Now Python 2+3 work in parallel&lt;/li&gt;
&lt;li&gt;python2 interpreter is found correctly (also on Arch)&lt;/li&gt;
&lt;li&gt;Sentinel now makes sure that you cannot forget KS_END to end ksNew&lt;/li&gt;
&lt;li&gt;Fixes for architecture-specific problems by Pino&lt;/li&gt;
&lt;li&gt;fix .pc file&lt;/li&gt;
&lt;li&gt;fix compilation problem with KDB_MAX_PATH_LENGTH&lt;/li&gt;
&lt;li&gt;tmpnam to mkstemp (security)&lt;/li&gt;
&lt;li&gt;make test data naming consistent (thanks Pino)&lt;/li&gt;
&lt;li&gt;use LIB_SUFFIX for TARGET_TOOL_EXEC_FOLDER thanks to Kai Uwe&lt;/li&gt;
&lt;li&gt;Fix search for boost (thank Pino)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Other Stuff&lt;/h2&gt;

&lt;p&gt;Thanks to Pino Toscano Elektra 0.8.7-4 is now available in Debian
Testing: https://packages.debian.org/search?keywords=elektra
So it is only a matter of time that other (debian-based) distributions
will follow and replace the dusty Elektra 0.7.&lt;/p&gt;

&lt;p&gt;Debian Continuous Integration http://ci.debian.net/packages/e/elektra
(thanks Pino)
greatly complement our tests running on http://build.libelektra.org:8080/&lt;/p&gt;

&lt;p&gt;Elektra&amp;rsquo;s buildserver also was improved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;now also compiles with icc&lt;/li&gt;
&lt;li&gt;runs make run_memcheck&lt;/li&gt;
&lt;li&gt;checks if plugins are added correctly in-source&lt;/li&gt;
&lt;li&gt;runs ABI + behavioural tests&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Raffael Pancheri now made a merge request for qt-gui
https://github.com/ElektraInitiative/libelektra/pull/103/files
in which copy, paste and delete of keys already works.
It is, however, still work in progress.&lt;/p&gt;

&lt;p&gt;Manuel Mausz made great progress in script-based Elektra plugins. He is
also working on glib+gobject-introspection based bindings.
He investigated some issues, e.g. a crash of the python binding which
was only triggered if python3 is build with a specific flag/module
combination, see:
https://github.com/ElektraInitiative/libelektra/issues/25&lt;/p&gt;

&lt;h2&gt;Get It!&lt;/h2&gt;

&lt;p&gt;You can download the release from:&lt;/p&gt;

&lt;p&gt;http://www.markus-raab.org/ftp/elektra/releases/elektra-0.8.8.tar.gz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;size: 1644441&lt;/li&gt;
&lt;li&gt;md5sum: fe11c6704b0032bdde2d0c8fa5e1c7e3&lt;/li&gt;
&lt;li&gt;sha1: 16e43c63cd6d62b9fce82cb0a33288c390e39d12&lt;/li&gt;
&lt;li&gt;sha256: ae75873966f4b5b5300ef5e5de5816542af50f35809f602847136a8cb21104e2&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;already built API-Docu can be found here:&lt;/p&gt;

&lt;p&gt;http://doc.libelektra.org/api/0.8.8/html/&lt;/p&gt;
</description>
<pubDate>Tue, 02 Sep 2014 17:31:42 +0200</pubDate>
<link>http://www.libelektra.org/news/eca69e19-5ddb-438c-ac06-57c20b1a9160.html</link>
</item>
</channel>
</rss>
