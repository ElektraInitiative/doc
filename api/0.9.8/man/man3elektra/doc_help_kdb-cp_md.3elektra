.TH "doc_help_kdb-cp_md" 3elektra "Mon Oct 4 2021" "Version 0.9.8" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_help_kdb-cp_md \- kdb-cp(1) -- Copy keys within the key database 
 
.SH "SYNOPSIS"
.PP
\fCkdb cp <source> <dest>\fP
.SH "DESCRIPTION"
.PP
This command copies key(s) in the Key database\&. You can copy keys to another directory within the database or even below another key\&. Note that you cannot copy a key below itself\&.
.PP
Where \fCsource\fP is the path of the key(s) you want to copy and \fCdest\fP is the path where you would like to copy the key(s) to\&. Note that when using the \fC-r\fP flag, \fCsource\fP as well as all of the keys below it will be copied\&.
.SH "LIMITATIONS"
.PP
Neither \fCsource\fP nor \fCdest\fP can be a cascading key\&. (Start with \fC/\fP)\&. Make sure to select a namespace\&.
.SH "RETURN VALUES"
.PP
This command will return the following values as an exit status:
.PP
.IP "\(bu" 2
0: No errors\&.
.IP "\(bu" 2
1-10: standard exit codes, see \fBkdb(1)\fP
.IP "\(bu" 2
11: No key to copy found\&.
.PP
.SH "OPTIONS"
.PP
.IP "\(bu" 2
\fC-H\fP, \fC--help\fP: Show the man page\&.
.IP "\(bu" 2
\fC-V\fP, \fC--version\fP: Print version info\&.
.IP "\(bu" 2
\fC-p\fP, \fC--profile <profile>\fP: Use a different kdb profile\&.
.IP "\(bu" 2
\fC-C\fP, \fC--color <when>\fP: Print never/auto(default)/always colored output\&.
.IP "\(bu" 2
\fC-r\fP, \fC--recursive\fP: Recursively copy keys\&.
.IP "\(bu" 2
\fC-v\fP, \fC--verbose\fP: Explain what is happening\&. Prints additional information in case of errors/warnings\&.
.IP "\(bu" 2
\fC-d\fP, \fC--debug\fP: Give debug information\&. Prints additional debug information in case of errors/warnings\&.
.IP "\(bu" 2
\fC-f\fP, \fC--force\fP: Force overwriting the keys\&.
.PP
.SH "EXAMPLES"
.PP
.PP
.nf
# Backup-and-Restore: user:/tests/cp/examples

# Create the keys we use for the examples
kdb set user:/tests/cp/examples/kdb-cp/key key1
kdb set user:/tests/cp/examples/kdb-cp/key/first key
kdb set user:/tests/cp/examples/kdb-cp/key/second key
kdb set user:/tests/cp/examples/kdb-cp/cpkey key1
kdb set user:/tests/cp/examples/kdb-cp/cpkey/first key
kdb set user:/tests/cp/examples/kdb-cp/cpkey/second key
kdb set user:/tests/cp/examples/kdb-cp/cpkeyerror/first key
kdb set user:/tests/cp/examples/kdb-cp/cpkeyerror/second anotherValue
kdb set user:/tests/cp/examples/kdb-cp/another/key one
kdb set user:/tests/cp/examples/kdb-cp/another/value two

# To copy a single key:
kdb cp user:/tests/cp/examples/kdb-cp/key user:/tests/cp/examples/kdb-cp/key2
#>

# To copy multiple keys:
kdb cp -r user:/tests/cp/examples/kdb-cp/key user:/tests/cp/examples/kdb-cp/copied
#>

# If the target-key already exists and has a different value, cp fails:
kdb cp -r user:/tests/cp/examples/kdb-cp/key user:/tests/cp/examples/kdb-cp/cpkeyerror
# RET: 11

# If the target-key already exists and has the same value as the source, everything is fine:
kdb cp -r user:/tests/cp/examples/kdb-cp/key user:/tests/cp/examples/kdb-cp/cpkey
#>

# To force the copy of keys:
kdb cp -rf user:/tests/cp/examples/kdb-cp/key user:/tests/cp/examples/kdb-cp/cpkeyerror
#>

# Now the key-values of /cpkeyerror are overwritten:
kdb export user:/tests/cp/examples/kdb-cp/cpkeyerror mini
#> =key1
#> first=key
#> second=key

# To copy keys below an existing key:
kdb cp -r user:/tests/cp/examples/kdb-cp/another user:/tests/cp/examples/kdb-cp/another/key
#>

kdb rm -r user:/tests/cp/examples/kdb-cp/
.fi
.PP
 
