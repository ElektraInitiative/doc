.TH "doc_decisions_binary_md" 3elektra "Mon Jul 11 2022" "Version 0.9.10" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_binary_md \- Binary 
 
.SH "Problem"
.PP
Binary
.PP
.IP "\(bu" 2
is the only metadata that allows more values (instead of making the validation stricter)
.IP "\(bu" 2
is the only API that modifies metadata
.IP "\(bu" 2
creates some inconsistencies in the API (e\&.g\&. \fCKEY_FLAG_RO_VALUE\fP is linked to \fCKEY_FLAG_RO_META\fP)
.PP
.SH "Constraints"
.PP
.IP "\(bu" 2
simplify API
.PP
.SH "Assumptions"
.PP
.IP "\(bu" 2
byte-array values are a rarely used feature in configuration settings
.IP "\(bu" 2
absence of values, i\&.e\&., \fBnull keys\fP however, is quite common
.PP
.SH "Considered Alternatives"
.PP
.IP "\(bu" 2
flag for indicating if a value is binary
.PP
.SH "Decision"
.PP
.IP "\(bu" 2
make keys with untyped value per default (no assumption about type, i\&.e\&., byte-array)
.IP "\(bu" 2
all current types are not binary, so type = string is the way to indicate a string doesn't
.IP "  \(bu" 4
contain null bytes
.IP "  \(bu" 4
is not null (not only indicator of structure without value)
.IP "  \(bu" 4
uses some well-defined but unspecified text encoding (i\&.e\&. not necessarily ASCII or UTF-8)
.PP

.IP "\(bu" 2
remove binary functionality from keyNew keyVNew keyIsBinary keyIsString keyValue keyGetValueSize keyString keyGetString keySetString keyGetBinary keySetBinary
.IP "\(bu" 2
keySetRaw -> keySetValue
.PP
.SH "Rationale"
.PP
.SH "Implications"
.PP
.IP "\(bu" 2
metadata can also be binary
.IP "\(bu" 2
binary types would be possible (e\&.g\&. nullable-string)
.PP
.SH "Related Decisions"
.PP
.IP "\(bu" 2
\fBnull\fP)
.PP
.SH "Notes"
.PP

