.TH "keyname.c" 3elektra "Tue Oct 31 2017" "Version 0.8.20" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
keyname.c \- Methods for Key name manipulation\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <kdbassert\&.h>\fP
.br
\fC#include 'kdb\&.h'\fP
.br
\fC#include 'kdbhelper\&.h'\fP
.br
\fC#include 'kdbinternal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBkeyName\fP (const Key *key)"
.br
.RI "Returns a pointer to the abbreviated real internal \fCkey\fP name\&. "
.ti -1c
.RI "ssize_t \fBkeyGetNameSize\fP (const Key *key)"
.br
.RI "Bytes needed to store the key name without owner\&. "
.ti -1c
.RI "const void * \fBkeyUnescapedName\fP (const Key *key)"
.br
.RI "Returns a keyname which is null separated and does not use backslash for escaping\&. "
.ti -1c
.RI "ssize_t \fBkeyGetUnescapedNameSize\fP (const Key *key)"
.br
.RI "return size of unescaped name with embedded and terminating null characters "
.ti -1c
.RI "ssize_t \fBkeyGetName\fP (const Key *key, char *returnedName, size_t maxSize)"
.br
.RI "Get abbreviated key name (without owner name)\&. "
.ti -1c
.RI "ssize_t \fBkeySetName\fP (Key *key, const char *newName)"
.br
.RI "Set a new name to a key\&. "
.ti -1c
.RI "ssize_t \fBkeyGetFullNameSize\fP (const Key *key)"
.br
.RI "Bytes needed to store the key name including user domain and ending NULL\&. "
.ti -1c
.RI "ssize_t \fBkeyGetFullName\fP (const Key *key, char *returnedName, size_t maxSize)"
.br
.RI "Get key full name, including the user domain name\&. "
.ti -1c
.RI "const char * \fBkeyBaseName\fP (const Key *key)"
.br
.RI "Returns a pointer to the internal unescaped key name where the \fCbasename\fP starts\&. "
.ti -1c
.RI "ssize_t \fBkeyGetBaseNameSize\fP (const Key *key)"
.br
.RI "Calculates number of bytes needed to store basename of \fCkey\fP\&. "
.ti -1c
.RI "ssize_t \fBkeyGetBaseName\fP (const Key *key, char *returned, size_t maxSize)"
.br
.RI "Calculate the basename of a key name and put it in \fCreturned\fP finalizing the string with NULL\&. "
.ti -1c
.RI "ssize_t \fBkeyAddBaseName\fP (Key *key, const char *baseName)"
.br
.RI "Adds \fCbaseName\fP (that will be escaped) to the current key name\&. "
.ti -1c
.RI "ssize_t \fBkeyAddName\fP (Key *key, const char *newName)"
.br
.RI "Add an already escaped name to the keyname\&. "
.ti -1c
.RI "ssize_t \fBkeySetBaseName\fP (Key *key, const char *baseName)"
.br
.RI "Sets \fCbaseName\fP as the new basename for \fCkey\fP\&. "
.ti -1c
.RI "\fBelektraNamespace\fP \fBkeyGetNamespace\fP (const Key *key)"
.br
.RI "For currently valid namespaces see \fBelektraNamespace\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 
Methods for Key name manipulation\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see LICENSE\&.md or https://www.libelektra.org) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
