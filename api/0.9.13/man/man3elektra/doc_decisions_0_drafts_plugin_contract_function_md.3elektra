.TH "doc_decisions_0_drafts_plugin_contract_function_md" 3elektra "Tue Mar 14 2023" "Version 0.9.13" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_0_drafts_plugin_contract_function_md \- Plugin Contract Function 
 
.SH "Problem"
.PP
Contract for a plugin is currently retrieved by calling the plugin's \fCget\fP function with a special \fCparentKey\fP\&. This makes the \fCget\fP function awkward to write\&. You must always first check for the special \fCparentKey\fP\&. It also makes the \fCget\fP function mandatory, even if the plugin doesn't implement any real \fCget\fP functionality\&.
.PP
Additionally, the actual public API exported from shared library to make it a plugin is the \fCELEKTRA_PLUGIN_EXPORT\fP function\&. This function always calls \fCelektraPluginExport\fP, which allocates and half initializes a \fCstruct _Plugin\fP\&. Specifically, only the \fCname\fP field and the \fCkdb*\fP function pointers are set\&. This same information is also provided via the contract\&. The function pointers are all listed in \fCsystem:/elektra/modules/<plugin>/exports/*\fP and the \fC<plugin>\fP part of the name is the \fCname\fP of the plugin\&.
.SH "Constraints"
.PP
.SH "Assumptions"
.PP
.SH "Considered Alternatives"
.PP
.IP "1." 4
Create a separate \fCkdbContract\fP that returns the contract of a plugin\&.
.PP
.PP
.PP
.nf
KeySet * ELEKTRA_PLUGIN_FUNCTION(contract) ();

// OR

void ELEKTRA_PLUGIN_FUNCTION(contract) (KeySet * ks);
.fi
.PP
.PP
This solves the problem of the awkward \fCget\fP function, but it does not address the issue of the duplicate information in \fCELEKTRA_PLUGIN_EXPORT\fP\&.
.PP
.IP "2." 4
Change the \fCELEKTRA_PLUGIN_EXPORT\fP to return the contract of the plugin instead of creating half a \fCstruct _Plugin\fP\&.
.PP
.PP
.PP
.nf
KeySet * ELEKTRA_PLUGIN_EXPORT ();

// OR

void ELEKTRA_PLUGIN_EXPORT (KeySet * ks);
.fi
.PP
.PP
This also removes the duplicate information inside the plugin\&.
.PP
.IP "3." 4
(combined with 2) Change what the \fCKeySet * modules\fP stores\&.
.PP
Currently, \fCmodules\fP stores data dependent on how modules are loaded\&. When dynamic linking is used, the keys store the handle from \fCdlopen\fP and a pointer to the \fCELEKTRA_PLUGIN_EXPORT\fP function\&. With static linking, the keys store a custom struct with function pointers\&.
.PP
Instead, we would now store the contracts directly in \fCKeySet * modules\fP\&.
.PP
The implementations of \fCelektraModulesLoad\fP would simply find the correct function and call it\&.
.PP
.PP
.PP
.nf
typedef void (*elektraPluginExportFn) (KeySet * ks);

void elektraModulesLoad (KeySet * modules, const char * name, Key * errorKey)
{
     Key * moduleKey = keyNew ("system:/elektra/modules", KEY_END);
keyAddBaseName (moduleKey, name);
if (ksLookup (modules, moduleKey, 0) != NULL)
{
             // already loaded
     return;
}

     elektraPluginExportFn exportFn;
     // [\&.\&.\&.] find exportFn for plugin

     exportFn (modules); // inserts the contract with all the exported functions

     if (ksLookup (modules, moduleKey, 0) == NULL)
{
             ksAppendKey (modules, moduleKey);
}
     else
     {
             keyDel (moduleKey);
     }
}
.fi
.PP
.PP
.RS 4
\fBNote\fP to avoid allocated and deleting a temporary \fCKeySet *\fP the \fCvoid ELEKTRA_PLUGIN_EXPORT (KeySet * ks)\fP API works best here\&. 
.RE
.PP
.SH "Decision"
.PP
.SH "Rationale"
.PP
.SH "Implications"
.PP
.SH "Related Decisions"
.PP
.IP "\(bu" 2
\fBCommit Function\fP
.IP "\(bu" 2
\fBPlugin Struct\fP
.PP
.SH "Notes"
.PP

