.TH "org.libelektra.ReadableKey" 3elektra "Thu Mar 16 2023" "Version 0.9.14" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.libelektra.ReadableKey \- Read only key representing a native Elektra key providing read access to its name and value\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits Comparable< ReadableKey >\&.
.PP
Inherited by \fBorg\&.libelektra\&.Key\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.ti -1c
.RI "Iterator< String > \fBkeyNameIterator\fP ()"
.br
.ti -1c
.RI "boolean \fBgetBoolean\fP ()"
.br
.ti -1c
.RI "byte \fBgetByte\fP ()"
.br
.ti -1c
.RI "short \fBgetShort\fP ()"
.br
.ti -1c
.RI "int \fBgetInt\fP ()"
.br
.ti -1c
.RI "long \fBgetLong\fP ()"
.br
.ti -1c
.RI "float \fBgetFloat\fP ()"
.br
.ti -1c
.RI "double \fBgetDouble\fP ()"
.br
.ti -1c
.RI "String \fBgetString\fP ()"
.br
.ti -1c
.RI "\fBKey\fP \fBdup\fP ()"
.br
.RI "Duplicates this \fBReadableKey\fP as \fBKey\fP\&. "
.ti -1c
.RI "\fBKey\fP \fBdup\fP (int flags)"
.br
.RI "Duplicates this \fBReadableKey\fP as \fBKey\fP\&. "
.ti -1c
.RI "int \fBcompareTo\fP (\fBReadableKey\fP other)"
.br
.RI "Compares this key with the\&. "
.ti -1c
.RI "boolean \fBisBelow\fP (\fBReadableKey\fP other)"
.br
.RI "Checks whether this key is sub-key of the\&. "
.ti -1c
.RI "boolean \fBisBelowOrSame\fP (\fBReadableKey\fP other)"
.br
.RI "Checks whether this key is the same as the\&. "
.ti -1c
.RI "boolean \fBisDirectlyBelow\fP (\fBReadableKey\fP other)"
.br
.RI "Checks whether this key is direct sub-key of the\&. "
.ti -1c
.RI "boolean \fBisBinary\fP ()"
.br
.ti -1c
.RI "boolean \fBisString\fP ()"
.br
.ti -1c
.RI "String \fBgetName\fP ()"
.br
.ti -1c
.RI "int \fBgetNameSize\fP ()"
.br
.ti -1c
.RI "String \fBgetBaseName\fP ()"
.br
.ti -1c
.RI "int \fBgetBaseNameSize\fP ()"
.br
.ti -1c
.RI "int \fBgetValueSize\fP ()"
.br
.ti -1c
.RI "boolean \fBisNull\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final int \fBKEY_CP_NAME\fP = 1 << 0"
.br
.RI "Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key name\&. "
.ti -1c
.RI "static final int \fBKEY_CP_STRING\fP = 1 << 1"
.br
.RI "Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key value, if it is a string\&. "
.ti -1c
.RI "static final int \fBKEY_CP_VALUE\fP = 1 << 2"
.br
.RI "Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key value\&. "
.ti -1c
.RI "static final int \fBKEY_CP_META\fP = 1 << 3"
.br
.RI "Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key metadata\&. "
.ti -1c
.RI "static final int \fBKEY_CP_ALL\fP = \fBKEY_CP_NAME\fP | \fBKEY_CP_VALUE\fP | \fBKEY_CP_META\fP"
.br
.RI "Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key name, value and metadata\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBReadableKey\fP (Pointer pointer)"
.br
.RI "Constructor associating a new \fBReadableKey\fP instance with a JNA pointer\&. "
.ti -1c
.RI "\fBReadableKey\fP (Pointer pointer, boolean suppressCleanUp)"
.br
.RI "Constructor associating a new \fBReadableKey\fP instance with a JNA pointer
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. "
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Clean-up method to release key reference by first decrementing its reference counter and then trying to free the native reference
.br
 
.br
 Call this method if you do not longer need a \fBReadableKey\fP and obtained it via any of its public methods or the public methods of \fBKeySet\fP\&. "
.ti -1c
.RI "Pointer \fBgetPointer\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static Optional< \fBReadableKey\fP > \fBcreateReadOnly\fP (@Nullable Pointer pointer)"
.br
.RI "Constructs a new \fBReadableKey\fP instance associated with a JNA pointer\&. "
.in -1c
.SH "Detailed Description"
.PP 
Read only key representing a native Elektra key providing read access to its name and value\&. 

@apiNote This abstraction is used to represent meta keys being read only by definition and cannot contain binary data 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.libelektra\&.ReadableKey\&.ReadableKey (Pointer pointer)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBReadableKey\fP instance with a JNA pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP JNA \fBPointer\fP to key 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SS "org\&.libelektra\&.ReadableKey\&.ReadableKey (Pointer pointer, boolean suppressCleanUp)\fC [inline]\fP, \fC [protected]\fP"

.PP
Constructor associating a new \fBReadableKey\fP instance with a JNA pointer
.br
 
.br
 Suppressing clean-up has been introduced for usage of this binding as JNI plug-in and should normally not be used in any other case\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP JNA \fBPointer\fP to key 
.br
\fIsuppressCleanUp\fP True to suppress native reference clean-up as soon as this \fBKey\fP instance becomes phantom reachable, false otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrelease()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int org\&.libelektra\&.ReadableKey\&.compareTo (\fBReadableKey\fP other)\fC [inline]\fP"

.PP
Compares this key with the\&. 
.PP
.nf
other 

.fi
.PP
 key by comparing the key name with string comparison
.PP
\fBParameters\fP
.RS 4
\fIother\fP Other key to compare this key to 
.RE
.PP
\fBReturns\fP
.RS 4
.PD 0
.IP "\(bu" 2
0 if key name is equal 
.IP "\(bu" 2
-1 if this key name has lower alphabetical order than the
.PP
.nf
other 

.fi
.PP
 key 
.IP "\(bu" 2
1 if this key has higher alphabetical order 
.PP
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this or the
.PP
.nf
other 

.fi
.PP
 \fBReadableKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
other 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "static Optional<\fBReadableKey\fP> org\&.libelektra\&.ReadableKey\&.createReadOnly (@Nullable Pointer pointer)\fC [inline]\fP, \fC [static]\fP, \fC [protected]\fP"

.PP
Constructs a new \fBReadableKey\fP instance associated with a JNA pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIpointer\fP Optional JNA \fBPointer\fP to key 
.RE
.PP
\fBReturns\fP
.RS 4
New \fBReadableKey\fP instance if
.PP
.nf
pointer 

.fi
.PP
 is non-null, {\fB} otherwise  #release() \fP
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.ReadableKey\&.dup ()\fC [inline]\fP"

.PP
Duplicates this \fBReadableKey\fP as \fBKey\fP\&. 
.PP
\fBReturns\fP
.RS 4
New \fBKey\fP object containing the same information as this key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyException\fP if copying failed 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP
\fBSee also\fP
.RS 4
\fBdup(int)\fP 
.PP
\fBrelease()\fP 
.RE
.PP

.SS "\fBKey\fP org\&.libelektra\&.ReadableKey\&.dup (int flags)\fC [inline]\fP"

.PP
Duplicates this \fBReadableKey\fP as \fBKey\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIflags\fP Flags indicating which parts of the key to copy
.br
 Example:
.br
 \fBKEY_CP_NAME\fP | \fBKEY_CP_VALUE\fP 
.RE
.PP
\fBReturns\fP
.RS 4
New \fBKey\fP object containing the same information as this key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyException\fP if copying failed 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP
\fBSee also\fP
.RS 4
\fBdup()\fP 
.PP
\fBrelease()\fP 
.PP
\fBKEY_CP_ALL\fP 
.PP
\fBKEY_CP_META\fP 
.PP
\fBKEY_CP_NAME\fP 
.PP
\fBKEY_CP_STRING\fP 
.PP
\fBKEY_CP_VALUE\fP 
.RE
.PP

.SS "String org\&.libelektra\&.ReadableKey\&.getBaseName ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBKey\fP's base name as String 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "int org\&.libelektra\&.ReadableKey\&.getBaseNameSize ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Length of key's base name 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.getBoolean ()\fC [inline]\fP"

.PP
\fBSee also\fP
.RS 4
\fCDefinition of Bool\fP 
.RE
.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP interpreted as boolean value 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "byte org\&.libelektra\&.ReadableKey\&.getByte ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP parsed as
.PP
.nf
byte 

.fi
.PP
 
.RE
.PP
\fBExceptions\fP
.RS 4
\fINumberFormatException\fP if the \fBgetString()\fP does not return a parsable
.PP
.nf
byte 

.fi
.PP
 
.br
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "double org\&.libelektra\&.ReadableKey\&.getDouble ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP parsed as
.PP
.nf
double 

.fi
.PP
 
.RE
.PP
\fBExceptions\fP
.RS 4
\fINumberFormatException\fP if the \fBgetString()\fP does not return a parsable
.PP
.nf
double 

.fi
.PP
 
.br
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "float org\&.libelektra\&.ReadableKey\&.getFloat ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP parsed as
.PP
.nf
float 

.fi
.PP
 
.RE
.PP
\fBExceptions\fP
.RS 4
\fINumberFormatException\fP if the \fBgetString()\fP does not return a parsable
.PP
.nf
float 

.fi
.PP
 
.br
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "int org\&.libelektra\&.ReadableKey\&.getInt ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP parsed as integer 
.RE
.PP
\fBExceptions\fP
.RS 4
\fINumberFormatException\fP if the \fBgetString()\fP does not return a parsable integer 
.br
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "long org\&.libelektra\&.ReadableKey\&.getLong ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP parsed as
.PP
.nf
long 

.fi
.PP
 
.RE
.PP
\fBExceptions\fP
.RS 4
\fINumberFormatException\fP if the \fBgetString()\fP does not return a parsable
.PP
.nf
long 

.fi
.PP
 
.br
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.ReadableKey\&.getName ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBKey\fP name (key part of 'key-value' pair) 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "int org\&.libelektra\&.ReadableKey\&.getNameSize ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Length of key name 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "Pointer org\&.libelektra\&.ReadableKey\&.getPointer ()\fC [inline]\fP, \fC [protected]\fP"

.PP
\fBReturns\fP
.RS 4
JNA pointer to the native pointer for this key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "short org\&.libelektra\&.ReadableKey\&.getShort ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBgetString()\fP parsed as
.PP
.nf
short 

.fi
.PP
 
.RE
.PP
\fBExceptions\fP
.RS 4
\fINumberFormatException\fP if the \fBgetString()\fP does not return a parsable
.PP
.nf
short 

.fi
.PP
 
.br
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "String org\&.libelektra\&.ReadableKey\&.getString ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
This key's value as string 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyStringValueException\fP if the underlying native key is not of type string 
.br
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "int org\&.libelektra\&.ReadableKey\&.getValueSize ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Length / size of key value in bytes 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.isBelow (\fBReadableKey\fP other)\fC [inline]\fP"

.PP
Checks whether this key is sub-key of the\&. 
.PP
.nf
other 

.fi
.PP
 key
.PP
\fBParameters\fP
.RS 4
\fIother\fP \fBKey\fP that is used in check as parent key 
.RE
.PP
\fBReturns\fP
.RS 4
Boolean if this key is (non-direct) sub-key of other-key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this or the
.PP
.nf
other 

.fi
.PP
 \fBReadableKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
other 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.isBelowOrSame (\fBReadableKey\fP other)\fC [inline]\fP"

.PP
Checks whether this key is the same as the\&. 
.PP
.nf
other 

.fi
.PP
 key or a sub-key of the
.PP
.nf
other 

.fi
.PP
 key
.PP
\fBParameters\fP
.RS 4
\fIother\fP \fBKey\fP that is used in check as parent key 
.RE
.PP
\fBReturns\fP
.RS 4
Boolean if this key is other key or (non-direct) sub-key of other-key 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this or the
.PP
.nf
other 

.fi
.PP
 \fBReadableKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
other 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.isBinary ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
True if the underlying native key's value is of type binary, false otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.isDirectlyBelow (\fBReadableKey\fP other)\fC [inline]\fP"

.PP
Checks whether this key is direct sub-key of the\&. 
.PP
.nf
other 

.fi
.PP
 key
.PP
\fBParameters\fP
.RS 4
\fIother\fP \fBKey\fP that is used in check as parent key 
.RE
.PP
\fBReturns\fP
.RS 4
Boolean if this key is direct sub-key of other key ('child') 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this or the
.PP
.nf
other 

.fi
.PP
 \fBReadableKey\fP has already been released 
.br
\fIIllegalArgumentException\fP if
.PP
.nf
other 

.fi
.PP
 is
.PP
.nf
null 

.fi
.PP
 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.isNull ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
True, if the key has no value, false otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "boolean org\&.libelektra\&.ReadableKey\&.isString ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
True if the underlying native key's value is a valid string, false otherwise 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "Iterator<String> org\&.libelektra\&.ReadableKey\&.keyNameIterator ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
New \fBKeyNameIterator\fP backed by this \fBReadableKey\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIIllegalStateException\fP if this \fBReadableKey\fP has already been released 
.RE
.PP

.SS "void org\&.libelektra\&.ReadableKey\&.release ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Clean-up method to release key reference by first decrementing its reference counter and then trying to free the native reference
.br
 
.br
 Call this method if you do not longer need a \fBReadableKey\fP and obtained it via any of its public methods or the public methods of \fBKeySet\fP\&. If you do not manually release such \fBkeys\fP, they will get cleaned up by garbage collection as soon as they get phantom reachable\&. Therefore its encouraged to release \fBkey instances\fP as soon as you do not use them anymore\&.
.PP
\fBReadableKey\fPs should not be manually released\&. 
.PP
Reimplemented in \fBorg\&.libelektra\&.Key\fP\&.
.SS "String org\&.libelektra\&.ReadableKey\&.toString ()\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
\fBKey\fP name in string format as returned by \fBgetName()\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "final int org\&.libelektra\&.ReadableKey\&.KEY_CP_STRING = 1 << 1\fC [static]\fP"

.PP
Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key value, if it is a string\&. @apiNote Do not use together with \fBKEY_CP_VALUE\fP 
.SS "final int org\&.libelektra\&.ReadableKey\&.KEY_CP_VALUE = 1 << 2\fC [static]\fP"

.PP
Flag for use with \fBKey#copy(Key, int)\fP and \fBdup(int)\fP for copying the key value\&. @apiNote Do not use together with \fBKEY_CP_STRING\fP 

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
