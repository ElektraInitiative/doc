.TH "doc_decisions_0_drafts_transformations_md" 3elektra "Thu Mar 16 2023" "Version 0.9.14" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_0_drafts_transformations_md \- Transformations 
 
.SH "Problem"
.PP
Certain plugins, e\&.g\&. \fCrename\fP, perform transformations on keys and keysets within Elektra\&. Those transformations include, but are not limited to:
.PP
.IP "\(bu" 2
Changing the names of the keys back and forth
.IP "\(bu" 2
Changing values back and forth for normalization, e\&.g\&. \fCtrue\fP -> \fC1\fP, \fC1\fP -> \fCtrue\fP
.PP
.PP
While these features are useful, they do create feature-interaction problems\&. More specifically, problems have been observed in conjunction with the following (overlapping) types of plugins:
.PP
.IP "\(bu" 2
notification plugins
.IP "\(bu" 2
plugins that do change tracking
.PP
.PP
The problem, in general, can be described as: Which representation of the KDB should be used for notifications/change tracking?
.PP
We differentiate between:
.PP
.IP "\(bu" 2
\fIpersistent\fP name/value/metadata: How it is actually stored, i\&.e\&. the state returned by and passed to the \fCstorage\fP plugins\&.
.IP "\(bu" 2
\fItransient\fP name/value/metadata: How it is at runtime, i\&.e\&. what is returned by \fCkdbGet\fP and passed to \fCkdbSet\fP\&.
.IP "\(bu" 2
\fIintermediate\fP name/value/metadata: Any state inbetween the two\&.
.PP
.SS "Observed problems with changing key names"
Suppose there is a plugin that changes key names\&. It converts to lowercase for the runtime representation, and to uppercase for the stored representation\&. The plugin is executed in the post-storage phase for the \fCget\fP operation and the pre-storage phase for the \fCset\fP operation\&. This results in the keys being in UPPERCASE in the configuration files, but they are presented in lowercase to other plugins and applications using the Elektra API\&.
.PP
For example, here is a configuration file with a hypothetical format:
.PP
.PP
.nf
/DISPLAY/BRIGHTNESS = 100
.fi
.PP
.PP
As can be seen, the keys are in UPPERCASE within the configuration file\&. In Elektra keys are case-sensitive\&. As operations on keysets such as \fCksLookup\fP operate with \fIruntime\fP data after the post-storage phase, \fCkdb get /DISPLAY/BRIGHTNESS\fP will fail\&. For Elektra, the key \fC/DISPLAY/BRIGHTNESS\fP does not exist, as the \fCrename\fP plugin transformed this into the lowercase \fC/display/brightness\fP\&.
.PP
This leads to problems with the notification plugins\&. As notification plugins are executed after the post-storage phase of the \fCset\fP operation, they will receive a keyset with the already transformed keys\&. In this example, the notification plugins will receive all-UPPERCASE keys, and send out notifications with those all-UPPERCASE keys\&. An application listening to those notifications will not be able to query Elektra for those keys, as for Elektra those UPPERCASE keys do not exist\&.
.PP
Apart from the problems with notifications, the way key name changing plugins work also breaks change tracking in plugins like \fCdbus\fP\&. This is because key names are read-only when they are contained in a \fCKeySet\fP\&. In order to change the name of a key, such a plugin has to create a new key with the changed name, and delete the key with the old name\&. The \fCdbus\fP plugin implements change tracking by checking the 'key needs sync' flag instead of comparing the values\&. As new keys by design have the 'key needs sync' flag set, the plugins that implement change tracking via the flag will always erroneously detect transformed keys as changed\&.
.SS "Observed problems with changing values (normalization)"
Suppose we have a plugin that changes the value of a key to the hard coded value \fC1\fP during the storage phase of the \fCset\fP operation\&. If a plugin does change tracking, this will lead to false positives\&.
.PP
.PP
.nf
user:/limits/openfiles = 1
.fi
.PP
.PP
If the user changes the value, e\&.g\&. using \fCkdb set user:/limits/openfiles 23\fP, plugins will observe the new value \fC23\fP\&. The value-changing plugin, however, will reset that value back to \fC1\fP\&. So in practice, the configuration has not been changed\&. Plugins relying on change tracking plugins (e\&.g\&. notification plugins) will however think that it has\&.
.SH "Constraints"
.PP
.IP "1." 4
We want to enable some kind of transformations
.IP "2." 4
Renaming keys should be possible, at least in storage plugins 3\&.
.PP
.SH "Assumptions"
.PP
.IP "1." 4
False positives for change tracking algorithms are only a minor problem\&. False positives are that changes are detected, even though nothing changed\&.
.IP "2." 4
There is no reason to modify or delete existing \fCmeta:/\fP keys\&.
.IP "3." 4
Newly generated \fCmeta:/\&.\&.\&.\fP keys can
.IP "  \(bu" 4
either stay and get permanently stored during \fCkdbSet\fP
.IP "  \(bu" 4
or be written as \fCmeta:/generated/\&.\&.\&.\fP\&. The \fCmeta:/generated/\&.\&.\&.\fP metakeys are never stored and are automatically removed during \fCkdbSet\fP before \fCstorage\fP is called\&.
.PP

.PP
.SH "Considered Alternatives"
.PP
.SS "Enable setting and unsetting of the <tt>keyNeedsSync</tt> flag"
Require plugins that rename keys to remove the \fCkeyNeedsSync\fP flag\&. This would require making the 'key sync' APIs public\&. Letting user code modify these internal flags may lead to serious bugs\&. This does not solve the problem of changing values\&.
.SS "Use change tracking to replace the <tt>keyNeedsSync</tt> flag"
Eliminate the need of the \fCkeyNeedsSync\fP flag by utilizing the planned change tracking API\&. This does not solve the problem of changing values and false positives\&.
.SS "Store original names and values in metadata\&."
For key name transformations require that transformation plugins set a metakey (e\&.g\&. \fCmeta:/elektra/runtimename\fP) with the runtime name before they do any transformations in the \fCkdbSet\fP phase\&. This \fImust not\fP be done if this metakey already exists, i\&.e\&. another plugin already tranformed it beforehand\&. This allows notification and change tracking functionality to work determine and work with the runtime name of the key\&.
.PP
A similiar thing was already attempted for values, i\&.e\&. \fCmeta:/origvalue\fP\&.
.SS "Create an API for transformations"
Plugins must use a special function to transform key names, e\&.g\&.:
.PP
.PP
.nf
typedef const char * (*ElektraNameTransform)(const Key *);

int elektraApplyNameTransform (KeySet * ks, ElektraNameTransform transform);
.fi
.PP
.PP
How the \fCelektraApplyNameTransform\fP function marks the original name is an internal implementation detail\&. May be as \fCmeta:/\fP or something else entireley\&.
.PP
Something similar could be done for the value of a key as well\&.
.SS "Introduce a new phase for transformations"
We could also introduce a new phase between before/after storage exclusively for transformations\&. Then we can just do a 'fake' call to that phase to get back the transient names for change tracking\&.
.SS "Call value transformation plugin(s) when <tt>keySetValue</tt> / <tt>keySetString</tt> is called"
After a value has been set by the user, call the transformation plugin\&. We could store those callbacks as metakeys, i\&.e\&. \fCmeta:/generated/transformation/value/callback/#1\fP\&. Alternatively, we could implement a linked list or other data structure for the callbacks\&.
.PP
.PP
.nf
struct callback {
    callback_fn function;
    struct callback * next;
}
.fi
.PP
.PP
There will be 3 possibilities where transformations take place:
.PP
.IP "1." 4
For keys with a registered callback:
.IP "  \(bu" 4
Within \fCkeySetValue\fP / \fCkeySetString\fP the callbacks are called\&.
.PP

.IP "2." 4
For new keys, i\&.e\&. keys without a callback:
.IP "  \(bu" 4
Within \fCkdbSet\fP, as it is now\&.
.PP

.IP "3." 4
For new keys that override keys with an intact callback:
.IP "  \(bu" 4
Within \fCksAppend\fP and/or \fCksAppendKey\fP the callbacks are copied from the original key and then executed on the new key\&.
.PP

.PP
.PP
.PP
.nf
kdbGet (kdb, ks, parent);
// ks contains two keys:
//  - user:/limits/openfiles
//  - user:/background/color

Key * background = ksLookupByName(ks, "user:/background/color", 0);
keySetString(background, "#ff00ff"); // (1) -> callbacks are called\&.
ksAppendKey (ks, keyNew ("user:/my/key", KEY_VALUE, "1234", KEY_END); // (2) -> transformation will happen inside kdbSet
ksAppendKey (ks, keyNew ("user:/limits/openfiles", KEY_VALUE, "23", KEY_END); // (3) -> replaces existing key, callbacks of existing key are copied and then executed
kdbSet (kdb, ks, parent);
.fi
.PP
.PP
We also need to provide a simple API to plugins to register such callbacks for a key\&.
.PP
As the transformations for existing keys will be applied before \fCkdbSet\fP, this will elimate false positives in changetracking\&.
.PP
A drawback to this solution is that it adds some complexity to \fClibelektra-core\fP\&.
.SH "Decision"
.PP
.SH "Rationale"
.PP
.SH "Implications"
.PP
.IP "\(bu" 2

.IP "\(bu" 2

.IP "\(bu" 2

.PP
.SH "Related Decisions"
.PP
.IP "\(bu" 2
\fBHooks\fP
.IP "\(bu" 2
\fBChange Tracking\fP
.IP "\(bu" 2
\fBOperation Sequences\fP
.IP "\(bu" 2
\fBInternal Cache\fP
.PP
.SH "Notes"
.PP
.IP "\(bu" 2
\fCIssue #404\fP - dbus and rename plugin do not work together
.IP "\(bu" 2
\fCIssue #955\fP - dbus: non-UTF8 key names
.IP "\(bu" 2
\fCIssue #3626\fP - origvalue 
.PP

