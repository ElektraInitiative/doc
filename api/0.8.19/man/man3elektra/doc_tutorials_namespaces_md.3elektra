.TH "doc_tutorials_namespaces_md" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_namespaces_md \- Understanding Namespaces 

.SS "Structure of the key database"
.PP
The \fIkey database\fP of Elektra is \fIhierarchically structured\fP\&. This means that keys are organized similar to directories in a file system\&.
.PP
Lets add some keys to the database\&. To add a key we can use this command: 
.PP
.nf
    kdb set <key> <value>

.fi
.PP
.PP
Now add the the key **/a** with the Value \fBValue 1\fP and the key **/b/c** with the Value \fBValue 2\fP: 
.PP
.nf
    kdb set /a 'Value 1'
    kdb set /b/c 'Value 2'

.fi
.PP
.PP
Hierarchical structure of key database Here you see the internal structure of the database after adding the keys **/a** and **/b/c**\&. For instance the key **/b/c** has the path **/** -> \fBb\fP -> \fBc\fP\&.
.PP
Note how the name of the key determines the path to its value\&.
.PP
You can use the file system analogy as a mnemonic to remember these commands (like the file system commands in your favorite operating system):
.IP "\(bu" 2
\fCkdb ls <path>\fP lists keys below \fIpath\fP
.IP "\(bu" 2
\fCkdb rm <key>\fP removes a \fIkey\fP
.IP "\(bu" 2
\fCkdb cp <source> <dest>\fP copies a key to another path
.IP "\(bu" 2
\fCkdb get <key>\fP gets the value of \fIkey\fP
.PP
.PP
For example \fCkdb get /b/c\fP should return \fCValue 2\fP now, if you set the values before\&.
.PP
.SS "Namespaces"
.PP
Now we abandon the file system analogy and introduce the concept of \fInamespaces\fP\&.
.PP
Every key in Elektra belongs to one of these namespaces:
.IP "\(bu" 2
\fBspec\fP for specification of other keys
.IP "\(bu" 2
\fBproc\fP for in-memory keys (e\&.g\&. command-line)
.IP "\(bu" 2
\fBdir\fP for dir keys in current working directory
.IP "\(bu" 2
\fBuser\fP for user keys in home directory
.IP "\(bu" 2
\fBsystem\fP for system keys in /etc or /
.PP
.PP
All namespaces save their keys in a \fIseparate hierarchical structure\fP from the other namespaces\&.
.PP
But when we set the keys **/a** and **/b/c** before we didn't provide a namespace\&. So I hear you asking, if every key has to belong to a namespace, where are the keys? They are in the \fIuser\fP namespace, as you can verify with: 
.PP
.nf
    kdb ls user
    # user/a
    # user/b/c

.fi
.PP
.PP
When we don't provide a namespace Elektra assumes a default namespace, which should be \fBuser\fP for non-root users\&. So if you are a normal user the command \fCkdb set /b/c 'Value 2'\fP was synonymous to \fCkdb set user/b/c 'Value 2'\fP\&.
.PP
At this point the key database should have this structure: Elektras namespaces 
.SS "Cascading keys"
.PP
Another question you may ask yourself now is, what happens if we lookup a key without providing a namespace\&. So let us retrieve the key **/b/c** with the -v flag in order to make \fIkdb\fP more talkative\&. 
.PP
.nf
    kdb get -v /b/c
    # got 3 keys
    #  searching spec/b/c, found: <nothing>, options: KDB_O_CALLBACK
    #  searching proc/b/c, found: <nothing>, options:
    #  searching dir/b/c, found: <nothing>, options:
    #  searching user/b/c, found: user/b/c, options:
    # The resulting keyname is user/b/c
    # Value 2

.fi
.PP
.PP
Here you see how Elektra searches all namespaces for matching keys in this order: \fBspec\fP, \fBproc\fP, \fBdir\fP, \fBuser\fP and finally \fBsystem\fP
.PP
If a key is found in a namespace, it masks the key in all subsequent namespaces, which is the reason why the system namespace isn't searched\&. Finally the virtual key **/b/c** gets resolved to the real key \fBuser/b/c\fP\&. Because of the way a key without a namespace is retrieved, we call keys, that start with '**/**' \fBcascading keys\fP\&. You can find out more about cascading lookups \fBhere\fP\&.
.PP
Having namespaces enables both admins and users to set specific parts of the application's configuration, as you will see in the following example\&.
.PP
.SS "How it works on the command line (kdb)"
.PP
Let's say your app requires the following configuration data:
.PP
.IP "\(bu" 2
**/sw/org/myapp/policy** - a security policy to be applied
.IP "\(bu" 2
**/sw/org/myapp/default_dir** - a place where the application stores its data per default
.PP
.PP
We now want to enter this configuration by using the \fBkdb\fP tool\&.
.PP
The security policy will most probably be set by your system administrator\&. So she enters 
.PP
.nf
    sudo kdb set "system/sw/org/myapp/policy" "super-high-secure"

.fi
.PP
.PP
The key \fBsystem/app/policy\fP will be stored in the system namespace (probably at /etc/kdb on a Linux/UNIX system)\&.
.PP
Then the user sets his app directory by issuing: 
.PP
.nf
    kdb set "user/sw/org/myapp/default_dir" "/home/user/.myapp"

.fi
.PP
.PP
This key will be stored in the user namespace (at the home directory) and thus may vary from user to user\&. Elektra loads the value for the current user and passes it to the application\&.
.PP
You can also retrieve the values in the command line by using the \fBkdb\fP tool: 
.PP
.nf
    kdb get system/sw/org/maypp

.fi
.PP
.PP
\fICascading keys\fP are keys that start with **/** and are a way of making key lookups much easier\&. Let's say you want to load the configuration from the example above\&. You do not need to search every namespace by yourself\&. Just make a lookup for **/sw/org/myapp**, like this: 
.PP
.nf
    kdb get /sw/org/myapp/policy
    kdb get /sw/org/myapp/default_dir

.fi
.PP
.PP
When using cascading key the best key will be searched at runtime\&. If you are only interested in the system key, you would use: 
.PP
.nf
    kdb get system/sw/org/myapp/policy

.fi
.PP
.PP
.SS "How it works in C"
.PP
The idea is to call \fB\fBkdbGet()\fP\fP to retrieve the root key for the application\&. Looking for a specific part of the configuration is done by \fB\fBksLookup()\fP\fP\&.
.PP
The documentation provides the following example to illustrate the intended usage\&. If you want to use a \fIcascading key\fP (starting with /), you use the \fB\fBksLookup()\fP\fP or \fB\fBksLookupByName()\fP\fP function (also see \fCdoxygen\fP ): 
.PP
.nf
    if (kdbGet(handle, myConfig,  p=keyNew("/sw/org/myapp", KEY_END)) == -1)
            errorHandler ("Could not get Keys", parentKey);
    if ((myKey = ksLookupByName (myConfig, "/sw/org/myapp/mykey", 0)) == NULL)
            errorHandler ("Could not Lookup Key");
.fi
.PP
 
