.TH "md_src_plugins_required_README" 3elektra "Tue Feb 26 2019" "Version 0.8.26" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_required_READMEPlugin: required 
 \- 
.IP "\(bu" 2
infos = Information about the required plugin is in keys below
.IP "\(bu" 2
infos/author = Markus Raab elektra@libelektra.org
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = presetstorage
.IP "\(bu" 2
infos/status = productive maintained nodep libc final
.IP "\(bu" 2
infos/metadata = required mandatory
.IP "\(bu" 2
infos/description = validates configuration against set of required & accepted keys
.PP
.PP
Rarely you want a very strict validation where only required keys should be accepted\&.
.PP
This plugin rejects every configuration where keys which are not required are present\&.
.PP
In general this technique is not recommended because it would lead to rejection of any optional parameter that is introduced in later versions, hindering upgradability\&. Nevertheless, if you need such a feature, this is the correct plugin to do so\&.
.PP
.SS "Usage"
.PP
The plugin is \fInot\fP mounted by default\&. So you must explicitly add it with \fCinfos/needs\fP either in specifications or contracts\&.
.PP
.SS "Example"
.PP
If you used \fBsimplespeclang\fP and want to only allow keys that are present in the specification, you can add \fCrequired\fP to the \fCspec-mount\fP command: 
.PP
.nf
% kdb mount test.spec spec/test simplespeclang
% cat << HERE > `kdb file spec/test`
plugins required
enum allowed = something
HERE
% kdb spec-mount /test
% kdb set /test/allowed something    # is specified, works!
% kdb set /test/rejected  something  # fails because rejected not required
.fi
.PP
 
