.TH "API Proposals for Elektra" 3elektra "Fri Apr 29 2016" "Version 0.8.16" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API Proposals for Elektra \- 
.PP
for kdb\&.h\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "ssize_t \fBkeySetStringF\fP (Key *key, const char *format,\&.\&.\&.)"
.br
.RI "\fISet a formatted string\&. \fP"
.ti -1c
.RI "int \fBelektraKsToMemArray\fP (KeySet *ks, Key **buffer)"
.br
.RI "\fIBuilds an array of pointers to the keys in the supplied keyset\&. \fP"
.ti -1c
.RI "KeySet * \fBksRenameKeys\fP (KeySet *config, const Key *name)"
.br
.RI "\fITakes the first key and cuts off this common part for all other keys, instead name will be prepended\&. \fP"
.ti -1c
.RI "int \fBkeyLock\fP (Key *key, \fBoption_t\fP what)"
.br
.RI "\fIPermanently locks a part of the key\&. \fP"
.ti -1c
.RI "KeySet * \fBelektraKeyGetMetaKeySet\fP (const Key *key)"
.br
.RI "\fIReturn meta data as keyset\&. \fP"
.ti -1c
.RI "Key * \fBksPrev\fP (KeySet *ks)"
.br
.RI "\fIReturns the previous Key in a KeySet\&. \fP"
.ti -1c
.RI "Key * \fBksPopAtCursor\fP (KeySet *ks, cursor_t pos)"
.br
.RI "\fIPop key at given cursor position\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
for kdb\&.h\&. 


.PP
\fBWarning:\fP
.RS 4
Do not use these methods if you do not want to depend on exactly the Elektra version your binary was built for\&.
.RE
.PP
These methods are a technical preview of what might be added in future Elektra releases\&. It is a requirement that methods are first added here, before they are added to the public API\&.
.PP
Usually, names in proposal stage should be prefixed with elektra to clearly mark that the signature is likely to be changed and not yet ABI compatible\&. 
.SH "Function Documentation"
.PP 
.SS "KeySet* elektraKeyGetMetaKeySet (const Key *key)"

.PP
Return meta data as keyset\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key object to work with
.RE
.PP
\fBReturns:\fP
.RS 4
a duplication of the keyset representing the meta data 
.RE
.PP

.SS "int elektraKsToMemArray (KeySet *ks, Key **buffer)"

.PP
Builds an array of pointers to the keys in the supplied keyset\&. The keys are not copied, calling keyDel may remove them from the keyset\&.
.PP
The size of the buffer can be easily allocated via ksGetSize\&. Example: 
.PP
.nf
1 KeySet *ks = somekeyset;
2 Key **keyArray = calloc (ksGetSize(ks), sizeof (Key *));
3 elektraKsToMemArray (ks, keyArray);
4 \&.\&.\&. work with the array \&.\&.\&.
5 elektraFree (keyArray);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIks\fP the keyset object to work with 
.br
\fIbuffer\fP the buffer to put the result into 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of elements in the array if successful 
.PP
a negative number on null pointers or if an error occurred 
.RE
.PP

.SS "int keyLock (Key *key, \fBoption_t\fPwhat)"

.PP
Permanently locks a part of the key\&. This can be:
.IP "\(bu" 2
KEY_FLAG_LOCK_NAME to lock the name
.IP "\(bu" 2
KEY_FLAG_LOCK_VALUE to lock the value
.IP "\(bu" 2
KEY_FLAG_LOCK_META to lock the meta data
.PP
.PP
To unlock the key, duplicate it\&.
.PP
It is also possible to lock when the key is created with \fBkeyNew()\fP\&.
.PP
Some data structures need to lock the key (most likely its name), so that the ordering does not get confused\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP which name should be locked
.RE
.PP
\fBSee also:\fP
.RS 4
\fBkeyNew()\fP, \fBkeyDup()\fP, \fBksAppendKey()\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI>0\fP the bits that were successfully locked 
.br
\fI0\fP if everything was locked before 
.br
\fI-1\fP if it could not be locked (nullpointer) 
.RE
.PP

.SS "ssize_t keySetStringF (Key *key, const char *format, \&.\&.\&.)"

.PP
Set a formatted string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key to set the string value 
.br
\fIformat\fP NULL-terminated text format string 
.br
\fI\&.\&.\&.\fP more arguments
.RE
.PP
\fBReturns:\fP
.RS 4
the size of the string as set (with including 0) 
.RE
.PP

.SS "Key* ksPopAtCursor (KeySet *ks, cursor_tpos)"

.PP
Pop key at given cursor position\&. 
.PP
\fBParameters:\fP
.RS 4
\fIks\fP the keyset to pop key from 
.br
\fIc\fP where to pop
.RE
.PP
The internal cursor will be rewinded using \fBksRewind()\fP\&. You can use \fBksGetCursor()\fP and \fBksSetCursor()\fP jump back to the previous position\&. e\&.g\&. to pop at current position within \fBksNext()\fP loop: 
.PP
.nf
1 cursor_t c = ksGetCursor(ks);
2 keyDel (ksPopAtCursor(ks, c));
3 ksSetCursor(ks, c);
4 ksPrev(ks); // to have correct key after next ksNext()

.fi
.PP
.PP
\fBWarning:\fP
.RS 4
do not use, will be superseded by external iterator API
.RE
.PP
\fBReturns:\fP
.RS 4
the popped key 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if ks is 0 
.RE
.PP

.SS "Key* ksPrev (KeySet *ks)"

.PP
Returns the previous Key in a KeySet\&. KeySets have an internal cursor that can be reset with \fBksRewind()\fP\&. Every time \fBksPrev()\fP is called the cursor is decremented and the new current Key is returned\&.
.PP
You'll get a NULL pointer if the key before begin of the KeySet was reached\&.
.PP
Don't delete the key, use \fBksPop()\fP if you want to delete it\&.
.PP
\fBReturns:\fP
.RS 4
the new current Key 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBksRewind()\fP, \fBksCurrent()\fP 
.RE
.PP

.SS "KeySet* ksRenameKeys (KeySet *config, const Key *name)"

.PP
Takes the first key and cuts off this common part for all other keys, instead name will be prepended\&. 
.PP
\fBReturns:\fP
.RS 4
a new allocated keyset with keys in user namespace\&.
.RE
.PP
The first key is removed in the resulting keyset\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
