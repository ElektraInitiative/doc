.TH "doc_tutorials_java-plugins_md" 3elektra "Sat Jul 10 2021" "Version 0.9.7" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_java-plugins_md \- How-To: Write a Java Plugin 
 This file serves as a tutorial on how to get started with writing a Java plugin\&.
.SH "Basics"
.PP
If you want to know more about plugins in general, please check out the \fBHow-To: Write a Plugin\fP page\&. If you need a tutorial for using Key and KeySet in Java, please check out the \fBHow-To: Java kdb\fP page\&.
.SH "Two Technologies used in Java Plugins"
.PP
Before we will take a look into how to write a plugin in Java, it is important to note, that there are two technologies needed:
.PP
.IP "\(bu" 2
JNI plugin
.IP "\(bu" 2
JNA binding
.PP
.PP
If you would like to write a plugin in Java and look into the documentation, then you will definitely meet two notions like \fCJNI Plugin\fP and \fCJNA Binding\fP, so let's clarify, what they are\&.
.SS "JNI Plugin"
Java Native Interface is a framework, which allows Java code to execute or to be executed by programms, written in other languages like C, C++ and Assembly\&. Most of Elektra’s plugins are written in C and C++\&. Developer can use the JNI plugin, which was created specifically for Elektra to write plugins using Java code\&. For more information on JNI plugins, please take a look \fBhere\fP\&.
.PP
In order to use \fCjni\fP in Elektra, the library \fCjni\&.h\fP must be provided for it\&. This file is used by the JNI Plugin, which has to be enabled, while installing Elektra\&. More information on how to install the JNI plugin can be found \fBhere\fP\&. Please read carefully and follow instructions in “Installation”\&.
.SS "JNA Binding"
Java Native Access is Java technology (library), which like JNI allows a developer to run native code using only Java by providing access to native shared libraries\&. In order to use the JNA binding, it should be installed first\&. You can find more information on \fCJNA’s GitHub page\fP\&.
.PP
Generally speaking, \fCJNI\fP and \fCJNA\fP are both different Java technologies that could be used to bind Java code and code written in C and C++\&. \fCJNI\fP gives developers the ability to integrate Java code into C too\&. That is not possible with \fCJNA\fP\&.
.PP
Here we will look into how can we write Java Plugins using the \fCJNA Binding\fP executed via the \fCJNI Plugin\fP\&.
.SS "Writing a Plugin"
Under the following \fBpath\fP you can find the examples of already existing plugins and you can look into libelektra Java library, which is used for communication with the configuration database\&.
.PP
In order to write a new Java Plugin, the new class has to be created under the \fCplugin\fP folder\&. It has also to extend the \fCPlugin\&.java\fP interface, which contains all required methods to communicate with Elektra’s database\&.
.PP
The \fCPlugin\&.java\fP interface contains methods for the five basic functions of plugins:
.PP
.IP "\(bu" 2
\fC\fCelektraPluginOpen\fP\fP,
.IP "\(bu" 2
\fC\fCelektraPluginGet\fP\fP,
.IP "\(bu" 2
\fC\fCelektraPluginSet\fP\fP,
.IP "\(bu" 2
\fC\fCelektraPluginError\fP\fP, and
.IP "\(bu" 2
\fC\fCelektraPluginClose\fP\fP
.PP
.PP
It is expected that each method returns -1 if an error occurred or 0 if everything worked as expected\&.
.SS "Usage of Plugin"
To use the binding in a Java project, you have to include the jar file \fClibelektra-$VERSION\&.jar\fP in the project\&. The version number is the same one as used for Elektra\&. This jar is created upon build, if you enable the JNA binding\&. If you are going to use a build tool supporting dependency resolution (e\&.g\&. Gradle, Maven, \&.\&.\&.), you can fetch the Java binding from maven central with group id \fC\fBorg\&.libelektra\fP\fP and artefact id \fClibelektra\fP using the desired version number\&. You can also install the jar into your local maven repository\&. See \fBJNA binding\fP for more information\&. 
