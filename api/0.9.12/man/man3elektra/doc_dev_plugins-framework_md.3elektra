.TH "doc_dev_plugins-framework_md" 3elektra "Fri Mar 3 2023" "Version 0.9.12" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_dev_plugins-framework_md \- Plugins Framework 

.PP
The key database of Elektra basically passes a \fCKeySet\fP from plugin to plugin\&. Plugins can be chained or nested\&. The library \fClibelektra-kdb\fP only interacts with specially designed hook plugins as well as one special type of plugin called a \fIbackend plugin\fP, usually with other plugins nested below\&. All other plugins must be called by these backend plugins\&. Backend plugins then usually implement some kind of plugin chaining\&.
.SH "Contract"
.PP
In theory a plugin could do pretty much anything\&. In practice, however, plugins must meet certain expectations, described by the plugin's contract\&.
.PP
Every plugin should provide a full contract to give information how it will work with other plugins\&. Most parts of the contract are obligatory\&. Plugins cannot be loaded without this information\&. For example, plugins must provide the clause \fCinfos/version\fP\&.
.SH "Plugin Instances"
.PP
.SH "Operations"
.PP
.SH "Plugin providers"
.PP
Next to the backend plugins, already introduced before, there a few other common types of plugins that will be explained below\&.
.SS "Backend Plugins"
Backend plugins are a special type of plugin\&. Compared to other plugins they have a more strict contract for what they may and may not do in certain situations\&. This is because they are the only plugins that are invoked by \fClibelektra-kdb\fP\&. Other plugins are normally called by a backend plugin, although any plugin may call another\&.
.PP
To \fClibelektra-kdb\fP it doesn't matter what other plugins do, as long as the backend plugins hide unexpected behavior\&. In other words backend plugins must ensure that to the outside everything behaves according to the contract\&.
.PP
While any plugin could be used as backend plugin, only a select few will behave according to the contract for backend plugins\&. Therefore, it is important to know which plugins can and cannot be used as backend plugins\&.
.PP
For more information on the contract for backend plugins, take a look at the \fBrelevant documentation\fP\&.
.PP
It is also important to note, that not every plugin will be compatible with every backend plugin\&. Some backend plugins may not support calling other plugins at all, while others may also have their own contracts for the plugins they call\&. For example, the default backend plugin called \fCbackend\fP requires a \fIresolver plugin\fP and a \fIstorage plugin\fP to function\&. Because these are very important types of plugins, they are also explained below\&.
.SS "Resolver Plugins"
.SS "Storage Plugins"
.SS "Validation Plugins"

