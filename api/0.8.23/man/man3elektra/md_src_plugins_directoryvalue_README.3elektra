.TH "md_src_plugins_directoryvalue_README" 3elektra "Sun May 13 2018" "Version 0.8.23" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_directoryvalue_READMEPlugin: directoryvalue 
 \- 
.IP "\(bu" 2
infos = Information about the directoryvalue plugin is in keys below
.IP "\(bu" 2
infos/author = René Schwaiger sanssecours@me.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/provides =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = postgetstorage presetstorage
.IP "\(bu" 2
infos/status = maintained unittest nodep preview
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = This plugin converts directory values to leaf values
.PP
.SH "Directory Value"
.PP
.SS "Introduction"
.PP
The Directory Value plugin converts
.PP
.IP "1." 4
directory (non-leaf) values to leaf values in the “set” direction, and
.IP "2." 4
converts them back to directory values in the “get” direction\&.
.PP
.PP
A directory value is a key that contains children\&. For example in the key set:
.PP
.PP
.nf
user/grandparent                = Grandparent
user/grandparent/leaf           = Leaf
user/grandparent/parent         = Parent
user/grandparent/parent/child   = Child
user/mother                     = Mother
user/mother/daughter            = Daughter
user/mother/son                 = Son
.fi
.PP
.PP
the keys
.PP
.PP
.nf
user/grandparent
user/grandparent/parent
user/mother
.fi
.PP
.PP
represent directory values, while the keys
.PP
.PP
.nf
user/grandparent/leaf
user/grandparent/parent/child
user/mother/daughter
user/mother/son
.fi
.PP
.PP
specify leaf values\&. You can easily check this by drawing the key set in the form of a rooted tree:
.PP
.PP
.nf
             user
      /               \
  granparent        mother
  /      |          /    \
leaf  parent    daughter son
         |
       child
.fi
.PP
.PP
\&. The Directory Value plugin converts all directory values to leaf values in the “set” direction by adding new keys with the postfix \fC___dirdata\fP\&. Theses keys then store the old value of their parent keys
.PP
.PP
.nf
user/grandparent                    =
user/grandparent/___dirdata         = Grandparent
user/grandparent/leaf               = Leaf
user/grandparent/parent             =
user/grandparent/parent/___dirdata  = Parent
user/grandparent/parent/child       = Child
user/mother                         =
user/mother/___dirdata              = Mother
user/mother/daughter                = Daugther
user/mother/son                     = Son
.fi
.PP
.PP
\&. You might ask why we need the Directory Value plugin at all\&. The reason why we created this plugin is that some storage plugins like \fB`yajl`\fP or \fB`yamlcpp`\fP are only able to save values inside leaf keys\&. By loading the Directory Value plugin these storage plugins are also able to represent directory values properly\&.
.PP
.SS "Array Values"
.PP
The Directory value plugin also converts array values\&. Let us take a look at an example key set:
.PP
.PP
.nf
user/array    = Array Value
user/array/#0 = Firt Value
user/array/#1 = Second Value
user/array/#2 = Third Value
.fi
.PP
.PP
\&. The plugin \fBdoes not\fP convert this key set into:
.PP
.PP
.nf
user/array            =
user/array/___dirdata = Array Value
user/array/#0         = First Value
user/array/#1         = Second Value
user/array/#2         = Third Value
.fi
.PP
.PP
, since then \fCuser/array\fP \fBwould not be an array\fP any more\&. Instead the plugin inserts a new element at index 0 with the \fBvalue prefix\fP \fC___dirdata:\fP:
.PP
.PP
.nf
user/array            =
user/array/#0         = ___dirdata: Array Value
user/array/#1         = First Value
user/array/#2         = Second Value
user/array/#3         = Third Value
.fi
.PP
.PP
\&. This way a storage plugin such as YAJL or YAML CPP are still able to store \fCuser/array\fP as an array\&.
.PP
\fBRemark:\fP The plugin only converts array parents that store \fBstring values\fP\&.
.PP
.SS "Usage"
.PP
To mount the plugin use the command:
.PP
``\fC <h1>Mount plugin to cascading namespace\fP/examples/directoryvalue` sudo kdb mount config\&.file /examples/directoryvalue directoryvalue 
.PP
.nf
\&. To unmount the plugin use the command

.fi
.PP
 sudo kdb umount /examples/directoryvalue 
.PP
.nf
\&.

## Example

.fi
.PP
 
.SH "Mount plugin to cascading namespace \fC/examples/directoryvalue\fP"
.PP
.PP
sudo kdb mount config\&.file /examples/directoryvalue directoryvalue
.PP
.SH "Add a directory value"
.PP
.PP
kdb set /examples/directoryvalue/harold 'Father of SpongeBob SquarePants' 
.SH "Add a leaf value"
.PP
.PP
kdb set /examples/directoryvalue/harold/spongebob 'I am ready!'
.PP
.SH "Add an array"
.PP
.PP
kdb set /examples/directoryvalue/patrick Star kdb set /examples/directoryvalue/patrick/#0 'Being grown-up is boring\&. Besides, I don’t get Jazz\&.'
.PP
.SH "Since the plugin converts values back in the get direction"
.PP
.PP
.SH "a user of the database will not notice any changes\&."
.PP
.PP
kdb ls /examples/directoryvalue #> user/examples/directoryvalue/harold #> user/examples/directoryvalue/harold/spongebob #> user/examples/directoryvalue/patrick #> user/examples/directoryvalue/patrick/#0
.PP
kdb get /examples/directoryvalue/harold #> Father of SpongeBob SquarePants kdb get /examples/directoryvalue/harold/spongebob #> I am ready!
.PP
kdb get /examples/directoryvalue/patrick #> Star kdb get /examples/directoryvalue/patrick/#0 #> Being grown-up is boring\&. Besides, I don’t get Jazz\&.
.PP
.SH "Retrieve index of last element in array\&."
.PP
.PP
.SH "This also works if the storage plugin does not store this index\&."
.PP
.PP
kdb getmeta /examples/directoryvalue/patrick array #> #0
.PP
.SH "Undo changes to the key database"
.PP
.PP
kdb rm -r /examples/directoryvalue sudo kdb umount /examples/directoryvalue ```
.PP
.SH "Limitations"
.PP
.PP
\fBEscaping\fP is currently \fBnot possible\fP\&. If you use the Directory Value plugin you can not
.PP
.IP "\(bu" 2
use the name \fC___dirdata\fP as the last part of a normal key,
.IP "\(bu" 2
use \fC___dirdata:\fP at the beginning of a normal value in the first array element
.PP
.PP
! 
