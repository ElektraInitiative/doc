.TH "md_src_plugins_crypto_README" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_crypto_README \- Plugin: crypto 

.IP "\(bu" 2
infos = Information about crypto plugin is in keys below
.IP "\(bu" 2
infos/author = Peter Nirschl peter.nirschl@gmail.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = filefilter crypto
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = postgetstorage presetstorage #ifdef ELEKTRA_CRYPTO_API_GCRYPT {#src_plugins_crypto_README_md}
.IP "\(bu" 2
infos/status = unittest configurable memleak experimental unfinished discouraged #else
.IP "\(bu" 2
infos/status = unittest configurable memleak experimental unfinished discouraged #endif
.IP "\(bu" 2
infos/metadata = crypto/encrypt
.IP "\(bu" 2
infos/description = Cryptographic operations
.PP
.PP
.SS "Introduction"
.PP
This plugin is a filter plugin allowing Elektra to encrypt values before they are persisted and to decrypt values after they have been read from a backend\&.
.PP
The idea is to provide protection of sensible values before they are persisted\&. This means the value of a key needs to be encrypted before it is written to a file or a database\&. It also needs to be decrypted whenever an admissible access (read) is being performed\&.
.PP
The users of Elektra should not be bothered too much with the internals of the cryptographic operations\&. Also the cryptographic keys must never be exposed to the outside of the crypto module\&.
.PP
The crypto plugin supports different libraries as provider for the cryptographic operations\&. At the moment the following crypto APIs are supported:
.PP
.IP "\(bu" 2
OpenSSL (\fClibcrypto\fP)
.IP "\(bu" 2
libgcrypt
.IP "\(bu" 2
Botan
.PP
.PP
.SS "Dependencies"
.PP
#ifdef ELEKTRA_CRYPTO_API_GCRYPT
.IP "\(bu" 2
\fClibgcrypt20-dev\fP or \fClibgcrypt-devel\fP #endif #ifdef ELEKTRA_CRYPTO_API_OPENSSL
.IP "\(bu" 2
\fClibssl-dev\fP or \fCopenssl-devel\fP #endif #ifdef ELEKTRA_CRYPTO_API_BOTAN
.IP "\(bu" 2
\fClibbotan1\&.10-dev\fP or \fCbotan-devel\fP #endif
.PP
.PP
.SS "GnuPG (GPG)"
.PP
GPG is a runtime dependency for all crypto plugin variants\&. Either the \fCgpg\fP or the \fCgpg2\fP binary should be installed when using the plugin\&. Note that \fCgpg2\fP will be prefered if both versions are available\&. The GPG binary can be configured in the plugin configuration as \fC/gpg/bin\fP (see \fIGPG Configuration\fP below)\&. If no such configuration is provided, the plugin will look at the PATH environment variable to find the GPG binaries\&.
.PP
.SS "How to compile"
.PP
The following compile variants are available:
.PP
.IP "1." 4
crypto_gcrypt
.IP "2." 4
crypto_openssl
.IP "3." 4
crypto_botan
.PP
.PP
Add 'crypto' and the variants, that you want (you can add one of them or all), to the \fCPLUGINS\fP variable in \fCCMakeCache\&.txt\fP and re-run \fCcmake\fP\&.
.PP
In order to add all compile variants you can add 'CRYPTO' to the \fCPLUGINS\fP variable\&.
.PP
An example \fCCMakeCache\&.txt\fP may contain the following variable: 
.PP
.nf
PLUGINS=crypto;crypto_gcrypt;crypto_openssl;crypto_botan

.fi
.PP
.PP
or it may look like: 
.PP
.nf
PLUGINS=CRYPTO

.fi
.PP
.PP
.SS "Manual Library Setup"
.PP
If you have a custom built OpenSSL or libgcrypt on your system, you can tell CMake to use those by setting the following CMake variables\&.
.PP
For a custom OpenSSL location set:
.PP
.IP "\(bu" 2
\fIOPENSSL_INCLUDE_DIR\fP to the library's header files
.IP "\(bu" 2
\fIOPENSSL_LIBRARIES\fP to the library's binary file
.PP
.PP
For a custom libgcrypt location set:
.PP
.IP "\(bu" 2
\fILIBGCRYPT_INCLUDE_DIR\fP to the library's header files
.IP "\(bu" 2
\fILIBGCRYPT_LIBRARIES\fP to the library's binary file
.PP
.PP
For a custom Botan development file location set:
.PP
.IP "\(bu" 2
\fIBOTAN_INCLUDE_DIRS\fP to Botan's header files (includes)
.IP "\(bu" 2
\fIBOTAN_LIBRARIES\fP to Botan's binary file
.PP
.PP
.SS "Mac OS X"
.PP
Both variants of the plugin compile under Mac OS X 'El Capitan' (Version 10\&.11\&.3 (15D21))\&.
.PP
For the \fCcrypto_gcrypt\fP variant download and install either \fCMacPorts\fP or \fCHomebrew\fP\&. Use one of those tools to download and install \fClibgcrypt\fP\&. If you choose MacPorts, you can set the CMake variables like this:
.PP
.IP "\(bu" 2
\fILIBGCRYPT_INCLUDE_DIR\fP to \fC/opt/local/include/\fP
.IP "\(bu" 2
\fILIBGCRYPT_LIBRARIES\fP to \fC/opt/local/lib/libgcrypt\&.dylib\fP
.PP
.PP
The CMake command might look something like: 
.PP
.nf
cmake -DLIBGCRYPT_INCLUDE_DIR="/opt/local/include/" -DLIBGCRYPT_LIBRARIES="/opt/local/lib/libgcrypt.dylib" -DPLUGINS="crypto;crypto_gcrypt;" /path_to_elektra_src

.fi
.PP
.PP
For the \fCcrypto_openssl\fP variant a custom-built OpenSSL library is neccessary as the MacPorts or Homebrew variants do not seem to work\&. Download the latest version of the OpenSSL library from the \fCproject homepage\fP and compile it\&. Copy the header files and the binary files to a location where all users can access them\&.
.PP
Set the CMake variables \fCOPENSSL_INCLUDE_DIR\fP and \fCOPENSSL_LIBRARIES\fP to your desired location\&.
.PP
.SS "Restrictions"
.PP
At the moment the plugin will only run on UNIX/Linux-like systems, that provide implementations for \fCfork ()\fP and \fCexecv ()\fP\&.
.PP
.SS "Examples"
.PP
To mount a backend with the gcrypt plugin variant that uses the GPG key 9CCC3B514E196C6308CCD230666260C14A525406, use: 
.PP
.nf
kdb mount test.ecf user/t crypto_gcrypt "crypto/key=9CCC3B514E196C6308CCD230666260C14A525406"

.fi
.PP
.PP
Now you can specify a key \fCuser/t/a\fP and protect its content by using: 
.PP
.nf
kdb set user/t/a
kdb setmeta user/t/a crypto/encrypt 1
kdb set user/t/a "secret"

.fi
.PP
.PP
The value of \fCuser/t/a\fP will be stored encrypted\&. But you can still access the original value using \fCkdb get\fP: 
.PP
.nf
kdb get user/t/a

.fi
.PP
.PP
.SS "Configuration"
.PP
.SS "GPG Configuration"
.PP
The path to the gpg binary can be specified in 
.PP
.nf
/gpg/bin

.fi
.PP
.PP
The GPG recipient keys can be specified as \fC/gpg/key\fP directly\&. If you want to use more than one key, just enumerate like: 
.PP
.nf
/gpg/key/#0
/gpg/key/#1

.fi
.PP
.PP
If more than one key is defined, every owner of the corresponding private key can decrypt the values of the backend\&. This might be useful if applications run with their own user but the administrator has to update the configuration\&. The administrator then only needs the public key of the application user in her keyring, set the values and the application will be able to decrypt the values\&.
.PP
.SS "Cryptographic Operations"
.PP
The length of the master password that protects all the other keys can be set in: 
.PP
.nf
/crypto/masterpasswordlength

.fi
.PP
.PP
The number of iterations that are to be performed in the PBKDF2 call can be set in: 
.PP
.nf
/crypto/iterations

.fi
.PP
.PP
.SS "Library Shutdown"
.PP
The following key must be set to \fC'1'\fP within the plugin configuration, if the plugin should shut down the crypto library: 
.PP
.nf
/shutdown

.fi
.PP
.PP
Per default shutdown is disabled to prevent applications like the qt-gui from crashing\&. Shutdown is enabled in the unit tests to prevent memory leaks\&. 
