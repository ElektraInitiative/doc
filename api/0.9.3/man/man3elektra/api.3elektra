.TH "api" 3elektra "Fri Oct 30 2020" "Version 0.9.3" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
api \- for kdb\&.h\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "ssize_t \fBkeySetStringF\fP (Key *key, const char *format,\&.\&.\&.)"
.br
.RI "Set a formatted string\&. "
.ti -1c
.RI "KeySet * \fBelektraKeyGetMetaKeySet\fP (const Key *key)"
.br
.RI "Return metadata as keyset\&. "
.ti -1c
.RI "Key * \fBksPopAtCursor\fP (KeySet *ks, elektraCursor pos)"
.br
.RI "Pop key at given cursor position\&. "
.in -1c
.SH "Detailed Description"
.PP 
for kdb\&.h\&. 


.PP
\fBWarning:\fP
.RS 4
Do not use these methods if you do not want to depend on exactly the Elektra version your binary was built for\&.
.RE
.PP
These methods are a technical preview of what might be added in future Elektra releases\&. It is a requirement that methods are first added here, before they are added to the public API\&.
.PP
Usually, names in proposal stage should be prefixed with elektra to clearly mark that the signature is likely to be changed and not yet ABI compatible\&. 
.SH "Function Documentation"
.PP 
.SS "KeySet* elektraKeyGetMetaKeySet (const Key * key)"

.PP
Return metadata as keyset\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key object to work with
.RE
.PP
\fBReturns:\fP
.RS 4
a duplication of the keyset representing the metadata 
.RE
.PP

.SS "ssize_t keySetStringF (Key * key, const char * format,  \&.\&.\&.)"

.PP
Set a formatted string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key to set the string value 
.br
\fIformat\fP NULL-terminated text format string 
.br
\fI\&.\&.\&.\fP more arguments
.RE
.PP
\fBReturns:\fP
.RS 4
the size of the string as set (with including 0) 
.RE
.PP

.SS "Key* ksPopAtCursor (KeySet * ks, elektraCursor pos)"

.PP
Pop key at given cursor position\&. 
.PP
\fBParameters:\fP
.RS 4
\fIks\fP the keyset to pop key from 
.br
\fIc\fP where to pop
.RE
.PP
The internal cursor will be rewinded using \fBksRewind()\fP\&. You can use \fBksGetCursor()\fP and \fBksSetCursor()\fP jump back to the previous position\&. e\&.g\&. to pop at current position within \fBksNext()\fP loop: 
.PP
.nf
elektraCursor c = ksGetCursor(ks);
keyDel (ksPopAtCursor(ks, c));
ksSetCursor(ks, c);
ksPrev(ks); // to have correct key after next ksNext()

.fi
.PP
.PP
\fBWarning:\fP
.RS 4
do not use, will be superseded by external iterator API
.RE
.PP
\fBReturns:\fP
.RS 4
the popped key 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if ks is 0 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
