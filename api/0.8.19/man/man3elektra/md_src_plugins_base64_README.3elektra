.TH "md_src_plugins_base64_README" 3elektra "Tue Nov 22 2016" "Version 0.8.19" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_plugins_base64_README \- Plugin: base64 

.IP "\(bu" 2
infos = Information about base64 plugin is in keys below
.IP "\(bu" 2
infos/author = Peter Nirschl peter.nirschl@gmail.com
.IP "\(bu" 2
infos/licence = BSD
.IP "\(bu" 2
infos/provides = filefilter
.IP "\(bu" 2
infos/needs =
.IP "\(bu" 2
infos/recommends =
.IP "\(bu" 2
infos/placements = postgetstorage presetstorage
.IP "\(bu" 2
infos/status = maintained unittest nodep libc final configurable experimental nodoc
.IP "\(bu" 2
infos/metadata =
.IP "\(bu" 2
infos/description = Base64 Encoding
.PP
.PP
The Base64 Encoding (specified in \fCRFC4648\fP) is used to encode arbitrary binary data to ASCII strings\&.
.PP
This is useful for configuration files that must contain ASCII strings only\&.
.PP
The \fCbase64\fP plugin encodes all binary values before \fCkdb set\fP writes the configuration to the file\&. The values are decoded back to its original value after \fCkdb get\fP has read from the configuration file\&.
.PP
In order to identify the base64 encoded content, the values are marked with the prefix \fC@BASE64\fP\&. To distinguish between the \fC@\fP as character and \fC@\fP as Base64 marker, all strings starting with \fC@\fP will be modified so that they begin with \fC@@\fP\&.
.PP
See the documentation of the \fBnull plugin\fP, as it uses the same pattern for masking \fC@\fP\&.
.PP
.SS "Examples"
.PP
To mount a simple backend that uses the Base64 encoding, you can use: 
.PP
.nf
kdb mount test.ecf /test base64

.fi
.PP
.PP
All encoded binary values will look something like this: 
.PP
.nf
@BASE64SGVsbG8gV29ybGQhCg==
.fi
.PP
 
