.TH "doc_decisions_escaped_name_md" 3elektra "Sat Jul 10 2021" "Version 0.9.7" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_decisions_escaped_name_md \- Escaped Name 
 
.SH "Problem"
.PP
Currently we store both the escaped and unescaped name in a Key and in a way that there cannot be an optimization not to store it (there are functions handling out the pointer)\&.
.SH "Constraints"
.PP
.IP "\(bu" 2
allow implementations of Elektra to not store two names
.PP
.SH "Assumptions"
.PP
.IP "\(bu" 2
the memory consumption of storing the name twice is considerable
.PP
.SH "Considered Alternatives"
.PP
.IP "\(bu" 2
store it twice
.IP "\(bu" 2
store it once but in one memory block
.PP
.SH "Decision"
.PP
Remove the escaped name from \fCstruct _Key\fP and use it only when necessary\&.
.PP
Clarify and reduce \fBterminology\fP\&.
.PP
API Changes:
.PP
.IP "\(bu" 2
\fCkeyName\fP returns the unescaped name (temporary some other name for PR: \fCkeyUnescapedName(Size)\fP)
.IP "\(bu" 2
remove \fCkeyUnescapedName\fP, \fCkeyGetUnescapedNameSize\fP\&.
.IP "\(bu" 2
reverse terminology: with 'key name' we will refer to the unescaped (base) name, the escaped name will be explicitly called 'escaped key name'\&.
.IP "\(bu" 2
escaped name will be only present in
.IP "  \(bu" 4
\fCkeyNew\fP (+ arguments for adding key names) [unclear: maybe not needed]
.IP "  \(bu" 4
\fCelektraEscapeName\fP (operating on chars)
.IP "  \(bu" 4
rename \fCkeyAddName\fP, e\&.g\&. to \fCkeyAddEscapedName\fP
.PP

.IP "\(bu" 2
\fCkeyDup(\&.\&., int)\fP with options to filter which parts are copied (to allow copy of keys where only the key name is copied)
.PP
.SH "Rationale"
.PP
.SH "Implications"
.PP
.IP "\(bu" 2
needs fix of OPMPHM
.IP "\(bu" 2
Later modifications in keyNew to also accept key base names might be useful:
.IP "\(bu" 2
keyNew(KEY_VALUE, '\&.\&.\&.', KEY_NAME, '', '\&.\&.\&.', KEY_END)
.IP "\(bu" 2
keyNew (KEY_NAME, KEY_NS_USER, 'abc', 'def', KEY_NAME_END, KEY_END);
.PP
.SH "Related Decisions"
.PP
.SH "Notes"
.PP

