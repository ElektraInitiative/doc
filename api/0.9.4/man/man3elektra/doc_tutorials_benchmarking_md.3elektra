.TH "doc_tutorials_benchmarking_md" 3elektra "Mon Feb 1 2021" "Version 0.9.4" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
doc_tutorials_benchmarking_mdBenchmarking 
 \- One of the usual questions for a standard benchmark is, how much more or less time two or more different programs take to execute on the same hardware\&. This tutorial will introduce some tools and techniques that will help you to answer this question\&. For that purpose we compare the time it takes for certain YAML \fBstorage plugins\fP to translate YAML data into Elektra’s key set structure\&. Most of the techniques we describe here should be applicable too, if you want to compare the run-time of other parts of Elektra\&. If you want to know why a certain part of Elektra takes a long time to execute, then you might also be interested in the \fBprofiling tutorial\fP\&.
.PP
If you have never translated the code base of Elektra before, then please take a look \fBhere\fP before you continue\&.
.PP
Usually you want to compare the execution time of the fastest version of a compiled binary\&. For that purpose it makes sense to change the CMake build type to \fCRelease\fP, which means that the generated build system will optimize the code and strip debug symbols\&. You should also disable the logger and debug code\&. An example CMake command that uses \fCNinja\fP as build tool could look like this:
.PP
.PP
.nf
mkdir build
cd build
cmake -GNinja \&.\&.                 \
      -DCMAKE_BUILD_TYPE=Release \
      -DENABLE_LOGGER=OFF        \
      -DENABLE_DEBUG=OFF         \
      -DPLUGINS=ALL
ninja
cd \&.\&. # Change working directory back to the root of repository
.fi
.PP
.PP
Elektra already includes a tool that helps you to benchmark the \fCget\fP and \fCset\fP methods of a certain \fBplugin\fP called \fB`benchmark_plugingetset`\fP\&. To show you how to use \fCbenchmark_plugingetset\fP, we create a file named \fCtest\&.yamlcpp\&.in\fP with the following content:
.PP
.PP
.nf
- You,
- Me, &
- The Violence
.fi
.PP
.PP
and save it in the folder \fCbenchmarks/data\fP:
.PP
.PP
.nf
mkdir -p benchmarks/data
printf -- '- You,\n'       >  benchmarks/data/test\&.yamlcpp\&.in
printf -- '- Me, &\n'      >> benchmarks/data/test\&.yamlcpp\&.in
printf -- '- The Violence' >> benchmarks/data/test\&.yamlcpp\&.in
.fi
.PP
.PP
\&. As you can see the filename has to use the pattern:
.PP
.PP
.nf
test\&.$plugin\&.in
.fi
.PP
.PP
, where \fC$plugin\fP specifies the name of the plugin the benchmark tool should call\&. We can now call the \fCget\fP method of the plugin \&.\&./\&.\&./src/plugins/yamlcpp/README\&.md 'YAML CPP' using the following shell command
.PP
``` build/bin/benchmark_plugingetset benchmarks/data user yamlcpp get 
.SH "↑              ↑        ↑           ↑"
.PP
.SH "parent directory  namespace  plugin   only use `get`"
.PP
# of config file plugin method 
.PP
.nf
\&. If you can want you can also use the `time` utility to measure the execution time of the last command:

.fi
.PP
 time build/bin/benchmark_plugingetset benchmarks/data user yamlcpp get #> 0\&.00 real 0\&.00 user 0\&.00 sys ```
.PP
\&. As you can see in the output above a real configuration file that tests the performance of the \&.\&./\&.\&./src/plugins/yamlcpp/README\&.md 'YAML CPP' plugin should be much larger\&.
