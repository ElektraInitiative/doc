.TH "Vheap" 3elektra "Sat Sep 17 2016" "Version 0.8.18" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vheap \- 
.PP
The Vheap structure\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "Vheap * \fBelektraVheapInit\fP (VheapComp comp, size_t minSize)"
.br
.RI "\fIAllocates vheap with size specified by parameter minSize\&. \fP"
.ti -1c
.RI "int \fBelektraVheapIsEmpty\fP (const Vheap *vheap)"
.br
.RI "\fIChecks if the heap is empty\&. \fP"
.ti -1c
.RI "void \fBelektraVheapDel\fP (Vheap *vheap)"
.br
.RI "\fIDeletes the heap, by freeing all the memory\&. \fP"
.ti -1c
.RI "int \fBelektraVheapInsert\fP (Vheap *vheap, void *data)"
.br
.RI "\fIInserts an element in the Vheap, by finding the right position\&. \fP"
.ti -1c
.RI "void * \fBelektraVheapRemove\fP (Vheap *vheap)"
.br
.RI "\fIRemoves and returns an element from the Vheap, by taking the first element which is ordered by VheapComp, after removal the remaining elements get ordered again\&. \fP"
.ti -1c
.RI "int \fBelektraVheapClear\fP (Vheap *vheap)"
.br
.RI "\fIClears the heap in a fast fashion\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The Vheap structure\&. 

A heap is a Data structure which keeps the data ordered\&. Elements can only be retrieved in this order! Insertions and retrieves need log (n)\&.
.PP
This implementation allocates memory dynamically\&. The space gets doubled if full and reduced by half if used only a quarter of it, but not less than minSize\&.
.PP
To construct a max heap the comparison function VheapComp (a, b), must return 1 on a > b and 0 otherwise\&. For a min heap 1 on a < b and 0 otherwise\&. 
.SH "Function Documentation"
.PP 
.SS "int elektraVheapClear (Vheap *vheap)"

.PP
Clears the heap in a fast fashion\&. Set the count to zero and does not reallocate memory\&. The next reallocation happens at Remove\&.
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on success 
.br
\fI0\fP on error 
.RE
.PP

.SS "Vheap* elektraVheapInit (VheapCompcomp, size_tminSize)"

.PP
Allocates vheap with size specified by parameter minSize\&. To construct a max heap the comparison function VheapComp (a, b), must return 1 on a > b and 0 otherwise\&. For a min heap 1 on a < b and 0 otherwise\&.
.PP
\fBParameters:\fP
.RS 4
\fIcomp\fP the comparison function of the heap 
.br
\fIminSize\fP the minimum size of the heap 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIa\fP Vheap pointer 
.br
\fINULL\fP error 
.RE
.PP

.SS "int elektraVheapInsert (Vheap *vheap, void *data)"

.PP
Inserts an element in the Vheap, by finding the right position\&. Resizes the memory first if needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP the element 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP on error 
.br
\fI1\fP otherwise 
.RE
.PP

.SS "int elektraVheapIsEmpty (const Vheap *vheap)"

.PP
Checks if the heap is empty\&. 
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP on empty 
.br
\fI0\fP on non empty 
.br
\fI-1\fP on error 
.RE
.PP

.SS "void* elektraVheapRemove (Vheap *vheap)"

.PP
Removes and returns an element from the Vheap, by taking the first element which is ordered by VheapComp, after removal the remaining elements get ordered again\&. Resizes the heap if needed\&.
.PP
\fBReturn values:\fP
.RS 4
\fIthe\fP element 
.br
\fINULL\fP on error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
