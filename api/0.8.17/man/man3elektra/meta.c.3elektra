.TH "meta.c" 3elektra "Tue Jun 14 2016" "Version 0.8.17" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
meta.c \- 
.PP
Methods for meta data manipulation\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <kdb\&.h>\fP
.br
\fC#include <kdbconfig\&.h>\fP
.br
\fC#include <kdbease\&.h>\fP
.br
\fC#include <kdbmeta\&.h>\fP
.br
\fC#include <kdbprivate\&.h>\fP
.br
\fC#include <kdbproposal\&.h>\fP
.br
\fC#include <kdbtypes\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBkeyComment\fP (const Key *key)"
.br
.RI "\fIReturn a pointer to the real internal \fCkey\fP comment\&. \fP"
.ti -1c
.RI "ssize_t \fBkeyGetCommentSize\fP (const Key *key)"
.br
.RI "\fICalculates number of bytes needed to store a key comment, including final NULL\&. \fP"
.ti -1c
.RI "ssize_t \fBkeyGetComment\fP (const Key *key, char *returnedComment, size_t maxSize)"
.br
.RI "\fIGet the key comment\&. \fP"
.ti -1c
.RI "ssize_t \fBkeySetComment\fP (Key *key, const char *newComment)"
.br
.RI "\fISet a comment for a key\&. \fP"
.ti -1c
.RI "uid_t \fBkeyGetUID\fP (const Key *key)"
.br
.RI "\fIGet the user ID of a key\&. \fP"
.ti -1c
.RI "int \fBkeySetUID\fP (Key *key, uid_t uid)"
.br
.RI "\fISet the user ID of a key\&. \fP"
.ti -1c
.RI "gid_t \fBkeyGetGID\fP (const Key *key)"
.br
.RI "\fIGet the group ID of a key\&. \fP"
.ti -1c
.RI "int \fBkeySetGID\fP (Key *key, gid_t gid)"
.br
.RI "\fISet the group ID of a key\&. \fP"
.ti -1c
.RI "int \fBkeySetDir\fP (Key *key)"
.br
.RI "\fISet mode so that key will be recognized as directory\&. \fP"
.ti -1c
.RI "mode_t \fBkeyGetMode\fP (const Key *key)"
.br
.RI "\fIReturn the key mode permissions\&. \fP"
.ti -1c
.RI "int \fBkeySetMode\fP (Key *key, mode_t mode)"
.br
.RI "\fISet the key mode permissions\&. \fP"
.ti -1c
.RI "time_t \fBkeyGetATime\fP (const Key *key)"
.br
.RI "\fIGet last time the key data was read from disk\&. \fP"
.ti -1c
.RI "int \fBkeySetATime\fP (Key *key, time_t atime)"
.br
.RI "\fIUpdate the atime information for a key\&. \fP"
.ti -1c
.RI "time_t \fBkeyGetMTime\fP (const Key *key)"
.br
.RI "\fIGet last modification time of the key on disk\&. \fP"
.ti -1c
.RI "int \fBkeySetMTime\fP (Key *key, time_t mtime)"
.br
.RI "\fIUpdate the mtime information for a key\&. \fP"
.ti -1c
.RI "time_t \fBkeyGetCTime\fP (const Key *key)"
.br
.RI "\fIGet last time the key metadata was changed from disk\&. \fP"
.ti -1c
.RI "int \fBkeySetCTime\fP (Key *key, time_t ctime)"
.br
.RI "\fIUpdate the ctime information for a key\&. \fP"
.ti -1c
.RI "int \fBelektraKeyCmpOrder\fP (const Key *ka, const Key *kb)"
.br
.RI "\fICompare the order metadata of two keys\&. \fP"
.ti -1c
.RI "void \fBelektraMetaArrayAdd\fP (Key *key, const char *metaName, const char *value)"
.br
.RI "\fIcreates an metadata array or appends another element to an existing metadata array e\&.g\&. \fP"
.ti -1c
.RI "KeySet * \fBelektraMetaArrayToKS\fP (Key *key, const char *metaName)"
.br
.RI "\fIcreates a KeySet from a MetaKey array\&. \fP"
.ti -1c
.RI "int \fBelektraSortTopology\fP (KeySet *ks, Key **array)"
.br
.RI "\fItopological sorting \fP"
.ti -1c
.RI "char * \fBelektraMetaArrayToString\fP (Key *key, const char *metaName, const char *delim)"
.br
.RI "\fIreturns the metakey array as a string separated by delim \fP"
.in -1c
.SH "Detailed Description"
.PP 
Methods for meta data manipulation\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see doc/COPYING or http://www.libelektra.org) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
