.TH "internal.c" 3elektra "Mon Apr 12 2021" "Version 0.9.5" "Elektra" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal.c \- Internal methods for Elektra\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'kdbprivate\&.h'\fP
.br
\fC#include <kdb\&.h>\fP
.br
\fC#include 'kdbinternal\&.h'\fP
.br
\fC#include <kdbassert\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "ssize_t \fBelektraMemcpy\fP (Key **array1, Key **array2, size_t size)"
.br
.RI "Internal Methods for Elektra\&. "
.ti -1c
.RI "ssize_t \fBelektraMemmove\fP (Key **array1, Key **array2, size_t size)"
.br
.RI "Copies the key array2 into where array1 points\&. "
.ti -1c
.RI "int \fBelektraStrCmp\fP (const char *s1, const char *s2)"
.br
.RI "Compare Strings\&. "
.ti -1c
.RI "int \fBelektraStrNCmp\fP (const char *s1, const char *s2, size_t n)"
.br
.RI "Compare Strings up to a maximum length\&. "
.ti -1c
.RI "int \fBelektraStrCaseCmp\fP (const char *s1, const char *s2)"
.br
.RI "Compare Strings ignoring case\&. "
.ti -1c
.RI "int \fBelektraStrNCaseCmp\fP (const char *s1, const char *s2, size_t n)"
.br
.RI "Compare Strings ignoring case up to a maximum length\&. "
.ti -1c
.RI "int \fBelektraMemCaseCmp\fP (const char *s1, const char *s2, size_t size)"
.br
.RI "Compare two memory regions but make cmp chars uppercase before comparison\&. "
.ti -1c
.RI "int \fBelektraRealloc\fP (void **buffer, size_t size)"
.br
.RI "Reallocate Storage in a save way\&. "
.ti -1c
.RI "void * \fBelektraMalloc\fP (size_t size)"
.br
.RI "Allocate memory for Elektra\&. "
.ti -1c
.RI "void * \fBelektraCalloc\fP (size_t size)"
.br
.RI "Allocate memory for Elektra\&. "
.ti -1c
.RI "void \fBelektraFree\fP (void *ptr)"
.br
.RI "Free memory of Elektra or its backends\&. "
.ti -1c
.RI "char * \fBelektraStrDup\fP (const char *s)"
.br
.RI "Copy string into new allocated memory\&. "
.ti -1c
.RI "char * \fBelektraStrNDup\fP (const char *s, size_t l)"
.br
.RI "Copy buffer into new allocated memory\&. "
.ti -1c
.RI "size_t \fBelektraStrLen\fP (const char *s)"
.br
.RI "Calculates the length in bytes of a string\&. "
.ti -1c
.RI "char * \fBelektraFormat\fP (const char *format,\&.\&.\&.)"
.br
.RI "Does string formatting in fresh allocated memory\&. "
.ti -1c
.RI "char * \fBelektraVFormat\fP (const char *format, va_list arg_list)"
.br
.RI "Does string formatting in fresh allocated memory\&. "
.in -1c
.SH "Detailed Description"
.PP 
Internal methods for Elektra\&. 


.PP
\fBCopyright:\fP
.RS 4
BSD License (see LICENSE\&.md or https://www.libelektra.org) 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void* elektraCalloc (size_t size)"

.PP
Allocate memory for Elektra\&. Memory will be set to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP the requested size 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraMalloc\fP 
.RE
.PP

.SS "char* elektraFormat (const char * format,  \&.\&.\&.)"

.PP
Does string formatting in fresh allocated memory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP as in printf() 
.br
\fI\&.\&.\&.\fP as in printf()
.RE
.PP
\fBReturns:\fP
.RS 4
new allocated memory (free with elektraFree) 
.RE
.PP

.SS "void elektraFree (void * ptr)"

.PP
Free memory of Elektra or its backends\&. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP the pointer to free
.RE
.PP
If ptr is NULL, no operation is performed\&.
.PP
\fBSee also:\fP
.RS 4
\fBelektraMalloc\fP 
.RE
.PP

.SS "void* elektraMalloc (size_t size)"

.PP
Allocate memory for Elektra\&. 
.PP
.nf
if ((buffer = elektraMalloc (length)) == 0) {
        // here comes the failure handler
        // no allocation happened here, so don't use buffer
#if DEBUG
        fprintf (stderr, "Allocation error");
#endif
        // return with error
}

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP the requested size
.RE
.PP
This function is compatible to ANSI-C malloc 
.PP
\fBSee also:\fP
.RS 4
\fBelektraFree\fP 
.PP
\fBelektraCalloc\fP 
.RE
.PP

.SS "int elektraMemCaseCmp (const char * s1, const char * s2, size_t size)"

.PP
Compare two memory regions but make cmp chars uppercase before comparison\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared 
.br
\fIsize\fP to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "ssize_t elektraMemcpy (Key ** array1, Key ** array2, size_t size)"

.PP
Internal Methods for Elektra\&. To use them: 
.PP
.nf
#include <kdbinternal\&.h>

.fi
.PP
.PP
There are some areas where libraries have to reimplement some basic functions to archive support for non-standard systems, for testing purposes or to provide a little more convenience\&. Copies the key array2 into where array1 points\&. It copies size elements\&.
.PP
Overlapping is prohibited, use \fBelektraMemmove()\fP instead\&.
.PP
\fBParameters:\fP
.RS 4
\fIarray1\fP the destination 
.br
\fIarray2\fP the source 
.br
\fIsize\fP how many pointer to Keys to copy 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on null pointers 
.br
\fI0\fP if nothing was done 
.RE
.PP
\fBReturns:\fP
.RS 4
size how many keys were copied 
.RE
.PP

.SS "ssize_t elektraMemmove (Key ** array1, Key ** array2, size_t size)"

.PP
Copies the key array2 into where array1 points\&. It copies size elements\&.
.PP
Overlapping is ok\&. If they do not overlap consider \fBelektraMemcpy()\fP instead\&.
.PP
\fBParameters:\fP
.RS 4
\fIarray1\fP the destination 
.br
\fIarray2\fP the source 
.br
\fIsize\fP how many pointer to Keys to copy 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on null pointers 
.br
\fI0\fP if nothing was done 
.RE
.PP
\fBReturns:\fP
.RS 4
size how many keys were copied 
.RE
.PP

.SS "int elektraRealloc (void ** buffer, size_t size)"

.PP
Reallocate Storage in a save way\&. 
.PP
.nf
if (elektraRealloc ((void **) & buffer, new_length) < 0) {
        // here comes the failure handler
        // you can still use the old buffer
#if DEBUG
        fprintf (stderr, "Reallocation error\n");
#endif
        elektraFree (buffer);
        buffer = 0;
        // return with error
}

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIbuffer\fP is a pointer to a elektraMalloc 
.br
\fIsize\fP is the new size for the memory 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP on failure 
.br
\fI0\fP on success 
.RE
.PP

.SS "int elektraStrCaseCmp (const char * s1, const char * s2)"

.PP
Compare Strings ignoring case\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "int elektraStrCmp (const char * s1, const char * s2)"

.PP
Compare Strings\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "char* elektraStrDup (const char * s)"

.PP
Copy string into new allocated memory\&. You need to free the memory yourself\&.
.PP
\fBNote:\fP
.RS 4
that size is determined at runtime\&. So if you have a size information, don't use that function\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the null-terminated string to duplicate
.RE
.PP
\fBReturns:\fP
.RS 4
0 if out of memory, a pointer otherwise 
.RE
.PP
\fBPrecondition:\fP
.RS 4
s must be a c-string\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBelektraFree\fP 
.PP
\fBelektraStrLen\fP 
.PP
\fBelektraStrNDup\fP 
.RE
.PP

.SS "size_t elektraStrLen (const char * s)"

.PP
Calculates the length in bytes of a string\&. This function differs from strlen() because it is Unicode and multibyte chars safe\&. While strlen() counts characters and ignores the final NULL, \fBelektraStrLen()\fP count bytes including the ending NULL\&.
.PP
It must not be used to search for / in the name, because it does not consider escaping\&. Instead use the unescaped name\&.
.PP
\fBSee also:\fP
.RS 4
\fBkeyUnescapedName()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the string to get the length from 
.RE
.PP
\fBReturns:\fP
.RS 4
number of bytes used by the string, including the final NULL\&. 
.RE
.PP

.SS "int elektraStrNCaseCmp (const char * s1, const char * s2, size_t n)"

.PP
Compare Strings ignoring case up to a maximum length\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared 
.br
\fIn\fP The maximum length to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "int elektraStrNCmp (const char * s1, const char * s2, size_t n)"

.PP
Compare Strings up to a maximum length\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared 
.br
\fIs2\fP The second string to be compared 
.br
\fIn\fP The maximum length to be compared
.RE
.PP
\fBReturns:\fP
.RS 4
a negative number if s1 is less than s2 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP if s1 matches s2 
.RE
.PP
\fBReturns:\fP
.RS 4
a positive number if s1 is greater than s2 
.RE
.PP

.SS "char* elektraStrNDup (const char * s, size_t l)"

.PP
Copy buffer into new allocated memory\&. You need to free the memory yourself\&.
.PP
This function also works with \\0 characters in the buffer\&. The length is taken as given, it must be correct\&.
.PP
\fBReturns:\fP
.RS 4
0 if out of memory, a pointer otherwise 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP must be an allocated buffer 
.br
\fIl\fP the length of s 
.RE
.PP

.SS "char* elektraVFormat (const char * format, va_list arg_list)"

.PP
Does string formatting in fresh allocated memory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP as in vprintf() 
.br
\fIarg_list\fP as in vprintf()
.RE
.PP
\fBReturns:\fP
.RS 4
new allocated memory (free with elektraFree) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Elektra from the source code\&.
